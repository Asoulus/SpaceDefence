<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlaxEngine.CSharp</name>
    </assembly>
    <members>
        <member name="T:FlaxEngine.AlphaBlendMode">
            <summary>
            Alpha blending modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.Linear">
            <summary>
            Linear interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.Cubic">
            <summary>
            Cubic-in interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.HermiteCubic">
            <summary>
            Hermite-Cubic.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.Sinusoidal">
            <summary>
            Sinusoidal interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.QuadraticInOut">
            <summary>
            Quadratic in-out interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.CubicInOut">
            <summary>
            Cubic in-out interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.QuarticInOut">
            <summary>
            Quartic in-out interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.QuinticInOut">
            <summary>
            Quintic in-out interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.CircularIn">
            <summary>
            Circular-in interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.CircularOut">
            <summary>
            Circular-out interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.CircularInOut">
            <summary>
            Circular in-out interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.ExpIn">
            <summary>
            Exponential-in interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.ExpOut">
            <summary>
            Exponential-Out interpolation.
            </summary>
        </member>
        <member name="F:FlaxEngine.AlphaBlendMode.ExpInOut">
            <summary>
            Exponential in-out interpolation.
            </summary>
        </member>
        <member name="T:FlaxEngine.Animations">
            <summary>
            The animations playback service.
            </summary>
        </member>
        <member name="P:FlaxEngine.Animations.System">
            <summary>
            The system for Animations update.
            </summary>
        </member>
        <member name="T:FlaxEngine.AnimEvent">
            <summary>
            The animation notification event triggered during animation playback.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AnimEvent"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimEvent.OnEvent(FlaxEngine.AnimatedModel,FlaxEngine.Animation,System.Single,System.Single)">
            <summary>
            Animation event notification.
            </summary>
            <param name="actor">The animated model actor instance.</param>
            <param name="anim">The source animation.</param>
            <param name="time">The current animation time (in seconds).</param>
            <param name="deltaTime">The current animation tick delta time (in seconds).</param>
        </member>
        <member name="T:FlaxEngine.AnimContinuousEvent">
            <summary>
            The animation notification event (with duration) triggered during animation playback that contains begin and end (event notification is received as a tick).
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimContinuousEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AnimContinuousEvent"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimContinuousEvent.OnBegin(FlaxEngine.AnimatedModel,FlaxEngine.Animation,System.Single,System.Single)">
            <summary>
            Animation notification called before the first event.
            </summary>
            <param name="actor">The animated model actor instance.</param>
            <param name="anim">The source animation.</param>
            <param name="time">The current animation time (in seconds).</param>
            <param name="deltaTime">The current animation tick delta time (in seconds).</param>
        </member>
        <member name="M:FlaxEngine.AnimContinuousEvent.OnEnd(FlaxEngine.AnimatedModel,FlaxEngine.Animation,System.Single,System.Single)">
            <summary>
            Animation notification called after the last event (guaranteed to be always called).
            </summary>
            <param name="actor">The animated model actor instance.</param>
            <param name="anim">The source animation.</param>
            <param name="time">The current animation time (in seconds).</param>
            <param name="deltaTime">The current animation tick delta time (in seconds).</param>
        </member>
        <member name="T:FlaxEngine.AnimGraphParameter">
            <summary>
            Animation graph parameter.
            </summary>
            <seealso cref="T:FlaxEngine.GraphParameter" />
        </member>
        <member name="M:FlaxEngine.AnimGraphParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AnimGraphParameter"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.SceneAnimation">
            <summary>
            Scene animation timeline for animating objects and playing cut-scenes.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SceneAnimation"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimation.FramesPerSecond">
            <summary>
            The frames amount per second of the timeline animation.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimation.DurationFrames">
            <summary>
            The animation duration (in frames).
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimation.Duration">
            <summary>
            Gets the animation duration (in seconds).
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneAnimation.LoadTimeline">
            <summary>
            Gets the serialized timeline data.
            </summary>
            <returns>The output timeline data container. Empty if failed to load.</returns>
        </member>
        <member name="T:FlaxEngine.SceneAnimationPlayer">
            <summary>
            The scene animation playback actor.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneAnimationPlayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SceneAnimationPlayer"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.Animation">
            <summary>
            The scene animation to play.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.Speed">
            <summary>
            The animation playback speed factor. Scales the timeline update delta time. Can be used to speed up or slow down the sequence.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.StartTime">
            <summary>
            The animation start time. Can be used to skip part of the sequence on begin.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.UseTimeScale">
            <summary>
            Determines whether the scene animation should take into account the global game time scale for simulation updates.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.Loop">
            <summary>
            Determines whether the scene animation should loop when it finishes playing.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.PlayOnStart">
            <summary>
            Determines whether the scene animation should auto play on game start.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.RandomStartTime">
            <summary>
            Determines whether the scene animation should randomize the start time on play begin.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.RestoreStateOnStop">
            <summary>
            Determines whether the scene animation should restore initial state on playback stop. State is cached when animation track starts play after being stopped (not paused).
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.UpdateMode">
            <summary>
            The animation update mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.UsePrefabObjects">
            <summary>
            Determines whether the scene animation should automatically map prefab objects from scene animation into prefab instances. Useful for reusable animations to automatically link prefab objects.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.IsPlaying">
            <summary>
            Gets the value that determines whether the scene animation is playing.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.IsPaused">
            <summary>
            Gets the value that determines whether the scene animation is paused.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.IsStopped">
            <summary>
            Gets the value that determines whether the scene animation is stopped.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneAnimationPlayer.Time">
            <summary>
            Gets or sets the current animation playback time position (seconds).
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneAnimationPlayer.Play">
            <summary>
            Starts playing the animation. Has no effect if animation is already playing.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneAnimationPlayer.Pause">
            <summary>
            Pauses the animation. Has no effect if animation is not playing.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneAnimationPlayer.Stop">
            <summary>
            Stops playing the animation. Has no effect if animation is already stopped.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneAnimationPlayer.Tick(System.Single)">
            <summary>
            Manually ticks the animation by performing the playback update with a given time delta.
            </summary>
            <param name="dt">The update delta time (in seconds). It does not get scaled by player Speed parameter.</param>
        </member>
        <member name="M:FlaxEngine.SceneAnimationPlayer.MapObject(System.Guid,System.Guid)">
            <summary>
            Adds an object mapping. The object `from` represented by it's unique ID will be redirected to the specified `to`. Can be used to reuse the same animation for different objects.
            </summary>
            <param name="from">The source object from the scene animation asset to replace.</param>
            <param name="to">The destination object to animate.</param>
        </member>
        <member name="M:FlaxEngine.SceneAnimationPlayer.MapTrack(System.String,System.Guid)">
            <summary>
            Adds an object mapping for the object track. The track name `from` will be redirected to the specified object `to`. Can be used to reuse the same animation for different objects.
            </summary>
            <param name="from">The source track name from the scene animation asset to replace.</param>
            <param name="to">The destination object to animate.</param>
        </member>
        <member name="T:FlaxEngine.SceneAnimationPlayer.UpdateModes">
            <summary>
            Describes the scene animation updates frequency.
            </summary>
        </member>
        <member name="F:FlaxEngine.SceneAnimationPlayer.UpdateModes.EveryUpdate">
            <summary>
            Animation will be updated every game logic update.
            </summary>
        </member>
        <member name="F:FlaxEngine.SceneAnimationPlayer.UpdateModes.Manual">
            <summary>
            Animation can be updated manually by the user scripts.
            </summary>
        </member>
        <member name="T:FlaxEngine.Audio">
            <summary>
            The audio service used for music and sound effects playback.
            </summary>
        </member>
        <member name="E:FlaxEngine.Audio.DevicesChanged">
            <summary>
            Event called when audio devices collection gets changed.
            </summary>
        </member>
        <member name="E:FlaxEngine.Audio.ActiveDeviceChanged">
            <summary>
            Event called when the active audio device gets changed.
            </summary>
        </member>
        <member name="P:FlaxEngine.Audio.Devices">
            <summary>
            The all audio devices.
            </summary>
        </member>
        <member name="P:FlaxEngine.Audio.ActiveDevice">
            <summary>
            Gets the active device.
            </summary>
        </member>
        <member name="P:FlaxEngine.Audio.ActiveDeviceIndex">
            <summary>
            Gets or sets the index of the active device.
            </summary>
        </member>
        <member name="P:FlaxEngine.Audio.MasterVolume">
            <summary>
            Gets or sets the master volume applied to all the audio sources (normalized to range 0-1).
            </summary>
        </member>
        <member name="P:FlaxEngine.Audio.Volume">
            <summary>
            Gets the actual master volume (including all side effects and mute effectors).
            </summary>
        </member>
        <member name="P:FlaxEngine.Audio.DopplerFactor">
            <summary>
            Sets the doppler effect factor. Scale for source and listener velocities. Default is 1.
            </summary>
        </member>
        <member name="T:FlaxEngine.AudioClip">
            <summary>
            Audio clip stores audio data in a compressed or uncompressed format using a binary asset. Clips can be provided to audio sources or other audio methods to be played.
            </summary>
            <seealso cref="T:FlaxEngine.BinaryAsset" />
        </member>
        <member name="M:FlaxEngine.AudioClip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AudioClip"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioClip.Format">
            <summary>
            Gets the audio data format.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioClip.Info">
            <summary>
            Gets the audio data info metadata.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioClip.Is3D">
            <summary>
            Returns true if the sound source is three dimensional (volume and pitch varies based on listener distance and velocity).
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioClip.IsStreamable">
            <summary>
            Returns true if the sound is using data streaming.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioClip.IsStreamingTaskActive">
            <summary>
            Returns true if the sound data is during streaming by an async task.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioClip.Length">
            <summary>
            Gets the length of the audio clip (in seconds).
            </summary>
        </member>
        <member name="M:FlaxEngine.AudioClip.ExtractData(System.Byte[]@,FlaxEngine.AudioDataInfo@)">
            <summary>
            Extracts the source audio data from the asset storage. Loads the whole asset. The result data is in an asset format.
            </summary>
            <param name="resultData">The result data.</param>
            <param name="resultDataInfo">The result data format header info.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.AudioClip.ExtractDataFloat(System.Single[]@,FlaxEngine.AudioDataInfo@)">
            <summary>
            Extracts the raw audio data (PCM format) from the asset storage and converts it to the normalized float format (in range [-1;1]). Loads the whole asset.
            </summary>
            <param name="resultData">The result data.</param>
            <param name="resultDataInfo">The result data format header info. That output data has 32 bits float data not the signed PCM data.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.AudioClip.ExtractDataRaw(System.Byte[]@,FlaxEngine.AudioDataInfo@)">
            <summary>
            Extracts the raw audio data (PCM format) from the asset storage. Loads the whole asset.
            </summary>
            <param name="resultData">The result data.</param>
            <param name="resultDataInfo">The result data format header info.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.AudioDevice">
            <summary>
            Represents a single audio device.
            </summary>
        </member>
        <member name="M:FlaxEngine.AudioDevice.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AudioDevice"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioDevice.Name">
            <summary>
            The device name.
            </summary>
        </member>
        <member name="T:FlaxEngine.AudioListener">
            <summary>
            Represents a listener that hears audio sources. For spatial audio the volume and pitch of played audio is determined by the distance, orientation and velocity differences between the source and the listener.
            </summary>
        </member>
        <member name="M:FlaxEngine.AudioListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AudioListener"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioListener.Velocity">
            <summary>
            Gets the velocity of the listener. Determines pitch in relation to AudioListener's position.
            </summary>
        </member>
        <member name="T:FlaxEngine.AudioSource">
            <summary>
            Represents a source for emitting audio. Audio can be played spatially (gun shot), or normally (music). Each audio source must have an AudioClip to play - back, and it can also have a position in the case of spatial(3D) audio.
            </summary>
            <remarks>
            Whether or not an audio source is spatial is controlled by the assigned AudioClip.The volume and the pitch of a spatial audio source is controlled by its position and the AudioListener's position/direction/velocity.
            </remarks>
        </member>
        <member name="M:FlaxEngine.AudioSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AudioSource"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.Clip">
            <summary>
            The audio clip asset used as a source of the sound.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.Velocity">
            <summary>
            Gets the velocity of the source. Determines pitch in relation to AudioListener's position. Only relevant for spatial (3D) sources.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.Volume">
            <summary>
            Gets or sets the volume of the audio played from this source, in [0, 1] range.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.Pitch">
            <summary>
            Gets or sets the pitch of the played audio. The default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.IsLooping">
            <summary>
            Determines whether the audio clip should loop when it finishes playing.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.PlayOnStart">
            <summary>
            Determines whether the audio clip should auto play on level start.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.MinDistance">
            <summary>
            Gets or sets the minimum distance at which audio attenuation starts. When the listener is closer to the source than this value, audio is heard at full volume. Once farther away the audio starts attenuating.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.Attenuation">
            <summary>
            Gets or sets the attenuation that controls how quickly does audio volume drop off as the listener moves further from the source.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.State">
            <summary>
            Gets the current state of the audio playback (playing/paused/stopped).
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.Time">
            <summary>
            Gets or sets the current time of playback. If playback has not yet started, it specifies the time at which playback will start at. The time is in seconds, in range [0, ClipLength].
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.Is3D">
            <summary>
            Returns true if the sound source is three dimensional (volume and pitch varies based on listener distance and velocity).
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.UseStreaming">
            <summary>
            Returns true if audio clip is valid, loaded and uses dynamic data streaming.
            </summary>
        </member>
        <member name="P:FlaxEngine.AudioSource.IsActuallyPlayingSth">
            <summary>
            Determines whether this audio source started playing audio via audio backend. After audio play it may wait for audio clip data to be loaded or streamed.
            </summary>
        </member>
        <member name="M:FlaxEngine.AudioSource.Play">
            <summary>
            Starts playing the currently assigned audio clip.
            </summary>
        </member>
        <member name="M:FlaxEngine.AudioSource.Pause">
            <summary>
            Pauses the audio playback.
            </summary>
        </member>
        <member name="M:FlaxEngine.AudioSource.Stop">
            <summary>
            Stops audio playback, rewinding it to the start.
            </summary>
        </member>
        <member name="T:FlaxEngine.AudioSource.States">
            <summary>
            Valid states in which AudioSource can be in.
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioSource.States.Playing">
            <summary>
            The source is currently playing.
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioSource.States.Paused">
            <summary>
            The source is currently paused (play will resume from paused point).
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioSource.States.Stopped">
            <summary>
            The source is currently stopped (play will resume from start).
            </summary>
        </member>
        <member name="T:FlaxEngine.AudioFormat">
            <summary>
            Audio data storage format used by the runtime.
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioFormat.Raw">
            <summary>
            The raw PCM data.
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioFormat.Vorbis">
            <summary>
            The Vorbis data.
            </summary>
        </member>
        <member name="T:FlaxEngine.AudioDataInfo">
            <summary>
            Meta-data describing a chunk of audio.
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioDataInfo.NumSamples">
            <summary>
            The total number of audio samples in the audio data (includes all channels).
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioDataInfo.SampleRate">
            <summary>
            The number of audio samples per second, per channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioDataInfo.NumChannels">
            <summary>
            The number of channels. Each channel has its own set of samples.
            </summary>
        </member>
        <member name="F:FlaxEngine.AudioDataInfo.BitDepth">
            <summary>
            The number of bits per sample.
            </summary>
        </member>
        <member name="T:FlaxEngine.Asset">
            <summary>
            Asset objects base class.
            </summary>
        </member>
        <member name="M:FlaxEngine.Asset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Asset"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Asset.ReferencesCount">
            <summary>
            Gets asset's reference count. Asset will be automatically unloaded when this reaches zero.
            </summary>
        </member>
        <member name="P:FlaxEngine.Asset.Path">
            <summary>
            Gets the path to the asset storage file. In Editor it reflects the actual file, in cooked Game, it fakes the Editor path to be informative for developers.
            </summary>
        </member>
        <member name="P:FlaxEngine.Asset.IsLoaded">
            <summary>
            Returns true if asset is loaded, otherwise false.
            </summary>
        </member>
        <member name="P:FlaxEngine.Asset.LastLoadFailed">
            <summary>
            Returns true if last asset loading failed, otherwise false.
            </summary>
        </member>
        <member name="P:FlaxEngine.Asset.IsVirtual">
            <summary>
            Determines whether this asset is virtual (generated or temporary, has no storage so it won't be saved).
            </summary>
        </member>
        <member name="M:FlaxEngine.Asset.Reload">
            <summary>
            Reloads the asset.
            </summary>
        </member>
        <member name="M:FlaxEngine.Asset.WaitForLoaded(System.Double)">
            <summary>
            Stops the current thread execution and waits until asset will be loaded (loading will fail, success or be cancelled).
            </summary>
            <param name="timeoutInMilliseconds">Custom timeout value in milliseconds.</param>
            <returns>True if cannot load that asset (failed or has been cancelled), otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Asset.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.AssetInfo">
            <summary>
            Contains short information about an asset.
            </summary>
        </member>
        <member name="F:FlaxEngine.AssetInfo.ID">
            <summary>
            Unique ID.
            </summary>
        </member>
        <member name="F:FlaxEngine.AssetInfo.TypeName">
            <summary>
            The stored data full typename. Used to recognize asset type.
            </summary>
        </member>
        <member name="F:FlaxEngine.AssetInfo.Path">
            <summary>
            Cached path.
            </summary>
        </member>
        <member name="T:FlaxEngine.Animation">
            <summary>
            Asset that contains an animation spline represented by a set of keyframes, each representing an endpoint of a linear curve.
            </summary>
        </member>
        <member name="M:FlaxEngine.Animation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Animation"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Animation.Length">
            <summary>
            Gets the length of the animation (in seconds).
            </summary>
        </member>
        <member name="P:FlaxEngine.Animation.Duration">
            <summary>
            Gets the duration of the animation (in frames).
            </summary>
        </member>
        <member name="P:FlaxEngine.Animation.FramesPerSecond">
            <summary>
            Gets the amount of the animation frames per second.
            </summary>
        </member>
        <member name="P:FlaxEngine.Animation.Info">
            <summary>
            Gets the animation clip info.
            </summary>
        </member>
        <member name="T:FlaxEngine.Animation.InfoData">
            <summary>
            Contains basic information about the animation asset contents.
            </summary>
        </member>
        <member name="F:FlaxEngine.Animation.InfoData.Length">
            <summary>
            Length of the animation in seconds.
            </summary>
        </member>
        <member name="F:FlaxEngine.Animation.InfoData.FramesCount">
            <summary>
            Amount of animation frames (some curve tracks may use less keyframes).
            </summary>
        </member>
        <member name="F:FlaxEngine.Animation.InfoData.ChannelsCount">
            <summary>
            Amount of animation channel tracks.
            </summary>
        </member>
        <member name="F:FlaxEngine.Animation.InfoData.KeyframesCount">
            <summary>
            The total amount of keyframes in the animation tracks.
            </summary>
        </member>
        <member name="F:FlaxEngine.Animation.InfoData.MemoryUsage">
            <summary>
            The estimated memory usage (in bytes) of the animation (all tracks and keyframes size in memory).
            </summary>
        </member>
        <member name="T:FlaxEngine.AnimationGraph">
            <summary>
            The Animation Graph is used to evaluate a final pose for the animated model for the current frame.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AnimationGraph"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimationGraph.BaseModel">
            <summary>
            Gets the base model asset used for the animation preview and the skeleton layout source.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.InitAsAnimation(FlaxEngine.SkinnedModel,FlaxEngine.Animation,System.Boolean)">
            <summary>
            Initializes virtual Anim Graph to play a single animation.
            </summary>
            <param name="baseModel">The base model asset.</param>
            <param name="anim">The animation to play.</param>
            <param name="loop">True if play animation in a loop.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.LoadSurface">
            <summary>
            Tries to load surface graph from the asset.
            </summary>
            <returns>The surface data or empty if failed to load it.</returns>
        </member>
        <member name="T:FlaxEngine.AnimationGraph.CustomNodeArchetypeFactoryAttribute">
            <summary>
            The custom attribute that allows to specify the class that contains node archetype getter methods.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:FlaxEngine.AnimationGraph.CustomNode">
            <summary>
            Base class for all custom nodes. Allows to override it and define own Anim Graph nodes in game scripts or via plugins.
            </summary>
            <remarks>See official documentation to learn more how to use and create custom nodes in Anim Graph.</remarks>
        </member>
        <member name="T:FlaxEngine.AnimationGraph.CustomNode.InitData">
            <summary>
            The initial node data container structure.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.InitData.Values">
            <summary>
            The node values array. The first item is always the typename of the custom node type, second one is node group name, others are customizable by editor node archetype.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.InitData.BaseModel">
            <summary>
            The skinned model asset that is a base model for the graph (source of the skeleton).
            </summary>
        </member>
        <member name="T:FlaxEngine.AnimationGraph.CustomNode.Context">
            <summary>
            The node evaluation context structure.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.Graph">
            <summary>
            The graph pointer (unmanaged).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.GraphExecutor">
            <summary>
            The graph executor pointer (unmanaged).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.Node">
            <summary>
            The node pointer (unmanaged).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.NodeId">
            <summary>
            The graph node identifier (unique per graph).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.BoxId">
            <summary>
            The requested box identifier to evaluate its value.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.DeltaTime">
            <summary>
            The absolute time delta since last anim graph update for the current instance (in seconds). Can be used to animate or blend node logic over time.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.CurrentFrameIndex">
            <summary>
            The index of the current update frame. Can be used to detect if custom node hasn't been updated for more than one frame to reinitialize it in some cases.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.BaseModel">
            <summary>
            The skinned model asset that is a base model for the graph (source of the skeleton).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Context.Instance">
            <summary>
            The instance of the animated model that during update.
            </summary>
        </member>
        <member name="T:FlaxEngine.AnimationGraph.CustomNode.Impulse">
            <summary>
            The animation graph 'impulse' connections data container (the actual transfer is done via pointer as it gives better performance). 
            Container for skeleton nodes transformation hierarchy and any other required data. 
            Unified layout for both local and world transformation spaces.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.NodesCount">
            <summary>
            The nodes array size (elements count).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.Unused">
            <summary>
            The unused field.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.Nodes">
            <summary>
            The skeleton nodes transformation hierarchy nodes. Size always matches the Anim Graph skeleton description (access size from <see cref="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.NodesCount"/>). It's pointer to the unmanaged allocation (read-only).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.RootMotionTranslation">
            <summary>
            The root motion data.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.RootMotionRotation">
            <summary>
            The root motion data.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.Position">
            <summary>
            The animation time position (in seconds).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimationGraph.CustomNode.Impulse.Length">
            <summary>
            The animation length (in seconds).
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.CustomNode.Load(FlaxEngine.AnimationGraph.CustomNode.InitData@)">
            <summary>
            Loads the node data from the serialized values and prepares the node to run. In most cases this method is called from the content loading thread (not the main game thread).
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.CustomNode.Evaluate(FlaxEngine.AnimationGraph.CustomNode.Context@)">
            <summary>
            Evaluates the node based on inputs and node data.
            </summary>
            <param name="context">The evaluation context.</param>
            <returns>The node value for the given context (node values, output box id, etc.).</returns>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.CustomNode.HasConnection(FlaxEngine.AnimationGraph.CustomNode.Context@,System.Int32)">
            <summary>
            Checks if th box of the given ID has valid connection to get its value.
            </summary>
            <param name="context">The context.</param>
            <param name="boxId">The input box identifier.</param>
            <returns>True if has connection, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.CustomNode.GetInputValue(FlaxEngine.AnimationGraph.CustomNode.Context@,System.Int32)">
            <summary>
            Gets the value of the input box of the given ID. Throws the exception if box has no valid connection.
            </summary>
            <param name="context">The context.</param>
            <param name="boxId">The input box identifier.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.CustomNode.GetOutputImpulseData(FlaxEngine.AnimationGraph.CustomNode.Context@)">
            <summary>
            Gets the data for the output skeleton nodes hierarchy. Each node can have only one cached nodes output. Use this method if your node performs skeleton nodes modifications.
            </summary>
            <param name="context">The context.</param>
            <returns>The impulse data. It contains empty nodes hierarchy allocated per-node. Modify it to adjust output custom skeleton nodes transformations.</returns>
        </member>
        <member name="M:FlaxEngine.AnimationGraph.CustomNode.CopyImpulseData(FlaxEngine.AnimationGraph.CustomNode.Impulse*,FlaxEngine.AnimationGraph.CustomNode.Impulse*)">
            <summary>
            Copies the impulse data from the source to the destination container.
            </summary>
            <param name="destination">The destination data.</param>
            <param name="source">The source data.</param>
        </member>
        <member name="T:FlaxEngine.AnimationGraphFunction">
            <summary>
            Animation Graph function asset that contains reusable part of the anim graph.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimationGraphFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AnimationGraphFunction"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimationGraphFunction.LoadSurface">
            <summary>
            Tries to load surface graph from the asset.
            </summary>
            <returns>The output surface data, or empty if failed to load.</returns>
        </member>
        <member name="T:FlaxEngine.CubeTexture">
            <summary>
            Cube texture asset contains 6 images that is usually stored on a GPU as a cube map (one slice per each axis direction).
            </summary>
        </member>
        <member name="M:FlaxEngine.CubeTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.CubeTexture"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.IESProfile">
            <summary>
            Contains IES profile texture used by the lights to simulate real life bulb light emission.
            </summary>
        </member>
        <member name="M:FlaxEngine.IESProfile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.IESProfile"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.IESProfile.Brightness">
            <summary>
            The light brightness in Lumens, imported from IES profile.
            </summary>
        </member>
        <member name="P:FlaxEngine.IESProfile.TextureMultiplier">
            <summary>
            The multiplier to map texture value to result to integrate over the sphere to 1.
            </summary>
        </member>
        <member name="T:FlaxEngine.Material">
            <summary>
            Material asset that contains shader for rendering models on the GPU.
            </summary>
        </member>
        <member name="M:FlaxEngine.Material.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Material"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.Material.LoadSurface(System.Boolean)">
            <summary>
            Tries to load surface graph from the asset.
            </summary>
            <param name="createDefaultIfMissing">True if create default surface if missing.</param>
            <returns>The output surface data, or empty if failed to load.</returns>
        </member>
        <member name="T:FlaxEngine.MaterialBase">
            <summary>
            Base class for <see cref="T:FlaxEngine.Material"/> and <see cref="T:FlaxEngine.MaterialInstance"/>.
            </summary>
            <seealso cref="T:FlaxEngine.BinaryAsset" />
        </member>
        <member name="M:FlaxEngine.MaterialBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.MaterialBase"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialBase.Parameters">
            <summary>
            Gets the material parameters collection.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialBase.Info">
            <summary>
            Gets the material info, structure which describes material surface.
            </summary>
        </member>
        <member name="M:FlaxEngine.MaterialBase.GetParameter(System.String)">
            <summary>
            Gets the material parameter.
            </summary>
        </member>
        <member name="M:FlaxEngine.MaterialBase.GetParameterValue(System.String)">
            <summary>
            Gets the material parameter value.
            </summary>
            <returns>The parameter value.</returns>
        </member>
        <member name="M:FlaxEngine.MaterialBase.SetParameterValue(System.String,System.Object,System.Boolean)">
            <summary>
            Sets the material parameter value (and sets IsOverride to true).
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The value to set.</param>
            <param name="warnIfMissing">True if warn if parameter is missing, otherwise will do nothing.</param>
        </member>
        <member name="M:FlaxEngine.MaterialBase.CreateVirtualInstance">
            <summary>
            Creates the virtual material instance of this material which allows to override any material parameters.
            </summary>
            <returns>The created virtual material instance asset.</returns>
        </member>
        <member name="P:FlaxEngine.MaterialBase.IsSurface">
            <summary>
            Gets a value indicating whether this material is a surface shader (can be used with a normal meshes).
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialBase.IsPostFx">
            <summary>
            Gets a value indicating whether this material is post fx (cannot be used with a normal meshes).
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialBase.IsDecal">
            <summary>
            Gets a value indicating whether this material is decal (cannot be used with a normal meshes).
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialBase.IsGUI">
            <summary>
            Gets a value indicating whether this material is a GUI shader (cannot be used with a normal meshes).
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialBase.IsTerrain">
            <summary>
            Gets a value indicating whether this material is a terrain shader (cannot be used with a normal meshes).
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialBase.IsParticle">
            <summary>
            Gets a value indicating whether this material is a particle shader (cannot be used with a normal meshes).
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialFunction">
            <summary>
            Material function graph asset that contains reusable part of the material graph.
            </summary>
        </member>
        <member name="M:FlaxEngine.MaterialFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.MaterialFunction"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialInstance">
            <summary>
            Instance of the <seealso cref="T:FlaxEngine.Material" /> with custom set of material parameter values.
            </summary>
        </member>
        <member name="M:FlaxEngine.MaterialInstance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.MaterialInstance"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialInstance.BaseMaterial">
            <summary>
            Gets or sets the base material. If value gets changed parameters collection is restored to the default values of the new material.
            </summary>
        </member>
        <member name="T:FlaxEngine.Model">
            <summary>
            Model asset that contains model object made of meshes which can rendered on the GPU.
            </summary>
        </member>
        <member name="M:FlaxEngine.Model.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Model"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Model.LODs">
            <summary>
            Model level of details. The first entry is the highest quality LOD0 followed by more optimized versions.
            </summary>
        </member>
        <member name="P:FlaxEngine.Model.LoadedLODs">
            <summary>
            Gets the amount of loaded model LODs.
            </summary>
        </member>
        <member name="M:FlaxEngine.Model.GetBox(FlaxEngine.Matrix,System.Int32)">
            <summary>
            Gets the model bounding box in custom matrix world space.
            </summary>
            <param name="world">The transformation matrix.</param>
            <param name="lodIndex">The Level Of Detail index.</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:FlaxEngine.Model.GetBox(System.Int32)">
            <summary>
            Gets the model bounding box in local space.
            </summary>
            <param name="lodIndex">The Level Of Detail index.</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:FlaxEngine.Model.Draw(FlaxEngine.RenderContext@,FlaxEngine.MaterialBase,FlaxEngine.Matrix@,FlaxEngine.StaticFlags,System.Boolean)">
            <summary>
            Draws the model.
            </summary>
            <param name="renderContext">The rendering context.</param>
            <param name="material">The material to use for rendering.</param>
            <param name="world">The world transformation of the model.</param>
            <param name="flags">The object static flags.</param>
            <param name="receiveDecals">True if rendered geometry can receive decals, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.Model.SetupLODs(System.Int32[])">
            <summary>
            Setups the model LODs collection including meshes creation.
            </summary>
            <param name="meshesCountPerLod">The meshes count per lod array (amount of meshes per LOD).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="F:FlaxEngine.Model.MaxLODs">
            <summary>
            The maximum amount of levels of detail for the model.
            </summary>
        </member>
        <member name="F:FlaxEngine.Model.MaxMeshes">
            <summary>
            The maximum amount of meshes per model LOD.
            </summary>
        </member>
        <member name="F:FlaxEngine.Model.MaxMaterialSlots">
            <summary>
            The maximum allowed amount of material slots per model resource
            </summary>
        </member>
        <member name="T:FlaxEngine.ModelBase">
            <summary>
            Base class for asset types that can contain a model resource.
            </summary>
        </member>
        <member name="M:FlaxEngine.ModelBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.ModelBase"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelBase.MinScreenSize">
            <summary>
            The minimum screen size to draw this model (the bottom limit). Used to cull small models. Set to 0 to disable this feature.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelBase.MaterialSlots">
            <summary>
            The list of material slots.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelBase.MaterialSlotsCount">
            <summary>
            Gets the amount of the material slots used by this model asset.
            </summary>
        </member>
        <member name="M:FlaxEngine.ModelBase.SetupMaterialSlots(System.Int32)">
            <summary>
            Resizes the material slots collection. Updates meshes that were using removed slots.
            </summary>
        </member>
        <member name="M:FlaxEngine.ModelBase.GetSlot(System.String)">
            <summary>
            Gets the material slot by the name.
            </summary>
            <param name="name">The slot name.</param>
            <returns>The material slot with the given name or null if cannot find it (asset may be not loaded yet).</returns>
        </member>
        <member name="T:FlaxEngine.RawDataAsset">
            <summary>
            Raw bytes container asset.
            </summary>
        </member>
        <member name="M:FlaxEngine.RawDataAsset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.RawDataAsset"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.RawDataAsset.Data">
            <summary>
            The bytes array stored in the asset.
            </summary>
        </member>
        <member name="T:FlaxEngine.Shader">
            <summary>
            The shader asset. Contains a program that runs on the GPU and is able to perform rendering calculation using textures, vertices and other resources.
            </summary>
        </member>
        <member name="M:FlaxEngine.Shader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Shader"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Shader.GPU">
            <summary>
            The GPU shader object (not null).
            </summary>
        </member>
        <member name="T:FlaxEngine.SkeletonMask">
            <summary>
            The skinned model skeleton bones boolean masking data.
            </summary>
        </member>
        <member name="M:FlaxEngine.SkeletonMask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SkeletonMask"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkeletonMask.Skeleton">
            <summary>
            The referenced skinned model skeleton that defines the masked nodes hierarchy.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkeletonMask.MaskedNodes">
            <summary>
            Gets or sets the per-skeleton node mask (by name).
            </summary>
        </member>
        <member name="P:FlaxEngine.SkeletonMask.NodesMask">
            <summary>
            Gets the per-skeleton-node boolean mask (read-only).
            </summary>
        </member>
        <member name="T:FlaxEngine.SkinnedModel">
            <summary>
            Skinned model asset that contains model object made of meshes that can be rendered on the GPU using skeleton bones skinning.
            </summary>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SkinnedModel"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedModel.LODs">
            <summary>
            Model level of details. The first entry is the highest quality LOD0 followed by more optimized versions.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedModel.LoadedLODs">
            <summary>
            Gets the amount of loaded model LODs.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedModel.Nodes">
            <summary>
            Gets the skeleton nodes hierarchy.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedModel.Bones">
            <summary>
            Gets the skeleton bones hierarchy.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedModel.BlendShapes">
            <summary>
            Gets the blend shapes names used by the skinned model meshes (from LOD 0 only).
            </summary>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.FindNode(System.String)">
            <summary>
            Finds the node with the given name.
            </summary>
            <param name="name">The name of the node.</param>
            <returns>The index of the node or -1 if not found.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.FindBone(System.String)">
            <summary>
            Finds the bone with the given name.
            </summary>
            <param name="name">The name of the node used by the bone.</param>
            <returns>The index of the bone or -1 if not found.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.FindBone(System.Int32)">
            <summary>
            Finds the bone that is using a given node index.
            </summary>
            <param name="nodeIndex">The index of the node.</param>
            <returns>The index of the bone or -1 if not found.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.GetBox(FlaxEngine.Matrix,System.Int32)">
            <summary>
            Gets the model bounding box in custom matrix world space (rig pose transformed by matrix, not animated).
            </summary>
            <param name="world">The transformation matrix.</param>
            <param name="lodIndex">The Level Of Detail index.</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.GetBox(System.Int32)">
            <summary>
            Gets the model bounding box in local space (rig pose, not animated).
            </summary>
            <param name="lodIndex">The Level Of Detail index.</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.SetupLODs(System.Int32[])">
            <summary>
            Setups the model LODs collection including meshes creation.
            </summary>
            <param name="meshesCountPerLod">The meshes count per lod array (amount of meshes per LOD).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.SetupSkeleton(FlaxEngine.SkeletonNode[])">
            <summary>
            Setups the skinned model skeleton. Uses the same nodes layout for skeleton bones and calculates the offset matrix by auto.
            </summary>
            <param name="nodes">The nodes hierarchy. The first node must be a root one (with parent index equal -1).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedModel.SetupSkeleton(FlaxEngine.SkeletonNode[],FlaxEngine.SkeletonBone[],System.Boolean)">
            <summary>
            Setups the skinned model skeleton.
            </summary>
            <param name="nodes">The nodes hierarchy. The first node must be a root one (with parent index equal -1).</param>
            <param name="bones">The bones hierarchy.</param>
            <param name="autoCalculateOffsetMatrix">If true then the OffsetMatrix for each bone will be auto-calculated by the engine, otherwise the provided values will be used.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="F:FlaxEngine.SkinnedModel.MaxBones">
            <summary>
            The maximum allowed amount of skeleton bones to be used with skinned model.
            </summary>
        </member>
        <member name="T:FlaxEngine.Texture">
            <summary>
            Texture asset contains an image that is usually stored on a GPU and is used during rendering graphics.
            </summary>
        </member>
        <member name="M:FlaxEngine.Texture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Texture"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Texture.IsNormalMap">
            <summary>
            Returns true if texture is a normal map.
            </summary>
        </member>
        <member name="M:FlaxEngine.Texture.LoadFile(System.String,System.Boolean)">
            <summary>
            Loads the texture from the image file. Supported file formats depend on a runtime platform. All platform support loading PNG, BMP, TGA, HDR and JPEG files.
            </summary>
            <remarks>Valid only for virtual assets.</remarks>
            <param name="path">The source image file path.</param>
            <param name="generateMips">True if generate mipmaps for the imported texture.</param>
            <returns>True if fails, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Texture.FromFile(System.String,System.Boolean)">
            <summary>
            Loads the texture from the image file and creates the virtual texture asset for it. Supported file formats depend on a runtime platform. All platform support loading PNG, BMP, TGA, HDR and JPEG files.
            </summary>
            <param name="path">The source image file path.</param>
            <param name="generateMips">True if generate mipmaps for the imported texture.</param>
            <returns>The loaded texture (virtual asset) or null if fails.</returns>
        </member>
        <member name="T:FlaxEngine.VisualScript">
            <summary>
            The Visual Script asset. Contains a graph with functions and parameters for visual scripting.
            </summary>
            <seealso cref="T:FlaxEngine.BinaryAsset" />
        </member>
        <member name="M:FlaxEngine.VisualScript.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.VisualScript"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.VisualScript.Meta">
            <summary>
            The script metadata.
            </summary>
        </member>
        <member name="P:FlaxEngine.VisualScript.ScriptTypeName">
            <summary>
            Gets the typename of the Visual Script. Identifies it's scripting type.
            </summary>
        </member>
        <member name="P:FlaxEngine.VisualScript.Parameters">
            <summary>
            Gets the list of Visual Script parameters declared in this graph (excluding base types).
            </summary>
        </member>
        <member name="M:FlaxEngine.VisualScript.CreateInstance">
            <summary>
            Creates a new instance of the Visual Script object.
            </summary>
            <returns>The created instance or null if failed.</returns>
        </member>
        <member name="M:FlaxEngine.VisualScript.GetScriptInstanceParameterValue(System.String,FlaxEngine.Object)">
            <summary>
            Gets the value of the Visual Script parameter of the given instance.
            </summary>
            <param name="name">The parameter name.</param>
            <param name="instance">The object instance.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:FlaxEngine.VisualScript.SetScriptInstanceParameterValue(System.String,FlaxEngine.Object,System.Object)">
            <summary>
            Sets the value of the Visual Script parameter of the given instance.
            </summary>
            <param name="name">The parameter name.</param>
            <param name="instance">The object instance.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:FlaxEngine.VisualScript.LoadSurface">
            <summary>
            Tries to load surface graph from the asset.
            </summary>
            <returns>The surface data or empty if failed to load it.</returns>
        </member>
        <member name="T:FlaxEngine.VisualScript.Flags">
            <summary>
            Visual Script flag types.
            </summary>
        </member>
        <member name="F:FlaxEngine.VisualScript.Flags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.VisualScript.Flags.Abstract">
            <summary>
            Script is abstract and cannot be instantiated directly.
            </summary>
        </member>
        <member name="F:FlaxEngine.VisualScript.Flags.Sealed">
            <summary>
            Script is sealed and cannot be inherited by other scripts.
            </summary>
        </member>
        <member name="T:FlaxEngine.VisualScript.Metadata">
            <summary>
            Visual Script metadata container.
            </summary>
        </member>
        <member name="F:FlaxEngine.VisualScript.Metadata.BaseTypename">
            <summary>
            The base class typename.
            </summary>
        </member>
        <member name="F:FlaxEngine.VisualScript.Metadata.Flags">
            <summary>
            The script flags.
            </summary>
        </member>
        <member name="T:FlaxEngine.BinaryAsset">
            <summary>
            Base class for all binary assets.
            </summary>
            <seealso cref="T:FlaxEngine.Asset" />
        </member>
        <member name="M:FlaxEngine.BinaryAsset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.BinaryAsset"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.ContentStats">
            <summary>
            Content and assets statistics container.
            </summary>
        </member>
        <member name="F:FlaxEngine.ContentStats.AssetsCount">
            <summary>
            Amount of asset objects in memory.
            </summary>
        </member>
        <member name="F:FlaxEngine.ContentStats.LoadedAssetsCount">
            <summary>
            Amount of loaded assets.
            </summary>
        </member>
        <member name="F:FlaxEngine.ContentStats.LoadingAssetsCount">
            <summary>
            Amount of loading assets. Zero if all assets are loaded in.
            </summary>
        </member>
        <member name="F:FlaxEngine.ContentStats.VirtualAssetsCount">
            <summary>
            Amount of virtual assets (don't have representation in file).
            </summary>
        </member>
        <member name="T:FlaxEngine.Content">
            <summary>
            Loads and manages assets.
            </summary>
        </member>
        <member name="E:FlaxEngine.Content.AssetDisposing">
            <summary>
            Occurs when asset is being disposed and will be unloaded (by force). All references to it should be released.
            </summary>
        </member>
        <member name="E:FlaxEngine.Content.AssetReloading">
            <summary>
            Occurs when asset is being reloaded and will be unloaded (by force) to be loaded again (e.g. after reimport). Always called from the main thread.
            </summary>
        </member>
        <member name="P:FlaxEngine.Content.Stats">
            <summary>
            Gets content statistics.
            </summary>
        </member>
        <member name="P:FlaxEngine.Content.Assets">
            <summary>
            Gets the assets (loaded or during load).
            </summary>
        </member>
        <member name="M:FlaxEngine.Content.GetAssetInfo(System.Guid,FlaxEngine.AssetInfo@)">
            <summary>
            Finds the asset info by id.
            </summary>
            <param name="id">The asset id.</param>
            <param name="info">The output asset info. Filled with valid values only if method returns true.</param>
            <returns>True if found any asset, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Content.GetAssetInfo(System.String,FlaxEngine.AssetInfo@)">
            <summary>
            Finds the asset info by path.
            </summary>
            <param name="path">The asset path.</param>
            <param name="info">The output asset info. Filled with valid values only if method returns true.</param>
            <returns>True if found any asset, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Content.GetAllAssets">
            <summary>
            Finds all the asset IDs. Uses asset registry.
            </summary>
            <returns>The list of all asset IDs.</returns>
        </member>
        <member name="M:FlaxEngine.Content.GetAllAssetsByType(System.Type)">
            <summary>
            Finds all the asset IDs by type (exact type, without inheritance checks). Uses asset registry.
            </summary>
            <param name="type">The asset type.</param>
            <returns>The list of asset IDs that match the given type.</returns>
        </member>
        <member name="M:FlaxEngine.Content.CreateTemporaryAssetPath">
            <summary>
            Generates temporary asset path.
            </summary>
            <returns>Asset path for a temporary usage.</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsync(System.Guid,System.Type)">
            <summary>
            Loads asset and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            </summary>
            <param name="id">Asset unique ID</param>
            <param name="type">The asset type. If loaded object has different type (excluding types derived from the given) the loading fails.</param>
            <returns>Loaded asset or null if cannot</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsync(System.String,System.Type)">
            <summary>
            Loads asset and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            </summary>
            <param name="path">The path of the asset (absolute or relative to the current workspace directory).</param>
            <param name="type">The asset type. If loaded object has different type (excluding types derived from the given) the loading fails.</param>
            <returns>Loaded asset or null if cannot</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsyncInternal(System.String,System.Type)">
            <summary>
            Loads internal engine asset and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            </summary>
            <param name="internalPath">The path of the asset relative to the engine internal content (excluding the extension).</param>
            <param name="type">The asset type. If loaded object has different type (excluding types derived from the given) the loading fails.</param>
            <returns>The loaded asset or null if failed.</returns>
        </member>
        <member name="M:FlaxEngine.Content.GetAsset(System.String)">
            <summary>
            Finds the asset with at given path. Checks all loaded assets.
            </summary>
            <param name="path">The path.</param>
            <returns>The found asset or null if not loaded.</returns>
        </member>
        <member name="M:FlaxEngine.Content.GetAsset(System.Guid)">
            <summary>
            Finds the asset with given ID. Checks all loaded assets.
            </summary>
            <param name="id">The id.</param>
            <returns>The found asset or null if not loaded.</returns>
        </member>
        <member name="M:FlaxEngine.Content.DeleteAsset(FlaxEngine.Asset)">
            <summary>
            Deletes the specified asset.
            </summary>
            <param name="asset">The asset.</param>
        </member>
        <member name="M:FlaxEngine.Content.DeleteAsset(System.String)">
            <summary>
            Deletes the asset at the specified path.
            </summary>
            <param name="path">The asset path.</param>
        </member>
        <member name="M:FlaxEngine.Content.UnloadAsset(FlaxEngine.Asset)">
            <summary>
            Unloads the specified asset.
            </summary>
            <param name="asset">The asset.</param>
        </member>
        <member name="M:FlaxEngine.Content.CreateVirtualAsset(System.Type)">
            <summary>
            Creates temporary and virtual asset of the given type.
            </summary>
            <param name="type">The asset type klass.</param>
            <returns>Created asset or null if failed.</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsync``1(System.Guid)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            </summary>
            <param name="id">Asset unique ID.</param>
            <typeparam name="T">Type of the asset to load. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if loaded, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsync(System.Guid)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            </summary>
            <param name="id">Asset unique ID.</param>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsync``1(System.String)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            </summary>
            <param name="path">Path to the asset.</param>
            <typeparam name="T">Type of the asset to load. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if loaded, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsync(System.String)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            </summary>
            <param name="path">Path to the asset.</param>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsyncInternal``1(System.String)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            </summary>
            <param name="internalPath">Internal path to the asset. Relative to the Engine startup folder.</param>
            <typeparam name="T">Type of the asset to load. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if loaded, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadAsyncInternal(System.String)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            </summary>
            <param name="internalPath">Internal path to the asset. Relative to the Engine startup folder.</param>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.Load(System.Guid,System.Double)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async. The current thread execution is blocked until asset is loaded.
            Waits until asset will be loaded. It's equivalent to LoadAsync + WaitForLoaded.
            </summary>
            <param name="id">Asset unique ID.</param>
            <param name="timeoutInMilliseconds">Custom timeout value in milliseconds.</param>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.Load(System.String,System.Double)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async. The current thread execution is blocked until asset is loaded.
            Waits until asset will be loaded. It's equivalent to LoadAsync + WaitForLoaded.
            </summary>
            <param name="path">Path to the asset.</param>
            <param name="timeoutInMilliseconds">Custom timeout value in milliseconds.</param>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadInternal(System.String,System.Double)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            Waits until asset will be loaded. It's equivalent to LoadAsync + WaitForLoaded.
            </summary>
            <param name="internalPath">Internal path to the asset. Relative to the Engine startup folder.</param>
            <param name="timeoutInMilliseconds">Custom timeout value in milliseconds.</param>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.Load``1(System.Guid,System.Double)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            Waits until asset will be loaded. It's equivalent to LoadAsync + WaitForLoaded.
            </summary>
            <param name="id">Asset unique ID.</param>
            <param name="timeoutInMilliseconds">Custom timeout value in milliseconds.</param>
            <typeparam name="T">Type of the asset to load. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.Load``1(System.String,System.Double)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            Waits until asset will be loaded. It's equivalent to LoadAsync + WaitForLoaded.
            </summary>
            <param name="path">Path to the asset.</param>
            <param name="timeoutInMilliseconds">Custom timeout value in milliseconds.</param>
            <typeparam name="T">Type of the asset to load. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.LoadInternal``1(System.String,System.Double)">
            <summary>
            Loads asset to the Content Pool and holds it until it won't be referenced by any object. Returns null if asset is missing. Actual asset data loading is performed on a other thread in async.
            Waits until asset will be loaded. It's equivalent to LoadAsync + WaitForLoaded.
            </summary>
            <param name="internalPath">Internal path to the asset. Relative to the Engine startup folder and without an asset file extension.</param>
            <param name="timeoutInMilliseconds">Custom timeout value in milliseconds.</param>
            <typeparam name="T">Type of the asset to load. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if loaded, null otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Content.CreateVirtualAsset``1">
            <summary>
            Creates temporary and virtual asset of the given type.
            Virtual assets have limited usage but allow to use custom assets data at runtime.
            Virtual assets are temporary and exist until application exit.
            </summary>
            <typeparam name="T">Type of the asset to create. Includes any asset types derived from the type.</typeparam>
            <returns>Asset instance if created, null otherwise. See log for error message if need to.</returns>
        </member>
        <member name="T:FlaxEngine.JsonAssetBase">
            <summary>
            Base class for all Json-format assets.
            </summary>
            <seealso cref="T:FlaxEngine.Asset" />
        </member>
        <member name="M:FlaxEngine.JsonAssetBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.JsonAssetBase"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.JsonAssetBase.DataTypeName">
            <summary>
            The data type name from the header. Allows to recognize the data type.
            </summary>
        </member>
        <member name="P:FlaxEngine.JsonAssetBase.DataEngineBuild">
            <summary>
            The serialized data engine build number. Can be used to convert/upgrade data between different formats across different engine versions.
            </summary>
        </member>
        <member name="P:FlaxEngine.JsonAssetBase.Data">
            <summary>
            The Json data (as string).
            </summary>
        </member>
        <member name="T:FlaxEngine.JsonAsset">
            <summary>
            Generic type of Json-format asset. It provides the managed representation of this resource data so it can be accessed via C# API.
            </summary>
            <seealso cref="T:FlaxEngine.JsonAssetBase" />
        </member>
        <member name="M:FlaxEngine.JsonAsset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.JsonAsset"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.JsonAsset.CreateInstance``1">
            <summary>
            Creates the serialized object instance from the json asset data.
            </summary>
            <returns>The created object or null.</returns>
        </member>
        <member name="M:FlaxEngine.JsonAsset.CreateInstance">
            <summary>
            Creates the serialized object instance from the json asset data.
            </summary>
            <returns>The created object or null.</returns>
        </member>
        <member name="T:FlaxEngine.GameWindowMode">
            <summary>
            Specifies the display mode of a game window.
            </summary>
        </member>
        <member name="F:FlaxEngine.GameWindowMode.Windowed">
            <summary>
            The window has borders and does not take up the full screen.
            </summary>
        </member>
        <member name="F:FlaxEngine.GameWindowMode.Fullscreen">
            <summary>
            The window takes up the full screen exclusively.
            </summary>
        </member>
        <member name="F:FlaxEngine.GameWindowMode.Borderless">
            <summary>
            The window behaves like in Windowed mode but has no borders.
            </summary>
        </member>
        <member name="F:FlaxEngine.GameWindowMode.FullscreenBorderless">
            <summary>
            Same as in Borderless, but is of the size of the screen.
            </summary>
        </member>
        <member name="T:FlaxEngine.SettingsBase">
            <summary>
            Base class for all global settings containers for the engine. Helps to apply, store and expose properties to engine/game.
            </summary>
        </member>
        <member name="M:FlaxEngine.SettingsBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SettingsBase"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.ISerializable">
            <summary>
            Interface for objects that can be serialized/deserialized to/from JSON format.
            </summary>
        </member>
        <member name="T:FlaxEngine.LogType">
            <summary>
            The log message types.
            </summary>
        </member>
        <member name="F:FlaxEngine.LogType.Info">
            <summary>
            The information log message.
            </summary>
        </member>
        <member name="F:FlaxEngine.LogType.Warning">
            <summary>
            The warning message.
            </summary>
        </member>
        <member name="F:FlaxEngine.LogType.Error">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="F:FlaxEngine.LogType.Fatal">
            <summary>
            The fatal error.
            </summary>
        </member>
        <member name="T:FlaxEngine.BoundingBox">
            <summary>
            Represents an axis-aligned bounding box in three dimensional space.
            </summary>
        </member>
        <member name="F:FlaxEngine.BoundingBox.Minimum">
            <summary>
            The minimum point of the box.
            </summary>
        </member>
        <member name="F:FlaxEngine.BoundingBox.Maximum">
            <summary>
            The maximum point of the box.
            </summary>
        </member>
        <member name="F:FlaxEngine.BoundingBox.Empty">
            <summary>
            A <see cref="T:FlaxEngine.BoundingBox"/> which represents an empty space.
            </summary>
        </member>
        <member name="F:FlaxEngine.BoundingBox.Zero">
            <summary>
            A <see cref="T:FlaxEngine.BoundingBox"/> which is located in point (0, 0, 0) and has size equal (0, 0, 0).
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingBox.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingBox.Center">
            <summary>
            Gets or sets the center point location.
            </summary>
        </member>
        <member name="M:FlaxEngine.BoundingBox.#ctor(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.BoundingBox" /> struct.
            </summary>
            <param name="minimum">The minimum vertex of the bounding box.</param>
            <param name="maximum">The maximum vertex of the bounding box.</param>
        </member>
        <member name="M:FlaxEngine.BoundingBox.GetCorners">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <returns>An array of points representing the eight corners of the bounding box.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.GetCorners(FlaxEngine.Vector3[])">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <returns>An array of points representing the eight corners of the bounding box.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection, or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.Ray@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection, or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.BoundingBox)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Intersects(FlaxEngine.BoundingSphere)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Contains(FlaxEngine.Vector3@)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Contains(FlaxEngine.Vector3)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Contains(FlaxEngine.BoundingBox@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Contains(FlaxEngine.BoundingBox)">
            <summary>
            Determines whether the current objects contains a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Contains(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Contains(FlaxEngine.BoundingSphere)">
            <summary>
            Determines whether the current objects contains a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.FromPoints(FlaxEngine.Vector3[],FlaxEngine.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingBox" /> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="points" /> is <c>null</c>.</exception>
        </member>
        <member name="M:FlaxEngine.BoundingBox.FromPoints(FlaxEngine.Vector3[])">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingBox" /> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <returns>The newly constructed bounding box.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="points" /> is <c>null</c>.</exception>
        </member>
        <member name="M:FlaxEngine.BoundingBox.FromSphere(FlaxEngine.BoundingSphere@,FlaxEngine.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingBox" /> from a given sphere.
            </summary>
            <param name="sphere">The sphere that will designate the extents of the box.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
        </member>
        <member name="M:FlaxEngine.BoundingBox.FromSphere(FlaxEngine.BoundingSphere)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingBox" /> from a given sphere.
            </summary>
            <param name="sphere">The sphere that will designate the extents of the box.</param>
            <returns>The newly constructed bounding box.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Merge(FlaxEngine.BoundingBox@,FlaxEngine.BoundingBox@,FlaxEngine.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingBox" /> that is as large as the total combined area of the two specified boxes.
            </summary>
            <param name="value1">The first box to merge.</param>
            <param name="value2">The second box to merge.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Merge(FlaxEngine.BoundingBox,FlaxEngine.BoundingBox)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingBox" /> that is as large as the total combined area of the two specified boxes.
            </summary>
            <param name="value1">The first box to merge.</param>
            <param name="value2">The second box to merge.</param>
            <returns>The newly constructed bounding box.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Transform(FlaxEngine.BoundingBox,FlaxEngine.Matrix)">
            <summary>
            Transforms bounding box using the given transformation matrix.
            </summary>
            <param name="box">The bounding box to transform.</param>
            <param name="transform">The transformation matrix.</param>
            <returns>The result of the transformation.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Transform(FlaxEngine.BoundingBox@,FlaxEngine.Matrix@,FlaxEngine.BoundingBox@)">
            <summary>
            Transforms bounding box using the given transformation matrix.
            </summary>
            <param name="box">The bounding box to transform.</param>
            <param name="transform">The transformation matrix.</param>
            <param name="result">The result of the transformation.</param>
        </member>
        <member name="M:FlaxEngine.BoundingBox.MakeOffsetted(FlaxEngine.BoundingBox@,FlaxEngine.Vector3@)">
            <summary>
            Creates the bounding box that is offseted by the given vector. Adds the offset value to minimum and maximum points.
            </summary>
            <param name="box">The box.</param>
            <param name="offset">The bounds offset.</param>
            <returns>The offsetted bounds.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.MakeScaled(FlaxEngine.BoundingBox@,System.Single)">
            <summary>
            Creates the bounding box that is scaled by the given factor. Applies scale to the size of the bounds.
            </summary>
            <param name="box">The box.</param>
            <param name="scale">The bounds scale.</param>
            <returns>The scaled bounds.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.op_Multiply(FlaxEngine.BoundingBox,FlaxEngine.Matrix)">
            <summary>
            Transforms bounding box using the given transformation matrix.
            </summary>
            <param name="box">The bounding box to transform.</param>
            <param name="transform">The transformation matrix.</param>
            <returns>The result of the transformation.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.op_Equality(FlaxEngine.BoundingBox,FlaxEngine.BoundingBox)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.op_Inequality(FlaxEngine.BoundingBox,FlaxEngine.BoundingBox)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Equals(FlaxEngine.BoundingBox@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Equals(FlaxEngine.BoundingBox)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:FlaxEngine.BoundingSphere">
            <summary>
            Represents a bounding sphere in three dimensional space.
            </summary>
        </member>
        <member name="F:FlaxEngine.BoundingSphere.Center">
            <summary>
            The center of the sphere in three dimensional space.
            </summary>
        </member>
        <member name="F:FlaxEngine.BoundingSphere.Radius">
            <summary>
            The radius of the sphere.
            </summary>
        </member>
        <member name="F:FlaxEngine.BoundingSphere.Empty">
            <summary>
            A <see cref="T:FlaxEngine.BoundingSphere"/> which represents an empty space.
            </summary>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.#ctor(FlaxEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.BoundingBox" /> struct.
            </summary>
            <param name="center">The center of the sphere in three dimensional space.</param>
            <param name="radius">The radius of the sphere.</param>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection, or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.Ray@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection, or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.BoundingBox)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Intersects(FlaxEngine.BoundingSphere)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Contains(FlaxEngine.Vector3@)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Contains(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether the current objects contains a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Contains(FlaxEngine.BoundingBox@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Contains(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.FromPoints(FlaxEngine.Vector3[],System.Int32,System.Int32,FlaxEngine.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingSphere" /> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <param name="start">The start index from points array to start compute the bounding sphere.</param>
            <param name="count">The count of points to process to compute the bounding sphere.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
            <exception cref="T:System.ArgumentNullException">points</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">start or count</exception>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.FromPoints(FlaxEngine.Vector3[],FlaxEngine.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingSphere" /> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.FromPoints(FlaxEngine.Vector3[])">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingSphere" /> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.FromBox(FlaxEngine.BoundingBox@,FlaxEngine.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingSphere" /> from a given box.
            </summary>
            <param name="box">The box that will designate the extents of the sphere.</param>
            <param name="result">When the method completes, the newly constructed bounding sphere.</param>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.FromBox(FlaxEngine.BoundingBox)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingSphere" /> from a given box.
            </summary>
            <param name="box">The box that will designate the extents of the sphere.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Merge(FlaxEngine.BoundingSphere@,FlaxEngine.BoundingSphere@,FlaxEngine.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingSphere" /> that is the as large as the total combined area of the two specified
            spheres.
            </summary>
            <param name="value1">The first sphere to merge.</param>
            <param name="value2">The second sphere to merge.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Merge(FlaxEngine.BoundingSphere,FlaxEngine.BoundingSphere)">
            <summary>
            Constructs a <see cref="T:FlaxEngine.BoundingSphere" /> that is the as large as the total combined area of the two specified
            spheres.
            </summary>
            <param name="value1">The first sphere to merge.</param>
            <param name="value2">The second sphere to merge.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Transform(FlaxEngine.BoundingSphere,FlaxEngine.Matrix)">
            <summary>
            Transforms the bounding sphere using the specified matrix.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="matrix">The matrix.</param>
            <remarks>The result transformed sphere.</remarks>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Transform(FlaxEngine.BoundingSphere@,FlaxEngine.Matrix@,FlaxEngine.BoundingSphere@)">
            <summary>
            Transforms the bounding sphere using the specified matrix.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result transformed sphere.</param>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.op_Equality(FlaxEngine.BoundingSphere,FlaxEngine.BoundingSphere)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.op_Inequality(FlaxEngine.BoundingSphere,FlaxEngine.BoundingSphere)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Equals(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Equals(FlaxEngine.BoundingSphere)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingSphere.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:FlaxEngine.Color">
            <summary>
            Representation of the RGBA color.
            </summary>
            <summary>
            List of predefined <see cref="T:FlaxEngine.Color"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.R">
            <summary>
            The red channel value.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.G">
            <summary>
            The green channel value.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.B">
            <summary>
            The blue channel value.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.A">
            <summary>
            The alpha channel value.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Color" /> type, in bytes.
            </summary>
        </member>
        <member name="P:FlaxEngine.Color.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the red, green, blue, and alpha components, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the alpha component, 1 for the red component, 2 for the green component, and 3 for the blue component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="P:FlaxEngine.Color.MinColorComponent">
            <summary>
            Returns the minimum color component value: Min(r,g,b).
            </summary>
        </member>
        <member name="P:FlaxEngine.Color.MaxColorComponent">
            <summary>
            Returns the maximum color component value: Max(r,g,b).
            </summary>
        </member>
        <member name="M:FlaxEngine.Color.#ctor(System.Single)">
            <summary>
            Constructs a new Color with given r,g,b,a component.
            </summary>
            <param name="rgba">RGBA component.</param>
        </member>
        <member name="M:FlaxEngine.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Color with given r,g,b,a components (values in range [0;1]).
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
            <param name="a">Alpha component.</param>
        </member>
        <member name="M:FlaxEngine.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new Color with given r,g,b,a components (values in range [0;255]).
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
            <param name="a">Alpha component.</param>
        </member>
        <member name="M:FlaxEngine.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs a new Color with given r,g,b,a components (values in range [0;255]).
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
            <param name="a">Alpha component.</param>
        </member>
        <member name="M:FlaxEngine.Color.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Color with given r,g,b components and sets alpha to 1.
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
        </member>
        <member name="M:FlaxEngine.Color.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Color"/> struct.
            </summary>
            <param name="values">The values to assign to the red, green, blue, and alpha components of the color. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:FlaxEngine.Color.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Color.Equals(FlaxEngine.Color@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Color" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Color" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Color" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Color.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Color.FromRGB(System.UInt32,System.Single)">
            <summary>
            Creates <see cref="T:FlaxEngine.Color"/> from the RGB value and separate alpha channel.
            </summary>
            <param name="rgb">The packed RGB value.</param>
            <param name="a">The alpha channel value.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToHexString">
            <summary>
            Gets the color value as the hexadecimal string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Color.ParseHex(System.String)">
            <summary>
            Creates <see cref="T:FlaxEngine.Color"/> from the hexadecimal string.
            </summary>
            <param name="hexString">The hexadecimal string.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.TryParseHex(System.String,FlaxEngine.Color@)">
            <summary>
            Creates <see cref="T:FlaxEngine.Color"/> from the hexadecimal string.
            </summary>
            <param name="hexString">The hexadecimal string.</param>
            <param name="value">Output value.</param>
            <returns>True if value has been parsed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Color.FromBgra(System.Int32)">
            <summary>
            Converts the color from a packed BGRA integer.
            </summary>
            <param name="color">A packed integer containing all four color components in BGRA order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.FromBgra(System.UInt32)">
            <summary>
            Converts the color from a packed BGRA integer.
            </summary>
            <param name="color">A packed integer containing all four color components in BGRA order</param>
            <returns>A color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToBgra">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToBgra(System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToRgba">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToVector3">
            <summary>
            Converts the color into a three component vector.
            </summary>
            <returns>A three component vector containing the red, green, and blue components of the color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToVector4">
            <summary>
            Converts the color into a four component vector.
            </summary>
            <returns>A four component vector containing all four color components.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToArray">
            <summary>
            Creates an array containing the elements of the color.
            </summary>
            <returns>A four-element array containing the components of the color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToSRgb">
            <summary>
            Converts this color from linear space to sRGB space.
            </summary>
            <returns>A color3 in sRGB space.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToLinear">
            <summary>
            Converts this color from sRGB space to linear space.
            </summary>
            <returns>A Color in linear space.</returns>
        </member>
        <member name="M:FlaxEngine.Color.FromHSV(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates RGB color from Hue[0-360], Saturation[0-1] and Value[0-1].
            </summary>
            <param name="hue">The hue angle in degrees [0-360].</param>
            <param name="saturation">The saturation normalized [0-1].</param>
            <param name="value">The value normalized [0-1].</param>
            <param name="alpha">The alpha value. Default is 1.</param>
            <returns>The RGB color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.FromHSV(FlaxEngine.Vector3,System.Single)">
            <summary>
            Creates RGB color from Hue[0-360], Saturation[0-1] and Value[0-1] packed to XYZ vector.
            </summary>
            <param name="hsv">The HSV color.</param>
            <param name="alpha">The alpha value. Default is 1.</param>
            <returns>The RGB color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.Lerp(FlaxEngine.Color,FlaxEngine.Color,System.Single)">
            <summary>
            Linearly interpolates between colors a and b by t.
            </summary>
            <param name="a">Color a</param>
            <param name="b">Color b</param>
            <param name="t">Float for combining a and b</param>
        </member>
        <member name="M:FlaxEngine.Color.Lerp(FlaxEngine.Color@,FlaxEngine.Color@,System.Single,FlaxEngine.Color@)">
            <summary>
            Linearly interpolates between colors a and b by t.
            </summary>
            <param name="a">Color a</param>
            <param name="b">Color b</param>
            <param name="t">Float for combining a and b</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Color.op_Addition(FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Adds two colors.
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The second color.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Division(FlaxEngine.Color,System.Single)">
            <summary>
            Divides color by the scale factor.
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The division factor.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Equality(FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Compares two colors.
            </summary>
            <param name="lhs">The left.</param>
            <param name="rhs">The right.</param>
            <returns>True if colors are equal, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Inequality(FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Compares two colors.
            </summary>
            <param name="lhs">The left.</param>
            <param name="rhs">The right.</param>
            <returns>True if colors are not equal, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Implicit(FlaxEngine.Color)~FlaxEngine.Vector3">
            <summary>
            Performs an implicit conversion from <see cref="T:FlaxEngine.Color"/> to <see cref="T:FlaxEngine.Vector3"/>.
            </summary>
            <param name="c">The color.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Implicit(FlaxEngine.Color)~FlaxEngine.Vector4">
            <summary>
            Performs an implicit conversion from <see cref="T:FlaxEngine.Color"/> to <see cref="T:FlaxEngine.Vector4"/>.
            </summary>
            <param name="c">The color.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Implicit(FlaxEngine.Vector4)~FlaxEngine.Color">
            <summary>
            Performs an implicit conversion from <see cref="T:FlaxEngine.Vector4"/> to <see cref="T:FlaxEngine.Color"/>.
            </summary>
            <param name="v">The vector.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Implicit(FlaxEngine.Vector3)~FlaxEngine.Color">
            <summary>
            Performs an implicit conversion from <see cref="T:FlaxEngine.Vector3"/> to <see cref="T:FlaxEngine.Color"/>.
            </summary>
            <param name="v">The vector.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Multiply(FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Multiplies color components by the other color components.
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The second color.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Multiply(FlaxEngine.Color,System.Single)">
            <summary>
            Multiplies color components by the scale factor.
            </summary>
            <param name="a">The color.</param>
            <param name="b">The scale.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Multiply(System.Single,FlaxEngine.Color)">
            <summary>
            Multiplies color components by the scale factor.
            </summary>
            <param name="b">The scale.</param>
            <param name="a">The color.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color.op_Subtraction(FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Subtracts one color from the another.
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The second color.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color.RGBMultiplied(System.Single)">
            <summary>
            Returns the color with RGB channels multiplied by the given scale factor. The alpha channel remains the same.
            </summary>
            <param name="multiplier">The multiplier.</param>
            <returns>The modified color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.RGBMultiplied(FlaxEngine.Color)">
            <summary>
            Returns the color with RGB channels multiplied by the given color. The alpha channel remains the same.
            </summary>
            <param name="multiplier">The multiplier.</param>
            <returns>The modified color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.AlphaMultiplied(System.Single)">
            <summary>
            Returns the color with alpha channel multiplied by the given color. The RGB channels remain the same.
            </summary>
            <param name="multiplier">The multiplier.</param>
            <returns>The modified color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToHSV">
            <summary>
            Gets Hue[0-360], Saturation[0-1] and Value[0-1] from RGB color.
            </summary>
            <returns>The HSV color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.RGBToHSV(FlaxEngine.Color,System.Single@,System.Single@,System.Single@)">
            <summary>
            Convert color from the RGB color space to HSV color space.
            </summary>
            <param name="rgbColor">Color of the RGB.</param>
            <param name="h">The output Hue.</param>
            <param name="s">The output Saturation.</param>
            <param name="v">The output Value.</param>
        </member>
        <member name="M:FlaxEngine.Color.AdjustContrast(FlaxEngine.Color@,System.Single,FlaxEngine.Color@)">
            <summary>1
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:FlaxEngine.Color.AdjustContrast(FlaxEngine.Color,System.Single)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.AdjustSaturation(FlaxEngine.Color@,System.Single,FlaxEngine.Color@)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:FlaxEngine.Color.AdjustSaturation(FlaxEngine.Color,System.Single)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:FlaxEngine.Color.PremultiplyAlpha(FlaxEngine.Color)">
            <summary>
            Premultiplies the color components by the alpha value.
            </summary>
            <param name="value">The color to premultiply.</param>
            <returns>A color with premultiplied alpha.</returns>
        </member>
        <member name="M:FlaxEngine.Color.Max(FlaxEngine.Color@,FlaxEngine.Color@,FlaxEngine.Color@)">
            <summary>
            Returns a color containing the largest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">
            When the method completes, contains an new color composed of the largest components of the source colors.
            </param>
        </member>
        <member name="M:FlaxEngine.Color.Max(FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Returns a color containing the largest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the largest components of the source colors.</returns>
        </member>
        <member name="M:FlaxEngine.Color.Min(FlaxEngine.Color@,FlaxEngine.Color@,FlaxEngine.Color@)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">
            When the method completes, contains an new color composed of the smallest components of the source colors.
            </param>
        </member>
        <member name="M:FlaxEngine.Color.Min(FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the smallest components of the source colors.</returns>
        </member>
        <member name="M:FlaxEngine.Color.Clamp(FlaxEngine.Color@,FlaxEngine.Color@,FlaxEngine.Color@,FlaxEngine.Color@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:FlaxEngine.Color.Clamp(FlaxEngine.Color,FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:FlaxEngine.Color.ToString">
            <summary>
            Returns a nicely formatted string of this color.
            </summary>
        </member>
        <member name="M:FlaxEngine.Color.ToString(System.String)">
            <summary>
            Returns a nicely formatted string of this color.
            </summary>
            <param name="format"></param>
        </member>
        <member name="F:FlaxEngine.Color.Zero">
            <summary>
            Zero color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Transparent">
            <summary>
            Transparent color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.AliceBlue">
            <summary>
            AliceBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.AntiqueWhite">
            <summary>
            AntiqueWhite color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Aqua">
            <summary>
            Aqua color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Aquamarine">
            <summary>
            Aquamarine color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Azure">
            <summary>
            Azure color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Beige">
            <summary>
            Beige color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Bisque">
            <summary>
            Bisque color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Black">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.BlanchedAlmond">
            <summary>
            BlanchedAlmond color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Blue">
            <summary>
            Blue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.BlueViolet">
            <summary>
            BlueViolet color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Brown">
            <summary>
            Brown color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.BurlyWood">
            <summary>
            BurlyWood color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.CadetBlue">
            <summary>
            CadetBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Chartreuse">
            <summary>
            Chartreuse color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Chocolate">
            <summary>
            Chocolate color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Coral">
            <summary>
            Coral color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.CornflowerBlue">
            <summary>
            CornflowerBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Cornsilk">
            <summary>
            Cornsilk color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Crimson">
            <summary>
            Crimson color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Cyan">
            <summary>
            Cyan color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkBlue">
            <summary>
            DarkBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkCyan">
            <summary>
            DarkCyan color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkGoldenrod">
            <summary>
            DarkGoldenrod color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkGray">
            <summary>
            DarkGray color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkGreen">
            <summary>
            DarkGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkKhaki">
            <summary>
            DarkKhaki color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkMagenta">
            <summary>
            DarkMagenta color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkOliveGreen">
            <summary>
            DarkOliveGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkOrange">
            <summary>
            DarkOrange color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkOrchid">
            <summary>
            DarkOrchid color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkRed">
            <summary>
            DarkRed color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkSalmon">
            <summary>
            DarkSalmon color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkSeaGreen">
            <summary>
            DarkSeaGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkSlateBlue">
            <summary>
            DarkSlateBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkSlateGray">
            <summary>
            DarkSlateGray color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkTurquoise">
            <summary>
            DarkTurquoise color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DarkViolet">
            <summary>
            DarkViolet color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DeepPink">
            <summary>
            DeepPink color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DeepSkyBlue">
            <summary>
            DeepSkyBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DimGray">
            <summary>
            DimGray color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.DodgerBlue">
            <summary>
            DodgerBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Firebrick">
            <summary>
            Firebrick color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.FloralWhite">
            <summary>
            FloralWhite color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.ForestGreen">
            <summary>
            ForestGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Fuchsia">
            <summary>
            Fuchsia color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Gainsboro">
            <summary>
            Gainsboro color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.GhostWhite">
            <summary>
            GhostWhite color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Gold">
            <summary>
            Gold color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Goldenrod">
            <summary>
            Goldenrod color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Gray">
            <summary>
            Gray color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Green">
            <summary>
            Green color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.GreenYellow">
            <summary>
            GreenYellow color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Honeydew">
            <summary>
            Honeydew color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.HotPink">
            <summary>
            HotPink color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.IndianRed">
            <summary>
            IndianRed color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Indigo">
            <summary>
            Indigo color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Ivory">
            <summary>
            Ivory color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Khaki">
            <summary>
            Khaki color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Lavender">
            <summary>
            Lavender color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LavenderBlush">
            <summary>
            LavenderBlush color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LawnGreen">
            <summary>
            LawnGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LemonChiffon">
            <summary>
            LemonChiffon color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightBlue">
            <summary>
            LightBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightCoral">
            <summary>
            LightCoral color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightCyan">
            <summary>
            LightCyan color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightGoldenrodYellow">
            <summary>
            LightGoldenrodYellow color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightGray">
            <summary>
            LightGray color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightGreen">
            <summary>
            LightGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightPink">
            <summary>
            LightPink color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightSalmon">
            <summary>
            LightSalmon color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightSeaGreen">
            <summary>
            LightSeaGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightSkyBlue">
            <summary>
            LightSkyBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightSlateGray">
            <summary>
            LightSlateGray color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightSteelBlue">
            <summary>
            LightSteelBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LightYellow">
            <summary>
            LightYellow color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Lime">
            <summary>
            Lime color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.LimeGreen">
            <summary>
            LimeGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Linen">
            <summary>
            Linen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Magenta">
            <summary>
            Magenta color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Maroon">
            <summary>
            Maroon color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumAquamarine">
            <summary>
            MediumAquamarine color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumBlue">
            <summary>
            MediumBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumOrchid">
            <summary>
            MediumOrchid color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumPurple">
            <summary>
            MediumPurple color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumSeaGreen">
            <summary>
            MediumSeaGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumSlateBlue">
            <summary>
            MediumSlateBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumSpringGreen">
            <summary>
            MediumSpringGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumTurquoise">
            <summary>
            MediumTurquoise color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MediumVioletRed">
            <summary>
            MediumVioletRed color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MidnightBlue">
            <summary>
            MidnightBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MintCream">
            <summary>
            MintCream color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.MistyRose">
            <summary>
            MistyRose color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Moccasin">
            <summary>
            Moccasin color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.NavajoWhite">
            <summary>
            NavajoWhite color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Navy">
            <summary>
            Navy color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.OldLace">
            <summary>
            OldLace color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Olive">
            <summary>
            Olive color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.OliveDrab">
            <summary>
            OliveDrab color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Orange">
            <summary>
            Orange color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.OrangeRed">
            <summary>
            OrangeRed color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Orchid">
            <summary>
            Orchid color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.PaleGoldenrod">
            <summary>
            PaleGoldenrod color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.PaleGreen">
            <summary>
            PaleGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.PaleTurquoise">
            <summary>
            PaleTurquoise color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.PaleVioletRed">
            <summary>
            PaleVioletRed color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.PapayaWhip">
            <summary>
            PapayaWhip color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.PeachPuff">
            <summary>
            PeachPuff color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Peru">
            <summary>
            Peru color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Pink">
            <summary>
            Pink color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Plum">
            <summary>
            Plum color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.PowderBlue">
            <summary>
            PowderBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Purple">
            <summary>
            Purple color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Red">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.RosyBrown">
            <summary>
            RosyBrown color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.RoyalBlue">
            <summary>
            RoyalBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SaddleBrown">
            <summary>
            SaddleBrown color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Salmon">
            <summary>
            Salmon color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SandyBrown">
            <summary>
            SandyBrown color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SeaGreen">
            <summary>
            SeaGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SeaShell">
            <summary>
            SeaShell color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Sienna">
            <summary>
            Sienna color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Silver">
            <summary>
            Silver color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SkyBlue">
            <summary>
            SkyBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SlateBlue">
            <summary>
            SlateBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SlateGray">
            <summary>
            SlateGray color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Snow">
            <summary>
            Snow color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SpringGreen">
            <summary>
            SpringGreen color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.SteelBlue">
            <summary>
            SteelBlue color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Tan">
            <summary>
            Tan color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Teal">
            <summary>
            Teal color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Thistle">
            <summary>
            Thistle color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Tomato">
            <summary>
            Tomato color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Turquoise">
            <summary>
            Turquoise color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Violet">
            <summary>
            Violet color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Wheat">
            <summary>
            Wheat color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.White">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.WhiteSmoke">
            <summary>
            WhiteSmoke color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.Yellow">
            <summary>
            Yellow color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color.YellowGreen">
            <summary>
            YellowGreen color.
            </summary>
        </member>
        <member name="T:FlaxEngine.Double2">
            <summary>
            Represents a two dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Double2.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Double2.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="T:FlaxEngine.Double3">
            <summary>
            Represents a two dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Double3.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Double3.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Double3.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="T:FlaxEngine.Double4">
            <summary>
            Represents a four dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Double4.X">
            <summary>
            The X component.
            </summary>
        </member>
        <member name="F:FlaxEngine.Double4.Y">
            <summary>
            The Y component.
            </summary>
        </member>
        <member name="F:FlaxEngine.Double4.Z">
            <summary>
            The Z component.
            </summary>
        </member>
        <member name="F:FlaxEngine.Double4.W">
            <summary>
            The W component.
            </summary>
        </member>
        <member name="T:FlaxEngine.Int2">
            <summary>
            Two-components vector (32 bit integer type).
            </summary>
            <summary>
            Represents a two dimensional mathematical vector (signed integers).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.X">
            <summary>
            The X component.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.Y">
            <summary>
            The Y component.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Int2" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Int2" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.UnitX">
            <summary>
            The X unit <see cref="T:FlaxEngine.Int2" /> (1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.UnitY">
            <summary>
            The Y unit <see cref="T:FlaxEngine.Int2" /> (0, 1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.One">
            <summary>
            A <see cref="T:FlaxEngine.Int2" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.Minimum">
            <summary>
            A <see cref="T:FlaxEngine.Int2" /> with all components equal to <see cref="F:System.Int32.MinValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int2.Maximum">
            <summary>
            A <see cref="T:FlaxEngine.Int2" /> with all components equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.Int2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int2" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Int2.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int2" /> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Int2.#ctor(FlaxEngine.Int3)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int2" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
        </member>
        <member name="M:FlaxEngine.Int2.#ctor(FlaxEngine.Int4)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int2" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
        </member>
        <member name="M:FlaxEngine.Int2.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int2" /> struct.
            </summary>
            <param name="values">
            The values to assign to the X and Y components of the vector. This must be an array with two
            elements.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="values" /> contains more or less than two
            elements.
            </exception>
        </member>
        <member name="P:FlaxEngine.Int2.IsZero">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="P:FlaxEngine.Int2.MinValue">
            <summary>
            Gets a minimum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Int2.MaxValue">
            <summary>
            Gets a maximum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Int2.AvgValue">
            <summary>
            Gets an arithmetic average value of all vector components.
            </summary>
        </member>
        <member name="P:FlaxEngine.Int2.ValuesSum">
            <summary>
            Gets a sum of the component values.
            </summary>
        </member>
        <member name="P:FlaxEngine.Int2.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X or Y component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component and 1 for the Y component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is out of the range [0, 1].
            </exception>
        </member>
        <member name="P:FlaxEngine.Int2.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="P:FlaxEngine.Int2.LengthSquared" /> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Int2.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="P:FlaxEngine.Int2.Length" /> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int2.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A two-element array containing the components of the vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Add(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Add(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Add(FlaxEngine.Int2@,System.Int32@,FlaxEngine.Int2@)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <param name="result">The vector with added scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Add(FlaxEngine.Int2,System.Int32)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Subtract(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Subtract(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Subtract(FlaxEngine.Int2@,System.Int32@,FlaxEngine.Int2@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Subtract(FlaxEngine.Int2,System.Int32)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Subtract(System.Int32@,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Subtract(System.Int32,FlaxEngine.Int2)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Multiply(FlaxEngine.Int2@,System.Int32,FlaxEngine.Int2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Multiply(FlaxEngine.Int2,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Multiply(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Multiply(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Divide(FlaxEngine.Int2@,System.Int32,FlaxEngine.Int2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Divide(FlaxEngine.Int2,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Divide(System.Int32,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Divide(System.Int32,FlaxEngine.Int2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Negate(FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Negate(FlaxEngine.Int2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Clamp(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Clamp(FlaxEngine.Int2,FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Distance(FlaxEngine.Int2@,FlaxEngine.Int2@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:FlaxEngine.Int2.DistanceSquared(FlaxEngine.Int2@,FlaxEngine.Int2@,System.Int32@)" /> may be preferred when only the relative
            distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int2.Distance(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:FlaxEngine.Int2.DistanceSquared(FlaxEngine.Int2,FlaxEngine.Int2)" /> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int2.DistanceSquared(FlaxEngine.Int2@,FlaxEngine.Int2@,System.Int32@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int2.DistanceSquared(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int2.Dot(FlaxEngine.Int2@,FlaxEngine.Int2@,System.Int32@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Int2.Dot(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Max(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the largest components of the source
            vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Int2.Max(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Min(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the smallest components of the
            source vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Int2.Min(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.Abs(FlaxEngine.Int2)">
            <summary>
            Returns the absolute value of a vector.
            </summary>
            <param name="v">The value.</param>
            <returns> A vector which components are less or equal to 0.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Addition(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Multiply(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication equivalent to
            <see cref="M:FlaxEngine.Int2.Multiply(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.Int2@)" />.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplication of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_UnaryPlus(FlaxEngine.Int2)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchanged).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Subtraction(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_UnaryNegation(FlaxEngine.Int2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Multiply(System.Int32,FlaxEngine.Int2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Multiply(FlaxEngine.Int2,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Division(FlaxEngine.Int2,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Division(System.Int32,FlaxEngine.Int2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Division(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Modulus(FlaxEngine.Int2,System.Single)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Modulus(System.Single,FlaxEngine.Int2)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The amount by which to scale the vector.</param>
            <param name="scale">The vector to scale.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Modulus(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Addition(FlaxEngine.Int2,System.Int32)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Addition(System.Int32,FlaxEngine.Int2)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Subtraction(FlaxEngine.Int2,System.Int32)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Subtraction(System.Int32,FlaxEngine.Int2)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Equality(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Inequality(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Explicit(FlaxEngine.Int2)~FlaxEngine.Int3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int2" /> to <see cref="T:FlaxEngine.Int3" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Explicit(FlaxEngine.Int2)~FlaxEngine.Int4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int2" /> to <see cref="T:FlaxEngine.Int4" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Explicit(FlaxEngine.Int2)~FlaxEngine.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int2" /> to <see cref="T:FlaxEngine.Vector2" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Explicit(FlaxEngine.Int2)~FlaxEngine.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int2" /> to <see cref="T:FlaxEngine.Vector3" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.op_Explicit(FlaxEngine.Int2)~FlaxEngine.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int2" /> to <see cref="T:FlaxEngine.Vector4" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int2.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.Equals(FlaxEngine.Int2@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Int2" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Int2" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Int2" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.Equals(FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Int2"/> are equal.
            </summary>
        </member>
        <member name="M:FlaxEngine.Int2.Equals(FlaxEngine.Int2)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Int2" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Int2" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Int2" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Int3">
            <summary>
            Three-components vector (32 bit integer type).
            </summary>
            <summary>
            Represents a three dimensional mathematical vector (signed integers).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.X">
            <summary>
            The X component.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.Y">
            <summary>
            The Y component.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.Z">
            <summary>
            The Z component.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Int3" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Int3" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.UnitX">
            <summary>
            The X unit <see cref="T:FlaxEngine.Int3" /> (1, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.UnitY">
            <summary>
            The Y unit <see cref="T:FlaxEngine.Int3" /> (0, 1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.UnitZ">
            <summary>
            The Z unit <see cref="T:FlaxEngine.Int3" /> (0, 0, 1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.One">
            <summary>
            A <see cref="T:FlaxEngine.Int3" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.Minimum">
            <summary>
            A <see cref="T:FlaxEngine.Int3" /> with all components equal to <see cref="F:System.Int32.MinValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int3.Maximum">
            <summary>
            A <see cref="T:FlaxEngine.Int3" /> with all components equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.Int3.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int3" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Int3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int3" /> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Int3.#ctor(FlaxEngine.Int2,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int3" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Int3.#ctor(FlaxEngine.Int4)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int3" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y and Z components.</param>
        </member>
        <member name="M:FlaxEngine.Int3.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int3" /> struct.
            </summary>
            <param name="values">
            The values to assign to the X, Y, and Z components of the vector. This must be an array with three
            elements.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="values" /> contains more or less than three elements.
            </exception>
        </member>
        <member name="P:FlaxEngine.Int3.IsZero">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="P:FlaxEngine.Int3.MinValue">
            <summary>
            Gets a minimum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Int3.MaxValue">
            <summary>
            Gets a maximum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Int3.AvgValue">
            <summary>
            Gets an arithmetic average value of all vector components.
            </summary>
        </member>
        <member name="P:FlaxEngine.Int3.ValuesSum">
            <summary>
            Gets a sum of the component values.
            </summary>
        </member>
        <member name="P:FlaxEngine.Int3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, or Z component, depending on the index.</value>
            <param name="index">
            The index of the component to access. Use 0 for the X component, 1 for the Y component, and 2 for
            the Z component.
            </param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is out of the range [0, 2].
            </exception>
        </member>
        <member name="P:FlaxEngine.Int3.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="P:FlaxEngine.Int3.LengthSquared" /> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Int3.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="P:FlaxEngine.Int3.Length" /> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int3.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A three-element array containing the components of the vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Add(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Add(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Add(FlaxEngine.Int3@,System.Int32@,FlaxEngine.Int3@)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <param name="result">The vector with added scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Add(FlaxEngine.Int3,System.Int32)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Subtract(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Subtract(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Subtract(FlaxEngine.Int3@,System.Int32@,FlaxEngine.Int3@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Subtract(FlaxEngine.Int3,System.Int32)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Subtract(System.Int32@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Subtract(System.Int32,FlaxEngine.Int3)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Multiply(FlaxEngine.Int3@,System.Int32,FlaxEngine.Int3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Multiply(FlaxEngine.Int3,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Multiply(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Multiply a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Multiply(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Multiply a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to Multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Divide(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Divides a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector (per component).</param>
            <param name="result">When the method completes, contains the divided vector.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Divide(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Divides a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector (per component).</param>
            <returns>The divided vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Divide(FlaxEngine.Int3@,System.Int32,FlaxEngine.Int3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Divide(FlaxEngine.Int3,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Divide(System.Int32,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Divide(System.Int32,FlaxEngine.Int3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Negate(FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Negate(FlaxEngine.Int3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Clamp(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Clamp(FlaxEngine.Int3,FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Distance(FlaxEngine.Int3@,FlaxEngine.Int3@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:FlaxEngine.Int3.DistanceSquared(FlaxEngine.Int3@,FlaxEngine.Int3@,System.Int32@)" /> may be preferred when only the relative
            distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int3.Distance(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:FlaxEngine.Int3.DistanceSquared(FlaxEngine.Int3,FlaxEngine.Int3)" /> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int3.DistanceSquared(FlaxEngine.Int3@,FlaxEngine.Int3@,System.Int32@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int3.DistanceSquared(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Int3.Distance2D(FlaxEngine.Int2@,FlaxEngine.Int2@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors in the XZ plane.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Distance2D(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Calculates the distance between two vectors in the XZ plane (ignoring Y).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors in the XZ plane.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Distance2DSquared(FlaxEngine.Int2@,FlaxEngine.Int2@,System.Int32@)">
            <summary>
            Calculates the squared distance between two vectors in the XZ plane (ignoring Y).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors in the XZ plane.</param>
        </member>
        <member name="M:FlaxEngine.Int3.Distance2DSquared(FlaxEngine.Int2,FlaxEngine.Int2)">
            <summary>
            Calculates the squared distance between two vectors in the XZ plane (ignoring Y).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors in the XZ plane.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Max(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the largest components of the source
            vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Int3.Max(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Min(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the smallest components of the
            source vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Int3.Min(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.Abs(FlaxEngine.Int3)">
            <summary>
            Returns the absolute value of a vector.
            </summary>
            <param name="v">The value.</param>
            <returns> A vector which components are less or equal to 0.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Addition(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Multiply(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication equivalent to
            <see cref="M:FlaxEngine.Int3.Multiply(FlaxEngine.Int3@,FlaxEngine.Int3@,FlaxEngine.Int3@)" />.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplication of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_UnaryPlus(FlaxEngine.Int3)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchanged).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Subtraction(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_UnaryNegation(FlaxEngine.Int3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Multiply(System.Int32,FlaxEngine.Int3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Multiply(FlaxEngine.Int3,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Division(FlaxEngine.Int3,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Division(System.Int32,FlaxEngine.Int3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Division(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Modulus(FlaxEngine.Int3,System.Single)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Modulus(System.Single,FlaxEngine.Int3)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The amount by which to scale the vector.</param>
            <param name="scale">The vector to scale.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Modulus(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Addition(FlaxEngine.Int3,System.Int32)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Addition(System.Int32,FlaxEngine.Int3)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Subtraction(FlaxEngine.Int3,System.Int32)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with added scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Subtraction(System.Int32,FlaxEngine.Int3)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Equality(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Inequality(FlaxEngine.Int3,FlaxEngine.Int3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Explicit(FlaxEngine.Int3)~FlaxEngine.Int2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int3" /> to <see cref="T:FlaxEngine.Int2" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Explicit(FlaxEngine.Int3)~FlaxEngine.Int4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int3" /> to <see cref="T:FlaxEngine.Int4" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Explicit(FlaxEngine.Int3)~FlaxEngine.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int3" /> to <see cref="T:FlaxEngine.Vector2" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Explicit(FlaxEngine.Int3)~FlaxEngine.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int3" /> to <see cref="T:FlaxEngine.Vector3" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.op_Explicit(FlaxEngine.Int3)~FlaxEngine.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int3" /> to <see cref="T:FlaxEngine.Vector4" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int3.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.Equals(FlaxEngine.Int3@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Int3" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Int3" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Int3" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.Equals(FlaxEngine.Int3)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Int3" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Int3" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Int3" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Int4">
            <summary>
            Four-components vector (32 bit integer type).
            </summary>
            <summary>
            Represents a four dimensional mathematical vector (signed integers).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.X">
            <summary>
            The X component.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.Y">
            <summary>
            The Y component.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.Z">
            <summary>
            The Z component.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.W">
            <summary>
            The W component.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Int4" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Int4" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.UnitX">
            <summary>
            The X unit <see cref="T:FlaxEngine.Int4" /> (1, 0, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.UnitY">
            <summary>
            The Y unit <see cref="T:FlaxEngine.Int4" /> (0, 1, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.UnitZ">
            <summary>
            The Z unit <see cref="T:FlaxEngine.Int4" /> (0, 0, 1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.UnitW">
            <summary>
            The W unit <see cref="T:FlaxEngine.Int4" /> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.One">
            <summary>
            A <see cref="T:FlaxEngine.Int4" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.Minimum">
            <summary>
            A <see cref="T:FlaxEngine.Int4" /> with all components equal to <see cref="F:System.Int32.MinValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Int4.Maximum">
            <summary>
            A <see cref="T:FlaxEngine.Int4" /> with all components equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.Int4.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int4" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Int4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int4" /> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Int4.#ctor(FlaxEngine.Int3,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int4" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Int4.#ctor(FlaxEngine.Int2,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int4" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Int4.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Int4" /> struct.
            </summary>
            <param name="values">
            The values to assign to the X, Y, Z, and W components of the vector. This must be an array with four elements.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="values" /> contains more or less than four elements.
            </exception>
        </member>
        <member name="P:FlaxEngine.Int4.IsZero">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="P:FlaxEngine.Int4.IsOne">
            <summary>
            Gets a value indicting whether this vector is one
            </summary>
        </member>
        <member name="P:FlaxEngine.Int4.MinValue">
            <summary>
            Gets a minimum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Int4.MaxValue">
            <summary>
            Gets a maximum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Int4.ValuesSum">
            <summary>
            Gets a sum of the component values.
            </summary>
        </member>
        <member name="P:FlaxEngine.Int4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">
            The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z
            component, and 3 for the W component.
            </param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is out of the range [0,
            3].
            </exception>
        </member>
        <member name="M:FlaxEngine.Int4.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A four-element array containing the components of the vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Add(FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Add(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Add(FlaxEngine.Int4@,System.Int32@,FlaxEngine.Int4@)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <param name="result">The vector with added scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Add(FlaxEngine.Int4,System.Int32)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Subtract(FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Subtract(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Subtract(FlaxEngine.Int4@,System.Int32@,FlaxEngine.Int4@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Subtract(FlaxEngine.Int4,System.Int32)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Subtract(System.Int32@,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Subtract(System.Int32,FlaxEngine.Int4)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Multiply(FlaxEngine.Int4@,System.Int32,FlaxEngine.Int4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Multiply(FlaxEngine.Int4,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Multiply(FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Multiply(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Divide(FlaxEngine.Int4@,System.Int32,FlaxEngine.Int4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Divide(FlaxEngine.Int4,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Divide(System.Int32,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Divide(System.Int32,FlaxEngine.Int4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Negate(FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Negate(FlaxEngine.Int4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Clamp(FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:FlaxEngine.Int4.Clamp(FlaxEngine.Int4,FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Max(FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the largest components of the source
            vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Int4.Max(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Min(FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">
            When the method completes, contains an new vector composed of the smallest components of the
            source vectors.
            </param>
        </member>
        <member name="M:FlaxEngine.Int4.Min(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.Abs(FlaxEngine.Int4)">
            <summary>
            Returns the absolute value of a vector.
            </summary>
            <param name="v">The value.</param>
            <returns> A vector which components are less or equal to 0.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Addition(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Multiply(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication equivalent to
            <see cref="M:FlaxEngine.Int4.Multiply(FlaxEngine.Int4@,FlaxEngine.Int4@,FlaxEngine.Int4@)" />.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplication of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_UnaryPlus(FlaxEngine.Int4)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchanged).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Subtraction(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_UnaryNegation(FlaxEngine.Int4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Multiply(System.Int32,FlaxEngine.Int4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Multiply(FlaxEngine.Int4,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Division(FlaxEngine.Int4,System.Int32)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Division(System.Int32,FlaxEngine.Int4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Division(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Modulus(FlaxEngine.Int4,System.Single)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Modulus(System.Single,FlaxEngine.Int4)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The amount by which to scale the vector.</param>
            <param name="scale">The vector to scale.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Modulus(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Addition(FlaxEngine.Int4,System.Int32)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Addition(System.Int32,FlaxEngine.Int4)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Subtraction(FlaxEngine.Int4,System.Int32)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Subtraction(System.Int32,FlaxEngine.Int4)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Equality(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Inequality(FlaxEngine.Int4,FlaxEngine.Int4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Explicit(FlaxEngine.Int4)~FlaxEngine.Int2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int4" /> to <see cref="T:FlaxEngine.Int2" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Explicit(FlaxEngine.Int4)~FlaxEngine.Int3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int4" /> to <see cref="T:FlaxEngine.Int3" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Explicit(FlaxEngine.Int4)~FlaxEngine.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int4" /> to <see cref="T:FlaxEngine.Vector2" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Explicit(FlaxEngine.Int4)~FlaxEngine.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int4" /> to <see cref="T:FlaxEngine.Vector3" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.op_Explicit(FlaxEngine.Int4)~FlaxEngine.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Int4" /> to <see cref="T:FlaxEngine.Vector4" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Int4.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.Equals(FlaxEngine.Int4@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Int4" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Int4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Int4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.Equals(FlaxEngine.Int4)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Int4" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Int4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Int4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Int4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Matrix">
            <summary>
            Represents a 4x4 mathematical matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Matrix" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Matrix" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.Identity">
            <summary>
            The identity <see cref="T:FlaxEngine.Matrix" />.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M11">
            <summary>
            Value at row 1 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M12">
            <summary>
            Value at row 1 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M13">
            <summary>
            Value at row 1 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M14">
            <summary>
            Value at row 1 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M21">
            <summary>
            Value at row 2 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M22">
            <summary>
            Value at row 2 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M23">
            <summary>
            Value at row 2 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M24">
            <summary>
            Value at row 2 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M31">
            <summary>
            Value at row 3 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M32">
            <summary>
            Value at row 3 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M33">
            <summary>
            Value at row 3 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M34">
            <summary>
            Value at row 3 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M41">
            <summary>
            Value at row 4 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M42">
            <summary>
            Value at row 4 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M43">
            <summary>
            Value at row 4 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix.M44">
            <summary>
            Value at row 4 column 4 of the matrix.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Up">
            <summary>
            Gets or sets the up <see cref="T:FlaxEngine.Vector3" /> of the matrix; that is M21, M22, and M23.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Down">
            <summary>
            Gets or sets the down <see cref="T:FlaxEngine.Vector3" /> of the matrix; that is -M21, -M22, and -M23.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Right">
            <summary>
            Gets or sets the right <see cref="T:FlaxEngine.Vector3" /> of the matrix; that is M11, M12, and M13.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Left">
            <summary>
            Gets or sets the left <see cref="T:FlaxEngine.Vector3" /> of the matrix; that is -M11, -M12, and -M13.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Forward">
            <summary>
            Gets or sets the forward <see cref="T:FlaxEngine.Vector3" /> of the matrix; that is -M31, -M32, and -M33.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Backward">
            <summary>
            Gets or sets the backward <see cref="T:FlaxEngine.Vector3" /> of the matrix; that is M31, M32, and M33.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix" /> struct.
            </summary>
            <param name="m11">The value to assign at row 1 column 1 of the matrix.</param>
            <param name="m12">The value to assign at row 1 column 2 of the matrix.</param>
            <param name="m13">The value to assign at row 1 column 3 of the matrix.</param>
            <param name="m14">The value to assign at row 1 column 4 of the matrix.</param>
            <param name="m21">The value to assign at row 2 column 1 of the matrix.</param>
            <param name="m22">The value to assign at row 2 column 2 of the matrix.</param>
            <param name="m23">The value to assign at row 2 column 3 of the matrix.</param>
            <param name="m24">The value to assign at row 2 column 4 of the matrix.</param>
            <param name="m31">The value to assign at row 3 column 1 of the matrix.</param>
            <param name="m32">The value to assign at row 3 column 2 of the matrix.</param>
            <param name="m33">The value to assign at row 3 column 3 of the matrix.</param>
            <param name="m34">The value to assign at row 3 column 4 of the matrix.</param>
            <param name="m41">The value to assign at row 4 column 1 of the matrix.</param>
            <param name="m42">The value to assign at row 4 column 2 of the matrix.</param>
            <param name="m43">The value to assign at row 4 column 3 of the matrix.</param>
            <param name="m44">The value to assign at row 4 column 4 of the matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix" /> struct.
            </summary>
            <param name="values">The values to assign to the components of the matrix. This must be an array with sixteen elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="values" /> contains more or less than sixteen
            elements.
            </exception>
        </member>
        <member name="P:FlaxEngine.Matrix.Row1">
            <summary>
            Gets or sets the first row in the matrix; that is M11, M12, M13, and M14.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Row2">
            <summary>
            Gets or sets the second row in the matrix; that is M21, M22, M23, and M24.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Row3">
            <summary>
            Gets or sets the third row in the matrix; that is M31, M32, M33, and M34.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Row4">
            <summary>
            Gets or sets the fourth row in the matrix; that is M41, M42, M43, and M44.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Column1">
            <summary>
            Gets or sets the first column in the matrix; that is M11, M21, M31, and M41.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Column2">
            <summary>
            Gets or sets the second column in the matrix; that is M12, M22, M32, and M42.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Column3">
            <summary>
            Gets or sets the third column in the matrix; that is M13, M23, M33, and M43.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Column4">
            <summary>
            Gets or sets the fourth column in the matrix; that is M14, M24, M34, and M44.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.TranslationVector">
            <summary>
            Gets or sets the translation of the matrix; that is M41, M42, and M43.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.ScaleVector">
            <summary>
            Gets or sets the scale of the matrix; that is M11, M22, and M33.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity matrix.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index" /> is out of the range [0, 15].</exception>
        </member>
        <member name="P:FlaxEngine.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="row">The row of the matrix to access.</param>
            <param name="column">The column of the matrix to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row" /> or <paramref name="column" />is out of the range [0, 3].</exception>
        </member>
        <member name="M:FlaxEngine.Matrix.Determinant">
            <summary>
            Calculates the determinant of the matrix.
            </summary>
            <returns>The determinant of the matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Invert">
            <summary>
            Inverts the matrix.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix.Transpose">
            <summary>
            Transposes the matrix.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix.Orthogonalize">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <remarks>
            <para>
              Orthogonalization is the process of making all rows orthogonal to each other. This
              means that any given row in the matrix will be orthogonal to any other given row in the
              matrix.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting matrix
              tends to be numerically unstable. The numeric stability decreases according to the rows
              so that the first row is the most stable and the last row is the least stable.
            </para>
            <para>
              This operation is performed on the rows of the matrix rather than the columns.
              If you wish for this operation to be performed on the columns, first transpose the
              input and than transpose the output.
            </para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.Orthonormalize">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <remarks>
            <para>
              Orthonormalization is the process of making all rows and columns orthogonal to each
              other and making all rows and columns of unit length. This means that any given row will
              be orthogonal to any other given row and any given column will be orthogonal to any other
              given column. Any given row will not be orthogonal to any given column. Every row and every
              column will be of unit length.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting matrix
              tends to be numerically unstable. The numeric stability decreases according to the rows
              so that the first row is the most stable and the last row is the least stable.
            </para>
            <para>
              This operation is performed on the rows of the matrix rather than the columns.
              If you wish for this operation to be performed on the columns, first transpose the
              input and than transpose the output.
            </para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.DecomposeQR(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Decomposes a matrix into an orthonormalized matrix Q and a right triangular matrix R.
            </summary>
            <param name="Q">When the method completes, contains the orthonormalized matrix of the decomposition.</param>
            <param name="R">When the method completes, contains the right triangular matrix of the decomposition.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.DecomposeLQ(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Decomposes a matrix into a lower triangular matrix L and an orthonormalized matrix Q.
            </summary>
            <param name="L">When the method completes, contains the lower triangular matrix of the decomposition.</param>
            <param name="Q">When the method completes, contains the orthonormalized matrix of the decomposition.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Decompose(FlaxEngine.Transform@)">
            <summary>
            Decomposes a matrix into a scale, rotation, and translation.
            </summary>
            <param name="transform">When the method completes, contains the transformation of the decomposed matrix.</param>
            <remarks>This method is designed to decompose an SRT transformation matrix only.</remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.Decompose(FlaxEngine.Vector3@,FlaxEngine.Matrix@,FlaxEngine.Vector3@)">
            <summary>
            Decomposes a matrix into a scale, rotation, and translation.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rotation component of the decomposed matrix.</param>
            <param name="translation">When the method completes, contains the translation component of the decomposed matrix.</param>
            <remarks>This method is designed to decompose an SRT transformation matrix only.</remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.Decompose(FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@)">
            <summary>
            Decomposes a matrix into a scale, rotation, and translation.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rotation component of the decomposed matrix.</param>
            <param name="translation">When the method completes, contains the translation component of the decomposed matrix.</param>
            <remarks>This method is designed to decompose an SRT transformation matrix only.</remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.DecomposeUniformScale(System.Single@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@)">
            <summary>
            Decomposes a uniform scale matrix into a scale, rotation, and translation.
            A uniform scale matrix has the same scale in every axis.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rotation component of the decomposed matrix.</param>
            <param name="translation">When the method completes, contains the translation component of the decomposed matrix.</param>
            <remarks>This method is designed to decompose an SRT transformation matrix only.</remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.ExchangeRows(System.Int32,System.Int32)">
            <summary>
            Exchanges two rows in the matrix.
            </summary>
            <param name="firstRow">The first row to exchange. This is an index of the row starting at zero.</param>
            <param name="secondRow">The second row to exchange. This is an index of the row starting at zero.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.ExchangeColumns(System.Int32,System.Int32)">
            <summary>
            Exchanges two columns in the matrix.
            </summary>
            <param name="firstColumn">The first column to exchange. This is an index of the column starting at zero.</param>
            <param name="secondColumn">The second column to exchange. This is an index of the column starting at zero.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.ToArray">
            <summary>
            Creates an array containing the elements of the matrix.
            </summary>
            <returns>A sixteen-element array containing the components of the matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Add(FlaxEngine.Matrix@,FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <param name="result">When the method completes, contains the sum of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Add(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Subtract(FlaxEngine.Matrix@,FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <param name="result">When the method completes, contains the difference between the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Subtract(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Multiply(FlaxEngine.Matrix@,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Multiply(FlaxEngine.Matrix,System.Single)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Multiply(FlaxEngine.Matrix@,FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <param name="result">The product of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Multiply(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Divide(FlaxEngine.Matrix@,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Divide(FlaxEngine.Matrix,System.Single)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Divide(FlaxEngine.Matrix@,FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <param name="result">When the method completes, contains the quotient of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Divide(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Exponent(FlaxEngine.Matrix@,System.Int32,FlaxEngine.Matrix@)">
            <summary>
            Performs the exponential operation on a matrix.
            </summary>
            <param name="value">The matrix to perform the operation on.</param>
            <param name="exponent">The exponent to raise the matrix to.</param>
            <param name="result">When the method completes, contains the exponential matrix.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent" /> is negative.</exception>
        </member>
        <member name="M:FlaxEngine.Matrix.Exponent(FlaxEngine.Matrix,System.Int32)">
            <summary>
            Performs the exponential operation on a matrix.
            </summary>
            <param name="value">The matrix to perform the operation on.</param>
            <param name="exponent">The exponent to raise the matrix to.</param>
            <returns>The exponential matrix.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent" /> is negative.</exception>
        </member>
        <member name="M:FlaxEngine.Matrix.Negate(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to be negated.</param>
            <param name="result">When the method completes, contains the negated matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Negate(FlaxEngine.Matrix)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to be negated.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Lerp(FlaxEngine.Matrix@,FlaxEngine.Matrix@,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Performs a linear interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two matrices.</param>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.Lerp(FlaxEngine.Matrix,FlaxEngine.Matrix,System.Single)">
            <summary>
            Performs a linear interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two matrices.</returns>
            <remarks>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.SmoothStep(FlaxEngine.Matrix@,FlaxEngine.Matrix@,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.SmoothStep(FlaxEngine.Matrix,FlaxEngine.Matrix,System.Single)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The cubic interpolation of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Transpose(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Calculates the transpose of the specified matrix.
            </summary>
            <param name="value">The matrix whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.TransposeByRef(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Calculates the transpose of the specified matrix.
            </summary>
            <param name="value">The matrix whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Transpose(FlaxEngine.Matrix)">
            <summary>
            Calculates the transpose of the specified matrix.
            </summary>
            <param name="value">The matrix whose transpose is to be calculated.</param>
            <returns>The transpose of the specified matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Invert(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Calculates the inverse of the specified matrix.
            </summary>
            <param name="value">The matrix whose inverse is to be calculated.</param>
            <param name="result">When the method completes, contains the inverse of the specified matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Invert(FlaxEngine.Matrix)">
            <summary>
            Calculates the inverse of the specified matrix.
            </summary>
            <param name="value">The matrix whose inverse is to be calculated.</param>
            <returns>The inverse of the specified matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Orthogonalize(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthogonalize.</param>
            <param name="result">When the method completes, contains the orthogonalized matrix.</param>
            <remarks>
            <para>
              Orthogonalization is the process of making all rows orthogonal to each other. This
              means that any given row in the matrix will be orthogonal to any other given row in the
              matrix.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting matrix
              tends to be numerically unstable. The numeric stability decreases according to the rows
              so that the first row is the most stable and the last row is the least stable.
            </para>
            <para>
              This operation is performed on the rows of the matrix rather than the columns.
              If you wish for this operation to be performed on the columns, first transpose the
              input and than transpose the output.
            </para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.Orthogonalize(FlaxEngine.Matrix)">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthogonalize.</param>
            <returns>The orthogonalized matrix.</returns>
            <remarks>
            <para>
              Orthogonalization is the process of making all rows orthogonal to each other. This
              means that any given row in the matrix will be orthogonal to any other given row in the
              matrix.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting matrix
              tends to be numerically unstable. The numeric stability decreases according to the rows
              so that the first row is the most stable and the last row is the least stable.
            </para>
            <para>
              This operation is performed on the rows of the matrix rather than the columns.
              If you wish for this operation to be performed on the columns, first transpose the
              input and than transpose the output.
            </para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.Orthonormalize(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthonormalize.</param>
            <param name="result">When the method completes, contains the orthonormalized matrix.</param>
            <remarks>
            <para>
              Orthonormalization is the process of making all rows and columns orthogonal to each
              other and making all rows and columns of unit length. This means that any given row will
              be orthogonal to any other given row and any given column will be orthogonal to any other
              given column. Any given row will not be orthogonal to any given column. Every row and every
              column will be of unit length.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting matrix
              tends to be numerically unstable. The numeric stability decreases according to the rows
              so that the first row is the most stable and the last row is the least stable.
            </para>
            <para>
              This operation is performed on the rows of the matrix rather than the columns.
              If you wish for this operation to be performed on the columns, first transpose the
              input and than transpose the output.
            </para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.Orthonormalize(FlaxEngine.Matrix)">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthonormalize.</param>
            <returns>The orthonormalized matrix.</returns>
            <remarks>
            <para>
              Orthonormalization is the process of making all rows and columns orthogonal to each
              other and making all rows and columns of unit length. This means that any given row will
              be orthogonal to any other given row and any given column will be orthogonal to any other
              given column. Any given row will not be orthogonal to any given column. Every row and every
              column will be of unit length.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting matrix
              tends to be numerically unstable. The numeric stability decreases according to the rows
              so that the first row is the most stable and the last row is the least stable.
            </para>
            <para>
              This operation is performed on the rows of the matrix rather than the columns.
              If you wish for this operation to be performed on the columns, first transpose the
              input and than transpose the output.
            </para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.UpperTriangularForm(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Brings the matrix into upper triangular form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into upper triangular form.</param>
            <param name="result">When the method completes, contains the upper triangular matrix.</param>
            <remarks>
            If the matrix is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.UpperTriangularForm(FlaxEngine.Matrix)">
            <summary>
            Brings the matrix into upper triangular form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into upper triangular form.</param>
            <returns>The upper triangular matrix.</returns>
            <remarks>
            If the matrix is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.LowerTriangularForm(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Brings the matrix into lower triangular form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into lower triangular form.</param>
            <param name="result">When the method completes, contains the lower triangular matrix.</param>
            <remarks>
            If the matrix is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.LowerTriangularForm(FlaxEngine.Matrix)">
            <summary>
            Brings the matrix into lower triangular form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into lower triangular form.</param>
            <returns>The lower triangular matrix.</returns>
            <remarks>
            If the matrix is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.RowEchelonForm(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Brings the matrix into row echelon form using elementary row operations;
            </summary>
            <param name="value">The matrix to put into row echelon form.</param>
            <param name="result">When the method completes, contains the row echelon form of the matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.RowEchelonForm(FlaxEngine.Matrix)">
            <summary>
            Brings the matrix into row echelon form using elementary row operations;
            </summary>
            <param name="value">The matrix to put into row echelon form.</param>
            <returns>When the method completes, contains the row echelon form of the matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.ReducedRowEchelonForm(FlaxEngine.Matrix@,FlaxEngine.Vector4@,FlaxEngine.Matrix@,FlaxEngine.Vector4@)">
            <summary>
            Brings the matrix into reduced row echelon form using elementary row operations.
            </summary>
            <param name="value">The matrix to put into reduced row echelon form.</param>
            <param name="augment">The fifth column of the matrix.</param>
            <param name="result">When the method completes, contains the resultant matrix after the operation.</param>
            <param name="augmentResult">When the method completes, contains the resultant fifth column of the matrix.</param>
            <remarks>
            <para>
              The fifth column is often called the augmented part of the matrix. This is because the fifth
              column is really just an extension of the matrix so that there is a place to put all of the
              non-zero components after the operation is complete.
            </para>
            <para>
              Often times the resultant matrix will the identity matrix or a matrix similar to the identity
              matrix. Sometimes, however, that is not possible and numbers other than zero and one may appear.
            </para>
            <para>
              This method can be used to solve systems of linear equations. Upon completion of this method,
              the <paramref name="augmentResult" /> will contain the solution for the system. It is up to the user
              to analyze both the input and the result to determine if a solution really exists.
            </para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix.Billboard(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Billboard(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.LookAt(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a left-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.LookAt(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a left-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Ortho(System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a left-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Ortho(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.OrthoOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a left-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.OrthoOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Perspective(System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a left-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Perspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.PerspectiveFov(System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a left-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.PerspectiveFov(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.PerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a left-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.PerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Scaling(FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Scaling(FlaxEngine.Vector3)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Scaling(System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Scaling(System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Scaling(System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that uniformly scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Scaling(System.Single)">
            <summary>
            Creates a matrix that uniformly scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationX(System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">
            Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis
            toward the origin.
            </param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationX(System.Single)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">
            Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis
            toward the origin.
            </param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationY(System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">
            Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis
            toward the origin.
            </param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationY(System.Single)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">
            Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis
            toward the origin.
            </param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationZ(System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">
            Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis
            toward the origin.
            </param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationZ(System.Single)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">
            Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis
            toward the origin.
            </param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationAxis(FlaxEngine.Vector3@,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationAxis(FlaxEngine.Vector3,System.Single)">
            <summary>
            Creates a matrix that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationQuaternion(FlaxEngine.Quaternion@,FlaxEngine.Matrix@)">
            <summary>
            Creates a rotation matrix from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the matrix.</param>
            <param name="result">The created rotation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationQuaternion(FlaxEngine.Quaternion)">
            <summary>
            Creates a rotation matrix from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the matrix.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a rotation matrix with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a rotation matrix with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Translation(FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="value">The offset for all three coordinate planes.</param>
            <param name="result">When the method completes, contains the created translation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Translation(FlaxEngine.Vector3)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="value">The offset for all three coordinate planes.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Translation(System.Single,System.Single,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <param name="result">When the method completes, contains the created translation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Translation(System.Single,System.Single,System.Single)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Skew(System.Single,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a skew/shear matrix by means of a translation vector, a rotation vector, and a rotation angle.
            shearing is performed in the direction of translation vector, where translation vector and rotation vector define the
            shearing plane.
            The effect is such that the skewed rotation vector has the specified angle with rotation itself.
            </summary>
            <param name="angle">The rotation angle.</param>
            <param name="rotationVec">The rotation vector</param>
            <param name="transVec">The translation vector</param>
            <param name="matrix">Contains the created skew/shear matrix. </param>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation(System.Single,FlaxEngine.Quaternion@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation(System.Single,FlaxEngine.Quaternion,FlaxEngine.Vector3)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation(System.Single,FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation(System.Single,FlaxEngine.Vector3,FlaxEngine.Quaternion,FlaxEngine.Vector3)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation2D(System.Single,System.Single,FlaxEngine.Vector2@,FlaxEngine.Matrix@)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation2D(System.Single,System.Single,FlaxEngine.Vector2)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation2D(System.Single,FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@,FlaxEngine.Matrix@)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.AffineTransformation2D(System.Single,FlaxEngine.Vector2,System.Single,FlaxEngine.Vector2)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Transformation(FlaxEngine.Vector3,FlaxEngine.Quaternion,FlaxEngine.Vector3)">
            <summary>
            Creates a matrix that contains both the X, Y and Z rotation, as well as scaling and translation.
            </summary>
            <param name="translation">The translation.</param>
            <param name="rotation">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="scaling">The scaling.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Transformation(FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that contains both the X, Y and Z rotation, as well as scaling and translation.
            </summary>
            <param name="translation">The translation.</param>
            <param name="rotation">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="scaling">The scaling.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Transformation(FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates a transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Transformation(FlaxEngine.Vector3,FlaxEngine.Quaternion,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Quaternion,FlaxEngine.Vector3)">
            <summary>
            Creates a transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Transformation2D(FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@,FlaxEngine.Matrix@)">
            <summary>
            Creates a 2D transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.Transformation2D(FlaxEngine.Vector2,System.Single,FlaxEngine.Vector2,FlaxEngine.Vector2,System.Single,FlaxEngine.Vector2)">
            <summary>
            Creates a 2D transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.CreateWorld(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates the world matrix from the specified parameters
            </summary>
            <param name="position">The position of the object. This value is used in translation operations.</param>
            <param name="forward">The forward direction of the object.</param>
            <param name="up">The upward direction of the object; usually [0, 1, 0].</param>
            <returns>The created world matrix of given transformation world</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.CreateWorld(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Matrix@)">
            <summary>
            Creates the world matrix from the specified parameters
            </summary>
            <param name="position">The position of the object. This value is used in translation operations.</param>
            <param name="forward">The forward direction of the object.</param>
            <param name="up">The upward direction of the object; usually [0, 1, 0].</param>
            <param name="result">>When the method completes, contains the created world matrix of given transformation world.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.CreateFromAxisAngle(FlaxEngine.Vector3,System.Single)">
            <summary>
            Creates a new matrix that rotates around an arbitrary vector.
            </summary>
            <param name="axis">The axis to rotate around.</param>
            <param name="angle">The angle to rotate around the vector.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.CreateFromAxisAngle(FlaxEngine.Vector3@,System.Single,FlaxEngine.Matrix@)">
            <summary>
            Creates a new matrix that rotates around an arbitrary vector.
            </summary>
            <param name="axis">The axis to rotate around.</param>
            <param name="angle">The angle to rotate around the vector.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Addition(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_UnaryPlus(FlaxEngine.Matrix)">
            <summary>
            Assert a matrix (return it unchanged).
            </summary>
            <param name="value">The matrix to assert (unchanged).</param>
            <returns>The asserted (unchanged) matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Subtraction(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_UnaryNegation(FlaxEngine.Matrix)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to negate.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Multiply(System.Single,FlaxEngine.Matrix)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="right">The matrix to scale.</param>
            <param name="left">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Multiply(FlaxEngine.Matrix,System.Single)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Multiply(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Division(FlaxEngine.Matrix,System.Single)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Division(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Divides two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Equality(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,<c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.op_Inequality(FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,<c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Equals(FlaxEngine.Matrix@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Matrix" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Matrix" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Equals(FlaxEngine.Matrix)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Matrix" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Matrix" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:FlaxEngine.Plane">
            <summary>
            Represents a plane in three dimensional space.
            </summary>
        </member>
        <member name="F:FlaxEngine.Plane.Normal">
            <summary>
            The normal vector of the plane.
            </summary>
        </member>
        <member name="F:FlaxEngine.Plane.D">
            <summary>
            The distance of the plane along its normal from the origin.
            </summary>
        </member>
        <member name="M:FlaxEngine.Plane.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Plane" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Plane" /> struct.
            </summary>
            <param name="a">The X component of the normal.</param>
            <param name="b">The Y component of the normal.</param>
            <param name="c">The Z component of the normal.</param>
            <param name="d">The distance of the plane along its normal from the origin.</param>
        </member>
        <member name="M:FlaxEngine.Plane.#ctor(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Plane" /> class.
            </summary>
            <param name="point">Any point that lies along the plane.</param>
            <param name="normal">The normal vector to the plane.</param>
        </member>
        <member name="M:FlaxEngine.Plane.#ctor(FlaxEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Plane" /> struct.
            </summary>
            <param name="value">The normal of the plane.</param>
            <param name="d">The distance of the plane along its normal from the origin</param>
        </member>
        <member name="M:FlaxEngine.Plane.#ctor(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Plane" /> struct.
            </summary>
            <param name="point1">First point of a triangle defining the plane.</param>
            <param name="point2">Second point of a triangle defining the plane.</param>
            <param name="point3">Third point of a triangle defining the plane.</param>
        </member>
        <member name="M:FlaxEngine.Plane.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Plane" /> struct.
            </summary>
            <param name="values">
            The values to assign to the A, B, C, and D components of the plane. This must be an array with
            four elements.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="values" /> contains more or less than four
            elements.
            </exception>
        </member>
        <member name="P:FlaxEngine.Plane.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the A, B, C, or D component, depending on the index.</value>
            <param name="index">
            The index of the component to access. Use 0 for the A component, 1 for the B component, 2 for the C
            component, and 3 for the D component.
            </param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="index" /> is out of the range [0,
            3].
            </exception>
        </member>
        <member name="M:FlaxEngine.Plane.Normalize">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
        </member>
        <member name="M:FlaxEngine.Plane.ToArray">
            <summary>
            Creates an array containing the elements of the plane.
            </summary>
            <returns>A four-element array containing the components of the plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.Ray@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.Plane@,FlaxEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="line">
            When the method completes, contains the line of intersection
            as a <see cref="T:FlaxEngine.Ray" />, or a zero ray if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Intersects(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Reflection(FlaxEngine.Matrix@)">
            <summary>
            Builds a matrix that can be used to reflect vectors about a plane.
            </summary>
            <param name="result">When the method completes, contains the reflection matrix.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Reflection">
            <summary>
            Builds a matrix that can be used to reflect vectors about a plane.
            </summary>
            <returns>The reflection matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Shadow(FlaxEngine.Vector4@,FlaxEngine.Matrix@)">
            <summary>
            Creates a matrix that flattens geometry into a shadow from this the plane onto which to project the geometry as a
            shadow.
            This plane  is assumed to be normalized
            </summary>
            <param name="light">
            The light direction. If the W component is 0, the light is directional light; if the
            W component is 1, the light is a point light.
            </param>
            <param name="result">When the method completes, contains the shadow matrix.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Shadow(FlaxEngine.Vector4)">
            <summary>
            Creates a matrix that flattens geometry into a shadow from this the plane onto which to project the geometry as a
            shadow.
            This plane  is assumed to be normalized
            </summary>
            <param name="light">
            The light direction. If the W component is 0, the light is directional light; if the
            W component is 1, the light is a point light.
            </param>
            <returns>The shadow matrix.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Reflection(FlaxEngine.Matrix3x3@)">
            <summary>
            Builds a Matrix3x3 that can be used to reflect vectors about a plane for which the reflection occurs.
            This plane is assumed to be normalized
            </summary>
            <param name="result">When the method completes, contains the reflection Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Reflection3x3">
            <summary>
            Builds a Matrix3x3 that can be used to reflect vectors about a plane for which the reflection occurs.
            This plane is assumed to be normalized
            </summary>
            <returns>The reflection Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Shadow(FlaxEngine.Vector4@,FlaxEngine.Plane@,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that flattens geometry into a shadow.
            </summary>
            <param name="light">
            The light direction. If the W component is 0, the light is directional light; if the
            W component is 1, the light is a point light.
            </param>
            <param name="plane">
            The plane onto which to project the geometry as a shadow. This parameter is assumed to be
            normalized.
            </param>
            <param name="result">When the method completes, contains the shadow Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Shadow(FlaxEngine.Vector4,FlaxEngine.Plane)">
            <summary>
            Creates a Matrix3x3 that flattens geometry into a shadow.
            </summary>
            <param name="light">
            The light direction. If the W component is 0, the light is directional light; if the
            W component is 1, the light is a point light.
            </param>
            <param name="plane">
            The plane onto which to project the geometry as a shadow. This parameter is assumed to be
            normalized.
            </param>
            <returns>The shadow Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Multiply(FlaxEngine.Plane@,System.Single,FlaxEngine.Plane@)">
            <summary>
            Scales the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <param name="result">When the method completes, contains the scaled plane.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Multiply(FlaxEngine.Plane,System.Single)">
            <summary>
            Scales the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Dot(FlaxEngine.Plane@,FlaxEngine.Vector4@,System.Single@)">
            <summary>
            Calculates the dot product of the specified vector and plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">When the method completes, contains the dot product of the specified plane and vector.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Dot(FlaxEngine.Plane,FlaxEngine.Vector4)">
            <summary>
            Calculates the dot product of the specified vector and plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of the specified plane and vector.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.DotCoordinate(FlaxEngine.Plane@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">
            When the method completes, contains the dot product of a specified vector and the normal of the
            Plane plus the distance value of the plane.
            </param>
        </member>
        <member name="M:FlaxEngine.Plane.DotCoordinate(FlaxEngine.Plane,FlaxEngine.Vector3)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of a specified vector and the normal of the Plane plus the distance value of the plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.DotNormal(FlaxEngine.Plane@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of the specified vector and the normal of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">
            When the method completes, contains the dot product of the specified vector and the normal of the
            plane.
            </param>
        </member>
        <member name="M:FlaxEngine.Plane.DotNormal(FlaxEngine.Plane,FlaxEngine.Vector3)">
            <summary>
            Calculates the dot product of the specified vector and the normal of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of the specified vector and the normal of the plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Normalize(FlaxEngine.Plane@,FlaxEngine.Plane@)">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
            <param name="plane">The source plane.</param>
            <param name="result">When the method completes, contains the normalized plane.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Normalize(FlaxEngine.Plane)">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
            <param name="plane">The source plane.</param>
            <returns>The normalized plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Transform(FlaxEngine.Plane@,FlaxEngine.Quaternion@,FlaxEngine.Plane@)">
            <summary>
            Transforms a normalized plane by a quaternion rotation.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="rotation">The quaternion rotation.</param>
            <param name="result">When the method completes, contains the transformed plane.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Transform(FlaxEngine.Plane,FlaxEngine.Quaternion)">
            <summary>
            Transforms a normalized plane by a quaternion rotation.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="rotation">The quaternion rotation.</param>
            <returns>The transformed plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Transform(FlaxEngine.Plane[],FlaxEngine.Quaternion@)">
            <summary>
            Transforms an array of normalized planes by a quaternion rotation.
            </summary>
            <param name="planes">The array of normalized planes to transform.</param>
            <param name="rotation">The quaternion rotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="planes" /> is <c>null</c>.</exception>
        </member>
        <member name="M:FlaxEngine.Plane.Transform(FlaxEngine.Plane@,FlaxEngine.Matrix@,FlaxEngine.Plane@)">
            <summary>
            Transforms a normalized plane by a matrix.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="transformation">The transformation matrix.</param>
            <param name="result">When the method completes, contains the transformed plane.</param>
        </member>
        <member name="M:FlaxEngine.Plane.Transform(FlaxEngine.Plane,FlaxEngine.Matrix)">
            <summary>
            Transforms a normalized plane by a matrix.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="transformation">The transformation matrix.</param>
            <returns>When the method completes, contains the transformed plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.Transform(FlaxEngine.Plane[],FlaxEngine.Matrix@)">
            <summary>
            Transforms an array of normalized planes by a matrix.
            </summary>
            <param name="planes">The array of normalized planes to transform.</param>
            <param name="transformation">The transformation matrix.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="planes" /> is <c>null</c>.</exception>
        </member>
        <member name="M:FlaxEngine.Plane.op_Multiply(System.Single,FlaxEngine.Plane)">
            <summary>
            Scales a plane by the given value.
            </summary>
            <param name="scale">The amount by which to scale the plane.</param>
            <param name="plane">The plane to scale.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.op_Multiply(FlaxEngine.Plane,System.Single)">
            <summary>
            Scales a plane by the given value.
            </summary>
            <param name="plane">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:FlaxEngine.Plane.op_Equality(FlaxEngine.Plane,FlaxEngine.Plane)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.op_Inequality(FlaxEngine.Plane,FlaxEngine.Plane)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.Equals(FlaxEngine.Plane@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.Equals(FlaxEngine.Plane)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Plane.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Quaternion">
            <summary>
            Represents a four dimensional mathematical quaternion. Euler angles are stored in: pitch, yaw, roll order (x, y, z).
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.X">
            <summary>
            The X component of the quaternion.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.Y">
            <summary>
            The Y component of the quaternion.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.Z">
            <summary>
            The Z component of the quaternion.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.W">
            <summary>
            The W component of the quaternion.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Quaternion" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Quaternion" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.One">
            <summary>
            A <see cref="T:FlaxEngine.Quaternion" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quaternion.Identity">
            <summary>
            The identity <see cref="T:FlaxEngine.Quaternion" /> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="M:FlaxEngine.Quaternion.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Quaternion" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.#ctor(FlaxEngine.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Quaternion" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the components.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.#ctor(FlaxEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Quaternion" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.#ctor(FlaxEngine.Vector2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Quaternion" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the quaternion.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Quaternion" /> struct.
            </summary>
            <param name="x">Initial value for the X component of the quaternion.</param>
            <param name="y">Initial value for the Y component of the quaternion.</param>
            <param name="z">Initial value for the Z component of the quaternion.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Quaternion" /> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, Z, and W components of the quaternion. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values" /> contains more or less than four elements.</exception>
        </member>
        <member name="P:FlaxEngine.Quaternion.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is equivalent to the identity quaternion.
            </summary>
        </member>
        <member name="P:FlaxEngine.Quaternion.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:FlaxEngine.Quaternion.EulerAngles">
            <summary>
            Gets the euler angle (pitch, yaw, roll) in degrees.
            </summary>
        </member>
        <member name="P:FlaxEngine.Quaternion.Angle">
            <summary>
            Gets the angle of the quaternion.
            </summary>
        </member>
        <member name="P:FlaxEngine.Quaternion.Axis">
            <summary>
            Gets the axis components of the quaternion.
            </summary>
        </member>
        <member name="P:FlaxEngine.Quaternion.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index" /> is out of the range [0, 3].</exception>
        </member>
        <member name="M:FlaxEngine.Quaternion.Conjugate">
            <summary>
            Conjugates the quaternion.
            </summary>
        </member>
        <member name="M:FlaxEngine.Quaternion.Conjugated">
            <summary>
            Gets the conjugated quaternion.
            </summary>
        </member>
        <member name="M:FlaxEngine.Quaternion.Invert">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
        </member>
        <member name="P:FlaxEngine.Quaternion.Length">
            <summary>
            Calculates the length of the quaternion.
            </summary>
            <returns>The length of the quaternion.</returns>
            <remarks><see cref="P:FlaxEngine.Quaternion.LengthSquared" /> may be preferred when only the relative length is needed and speed is of the essence.</remarks>
        </member>
        <member name="P:FlaxEngine.Quaternion.LengthSquared">
            <summary>
            Calculates the squared length of the quaternion.
            </summary>
            <returns>The squared length of the quaternion.</returns>
            <remarks>This method may be preferred to <see cref="P:FlaxEngine.Quaternion.Length" /> when only a relative length is needed and speed is of the essence.</remarks>
        </member>
        <member name="M:FlaxEngine.Quaternion.Normalize">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
        </member>
        <member name="M:FlaxEngine.Quaternion.ToArray">
            <summary>
            Creates an array containing the elements of the quaternion.
            </summary>
            <returns>A four-element array containing the components of the quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Add(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <param name="result">When the method completes, contains the sum of the two quaternions.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Add(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Subtract(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two quaternions.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Subtract(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Multiply(FlaxEngine.Quaternion@,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <param name="result">When the method completes, contains the scaled quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Multiply(FlaxEngine.Quaternion,System.Single)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Multiply(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Multiplies a quaternion by another.
            </summary>
            <param name="left">The first quaternion to multiply.</param>
            <param name="right">The second quaternion to multiply.</param>
            <param name="result">When the method completes, contains the multiplied quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Multiply(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Multiplies a quaternion by another.
            </summary>
            <param name="left">The first quaternion to multiply.</param>
            <param name="right">The second quaternion to multiply.</param>
            <returns>The multiplied quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Negate(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="value">The quaternion to negate.</param>
            <param name="result">When the method completes, contains a quaternion facing in the opposite direction.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Negate(FlaxEngine.Quaternion)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="value">The quaternion to negate.</param>
            <returns>A quaternion facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Barycentric(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,System.Single,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of a point specified in Barycentric
            coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">
            Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in
            <paramref name="value2" />).
            </param>
            <param name="amount2">
            Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in
            <paramref name="value3" />).
            </param>
            <param name="result">
            When the method completes, contains a new <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian
            coordinates of the specified point.
            </param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Barycentric(FlaxEngine.Quaternion,FlaxEngine.Quaternion,FlaxEngine.Quaternion,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of a point specified in Barycentric
            coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">
            Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in
            <paramref name="value2" />).
            </param>
            <param name="amount2">
            Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in
            <paramref name="value3" />).
            </param>
            <returns>A new <see cref="T:FlaxEngine.Quaternion" /> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Conjugate(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Conjugates a quaternion.
            </summary>
            <param name="value">The quaternion to conjugate.</param>
            <param name="result">When the method completes, contains the conjugated quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Conjugate(FlaxEngine.Quaternion)">
            <summary>
            Conjugates a quaternion.
            </summary>
            <param name="value">The quaternion to conjugate.</param>
            <returns>The conjugated quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Dot(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Calculates the dot product of two quaternions.
            </summary>
            <param name="left">First source quaternion.</param>
            <param name="right">Second source quaternion.</param>
            <returns>The dot product of the two quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Dot(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Calculates the dot product of two quaternions.
            </summary>
            <param name="left">First source quaternion.</param>
            <param name="right">Second source quaternion.</param>
            <returns>The dot product of the two quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.AngleBetween(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Calculates the angle between two quaternions.
            </summary>
            <param name="a">First source quaternion.</param>
            <param name="b">Second source quaternion.</param>
            <returns>Returns the angle in degrees between two rotations a and b.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Exponential(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Exponentiates a quaternion.
            </summary>
            <param name="value">The quaternion to exponentiate.</param>
            <param name="result">When the method completes, contains the exponentiated quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Exponential(FlaxEngine.Quaternion)">
            <summary>
            Exponentiates a quaternion.
            </summary>
            <param name="value">The quaternion to exponentiate.</param>
            <returns>The exponentiated quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Invert(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
            <param name="value">The quaternion to conjugate and renormalize.</param>
            <param name="result">When the method completes, contains the conjugated and renormalized quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Invert(FlaxEngine.Quaternion)">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
            <param name="value">The quaternion to conjugate and renormalize.</param>
            <returns>The conjugated and renormalized quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.FromDirection(FlaxEngine.Vector3)">
            <summary>
            Calculates the orientation from the direction vector.
            </summary>
            <param name="direction">The direction vector (normalized).</param>
            <returns>The orientation.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Lerp(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Performs a linear interpolation between two quaternions.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two quaternions.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Quaternion.Lerp(FlaxEngine.Quaternion,FlaxEngine.Quaternion,System.Single)">
            <summary>
            Performs a linear interpolation between two quaternion.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two quaternions.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1
            will cause <paramref name="end" /> to be returned.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Quaternion.Logarithm(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Calculates the natural logarithm of the specified quaternion.
            </summary>
            <param name="value">The quaternion whose logarithm will be calculated.</param>
            <param name="result">When the method completes, contains the natural logarithm of the quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Logarithm(FlaxEngine.Quaternion)">
            <summary>
            Calculates the natural logarithm of the specified quaternion.
            </summary>
            <param name="value">The quaternion whose logarithm will be calculated.</param>
            <returns>The natural logarithm of the quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Normalize(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@)">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
            <param name="value">The quaternion to normalize.</param>
            <param name="result">When the method completes, contains the normalized quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Normalize(FlaxEngine.Quaternion)">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
            <param name="value">The quaternion to normalize.</param>
            <returns>The normalized quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationAxis(FlaxEngine.Vector3@,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion given a rotation and an axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation (in radians).</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationAxis(FlaxEngine.Vector3,System.Single)">
            <summary>
            Creates a quaternion given a rotation and an axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation (in radians).</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationMatrix(FlaxEngine.Matrix@,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationMatrix(FlaxEngine.Matrix3x3@,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.LookAt(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Quaternion@)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.LookAt(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <returns>The created look-at quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.LookAt(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationLookAt(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Quaternion@)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="forward">The camera's forward direction.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationLookAt(FlaxEngine.Vector3)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="forward">The camera's forward direction.</param>
            <returns>The created look-at quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationLookAt(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a left-handed, look-at quaternion.
            </summary>
            <param name="forward">The camera's forward direction.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.LookRotation(FlaxEngine.Vector3)">
            <summary>
            Creates a rotation with the specified forward and upwards directions.
            </summary>
            <param name="forward">The forward direction. Direction to orient towards.</param>
            <returns>The calculated quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.LookRotation(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a rotation with the specified forward and upwards directions.
            </summary>
            <param name="forward">The forward direction. Direction to orient towards.</param>
            <param name="up">Up direction. Constrains y axis orientation to a plane this vector lies on. This rule might be broken if forward and up direction are nearly parallel.</param>
            <returns>The calculated quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.LookRotation(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Quaternion@)">
            <summary>
            Creates a rotation with the specified forward and upwards directions.
            </summary>
            <param name="forward">The forward direction. Direction to orient towards.</param>
            <param name="up">The up direction. Constrains y axis orientation to a plane this vector lies on. This rule might be broken if forward and up direction are nearly parallel.</param>
            <param name="result">The calculated quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Billboard(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Quaternion@)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Billboard(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationMatrix(FlaxEngine.Matrix)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationX(System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationX(System.Single)">
            <summary>
            Creates a quaternion that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians.</param>
            <returns>The created rotation quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationY(System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationY(System.Single)">
            <summary>
            Creates a quaternion that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians.</param>
            <returns>The created rotation quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationZ(System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationZ(System.Single)">
            <summary>
            Creates a quaternion that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians.</param>
            <returns>The created rotation quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Euler(FlaxEngine.Vector3)">
            <summary>
            Creates a quaternion given a pitch, yaw and roll values. Angles are in degrees.
            </summary>
            <param name="eulerAngles">The pitch, yaw and roll angles of rotation.</param>
            <returns>When the method completes, contains the newly created quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Euler(FlaxEngine.Vector3@,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion given a pitch, yaw and roll values. Angles are in degrees.
            </summary>
            <param name="eulerAngles">The pitch, yaw and roll angles of rotation.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Euler(System.Single,System.Single,System.Single)">
            <summary>
            Creates a quaternion given a pitch, yaw and roll values. Angles are in degrees.
            </summary>
            <param name="x">The pitch of rotation (in degrees).</param>
            <param name="y">The yaw of rotation (in degrees).</param>
            <param name="z">The roll of rotation (in degrees).</param>
            <returns>When the method completes, contains the newly created quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Euler(System.Single,System.Single,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion given a pitch, yaw and roll values. Angles are in degrees.
            </summary>
            <param name="x">The pitch of rotation (in degrees).</param>
            <param name="y">The yaw of rotation (in degrees).</param>
            <param name="z">The roll of rotation (in degrees).</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Creates a quaternion given a yaw, pitch, and roll value. Angles are in radians. Use <see cref="F:FlaxEngine.Mathf.RadiansToDegrees"/> to convert degrees to radians.
            </summary>
            <param name="yaw">The yaw of rotation (in radians).</param>
            <param name="pitch">The pitch of rotation (in radians).</param>
            <param name="roll">The roll of rotation (in radians).</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a quaternion given a yaw, pitch, and roll value. Angles are in radians.
            </summary>
            <param name="yaw">The yaw of rotation (in radians).</param>
            <param name="pitch">The pitch of rotation (in radians).</param>
            <param name="roll">The roll of rotation (in radians).</param>
            <returns>The newly created quaternion (in radians).</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Slerp(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the spherical linear interpolation of the two quaternions.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Slerp(FlaxEngine.Quaternion,FlaxEngine.Quaternion,System.Single)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The spherical linear interpolation of the two quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Squad(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,System.Single,FlaxEngine.Quaternion@)">
            <summary>
            Interpolates between quaternions, using spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Third source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of interpolation.</param>
            <param name="result">When the method completes, contains the spherical quadrangle interpolation of the quaternions.</param>
        </member>
        <member name="M:FlaxEngine.Quaternion.Squad(FlaxEngine.Quaternion,FlaxEngine.Quaternion,FlaxEngine.Quaternion,FlaxEngine.Quaternion,System.Single)">
            <summary>
            Interpolates between quaternions, using spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Third source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of interpolation.</param>
            <returns>The spherical quadrangle interpolation of the quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.SquadSetup(FlaxEngine.Quaternion,FlaxEngine.Quaternion,FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Sets up control points for spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Third source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <returns>An array of three quaternions that represent control points for spherical quadrangle interpolation.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_Addition(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_Subtraction(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_UnaryNegation(FlaxEngine.Quaternion)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="value">The quaternion to negate.</param>
            <returns>A quaternion facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_Multiply(System.Single,FlaxEngine.Quaternion)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_Multiply(FlaxEngine.Quaternion,System.Single)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_Multiply(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Multiplies a quaternion by another.
            </summary>
            <param name="left">The first quaternion to multiply.</param>
            <param name="right">The second quaternion to multiply.</param>
            <returns>The multiplied quaternion.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_Equality(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.op_Inequality(FlaxEngine.Quaternion,FlaxEngine.Quaternion)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.NearEqual(FlaxEngine.Quaternion,FlaxEngine.Quaternion,System.Single)">
            <summary>
            Tests whether one quaternion is near another quaternion.
            </summary>
            <param name="left">The left quaternion.</param>
            <param name="right">The right quaternion.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near another, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.NearEqual(FlaxEngine.Quaternion@,FlaxEngine.Quaternion@,System.Single)">
            <summary>
            Tests whether one quaternion is near another quaternion.
            </summary>
            <param name="left">The left quaternion.</param>
            <param name="right">The right quaternion.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near another, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Equals(FlaxEngine.Quaternion@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Quaternion" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Quaternion" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Quaternion" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Equals(FlaxEngine.Quaternion)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Quaternion" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Quaternion" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Quaternion" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Quaternion.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:FlaxEngine.Ray">
            <summary>
            Represents a three dimensional line based on a point in space and a direction.
            </summary>
        </member>
        <member name="F:FlaxEngine.Ray.Position">
            <summary>
            The position in three dimensional space where the ray starts.
            </summary>
        </member>
        <member name="F:FlaxEngine.Ray.Direction">
            <summary>
            The normalized direction in which the ray points.
            </summary>
        </member>
        <member name="F:FlaxEngine.Ray.Identity">
            <summary>
            Identity ray (at zero origin pointing forwards).
            </summary>
        </member>
        <member name="M:FlaxEngine.Ray.#ctor(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Ray" /> struct.
            </summary>
            <param name="position">The position in three dimensional space of the origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
        </member>
        <member name="M:FlaxEngine.Ray.GetPoint(System.Single)">
            <summary>
            Gets a point at distance long ray.
            </summary>
            <param name="distance">The distance from ray origin.</param>
            <returns>The calculated point.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Ray@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane">The plane to test</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Plane@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Plane@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingBox)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingBox@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingBox@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingSphere)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingSphere@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.Intersects(FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.GetPickRay(System.Single,System.Single,FlaxEngine.Viewport@,FlaxEngine.Matrix@)">
            <summary>
            Calculates a world space ray from 2d screen coordinates.
            </summary>
            <param name="x">The X coordinate on 2d screen.</param>
            <param name="y">The Y coordinate on 2d screen.</param>
            <param name="viewport">The screen viewport.</param>
            <param name="vp">The View*Projection matrix.</param>
            <returns>The resulting ray.</returns>
        </member>
        <member name="M:FlaxEngine.Ray.op_Equality(FlaxEngine.Ray,FlaxEngine.Ray)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.op_Inequality(FlaxEngine.Ray,FlaxEngine.Ray)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.Equals(FlaxEngine.Ray@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.Equals(FlaxEngine.Ray)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Ray.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Rectangle">
            <summary>
            Describes rectangle in 2D space defines by location of its upper-left corner and the size.
            </summary>
        </member>
        <member name="F:FlaxEngine.Rectangle.Location">
            <summary>
            Rectangle location (coordinates of the upper-left corner)
            </summary>
        </member>
        <member name="F:FlaxEngine.Rectangle.Size">
            <summary>
            Rectangle size
            </summary>
        </member>
        <member name="F:FlaxEngine.Rectangle.Empty">
            <summary>
            A <see cref="T:FlaxEngine.Rectangle"/> which represents an empty space.
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.X">
            <summary>
            Gets or sets X coordinate of the left edge of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Y">
            <summary>
            Gets or sets Y coordinate of the left edge of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Width">
            <summary>
            Gets or sets width of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Height">
            <summary>
            Gets or sets height of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Top">
            <summary>
            Gets Y coordinate of the top edge of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Bottom">
            <summary>
            Gets Y coordinate of the bottom edge of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Left">
            <summary>
            Gets X coordinate of the left edge of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Right">
            <summary>
            Gets X coordinate of the right edge of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.UpperLeft">
            <summary>
            Gets position of the upper left corner of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.UpperRight">
            <summary>
            Gets position of the upper right corner of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.BottomRight">
            <summary>
            Gets position of the bottom right corner of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.BottomLeft">
            <summary>
            Gets position of the bottom left corner of the rectangle
            </summary>
        </member>
        <member name="P:FlaxEngine.Rectangle.Center">
            <summary>
            Gets center position of the rectangle
            </summary>
        </member>
        <member name="M:FlaxEngine.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Init
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.#ctor(FlaxEngine.Vector2,System.Single,System.Single)">
            <summary>
            Init
            </summary>
            <param name="location">Location of the upper left corner</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.#ctor(System.Single,System.Single,FlaxEngine.Vector2)">
            <summary>
            Init
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="size">Size</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.#ctor(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Init
            </summary>
            <param name="location">Location of the upper left corner</param>
            <param name="size">Size</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.Contains(FlaxEngine.Vector2)">
            <summary>
            Checks if rectangle contains given point
            </summary>
            <param name="location">Point location to check</param>
            <returns>True if point is inside rectangle's area</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Contains(FlaxEngine.Vector2@)">
            <summary>
            Checks if rectangle contains given point
            </summary>
            <param name="location">Point location to check</param>
            <returns>True if point is inside rectangle's area</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Contains(FlaxEngine.Rectangle)">
            <summary>
            Determines whether this rectangle entirely contains a specified rectangle
            </summary>
            <param name="value">The rectangle to evaluate</param>
            <returns>True if this rectangle entirely contains the specified rectangle, or false if not</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Contains(FlaxEngine.Rectangle@)">
            <summary>
            Determines whether this rectangle entirely contains a specified rectangle
            </summary>
            <param name="value">The rectangle to evaluate</param>
            <returns>True if this rectangle entirely contains the specified rectangle, or false if not</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Intersects(FlaxEngine.Rectangle)">
            <summary>
            Determines whether a specified rectangle intersects with this rectangle
            </summary>
            <param name="value">The rectangle to evaluate</param>
            <returns>True if the specified rectangle intersects with this one, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Intersects(FlaxEngine.Rectangle@)">
            <summary>
            Determines whether a specified rectangle intersects with this rectangle
            </summary>
            <param name="value">The rectangle to evaluate</param>
            <returns>True if the specified rectangle intersects with this one, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Offset(System.Single,System.Single)">
            <summary>
            Offset rectangle position
            </summary>
            <param name="x">X coordinate offset</param>
            <param name="y">Y coordinate offset</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.Offset(FlaxEngine.Vector2)">
            <summary>
            Offset rectangle position
            </summary>
            <param name="offset">X and Y coordinate offset</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.MakeOffsetted(System.Single,System.Single)">
            <summary>
            Make offseted rectangle
            </summary>
            <param name="x">X coordinate offset</param>
            <param name="y">Y coordinate offset</param>
            <returns>Offseted rectangle</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.MakeOffsetted(FlaxEngine.Vector2)">
            <summary>
            Make offseted rectangle
            </summary>
            <param name="offset">X and Y coordinate offset</param>
            <returns>Offseted rectangle</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Expand(System.Single)">
            <summary>
            Expand rectangle area in all directions by given amount
            </summary>
            <param name="toExpand">Amount of units to expand a rectangle</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.MakeExpanded(System.Single)">
            <summary>
            Make expanded rectangle area in all directions by given amount
            </summary>
            <param name="toExpand">Amount of units to expand a rectangle</param>
            <returns>Expanded rectangle</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Scale(System.Single)">
            <summary>
            Scale rectangle area in all directions by given amount
            </summary>
            <param name="scale">Scale value to expand a rectangle</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.MakeScaled(System.Single)">
            <summary>
            Make scaled rectangle area in all directions by given amount
            </summary>
            <param name="scale">Scale value to expand a rectangle</param>
            <returns>Scaled rectangle</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Distance(FlaxEngine.Rectangle,FlaxEngine.Rectangle)">
            <summary>
            Computed nearest distance between 2 rectangles.
            </summary>
            <param name="a">First rectangle</param>
            <param name="b">Second rectangle</param>
            <returns>Resulting distance, 0 if overlapping</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Distance(FlaxEngine.Rectangle,FlaxEngine.Vector2)">
            <summary>
            Computed distance between rectangle and the point.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="p">The point.</param>
            <returns>The resulting distance, 0 if point is inside the rectangle.</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Margin(FlaxEngine.Rectangle,FlaxEngine.GUI.Margin)">
            <summary>
            Calculates a rectangle that includes the margins (inside).
            </summary>
            <param name="value">The rectangle.</param>
            <param name="margin">The margin to apply to the rectangle.</param>
            <returns>Rectangle inside the given rectangle after applying margins inside it.</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Union(FlaxEngine.Rectangle,FlaxEngine.Rectangle)">
            <summary>
            Calculates a rectangle that contains the union of a and b rectangles
            </summary>
            <param name="a">The first rectangle.</param>
            <param name="b">The second rectangle.</param>
            <returns>Rectangle that contains both a and b rectangles</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Union(FlaxEngine.Rectangle@,FlaxEngine.Rectangle@,FlaxEngine.Rectangle@)">
            <summary>
            Calculates a rectangle that contains the union of a and b rectangles
            </summary>
            <param name="a">First rectangle</param>
            <param name="b">Second rectangle</param>
            <param name="result">When the method completes, contains the rectangle that both a and b rectangles.</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.Shared(FlaxEngine.Rectangle,FlaxEngine.Rectangle)">
            <summary>
            Calculates a rectangle that contains the shared part of a and b rectangles.
            </summary>
            <param name="a">The first rectangle.</param>
            <param name="b">The second rectangle.</param>
            <returns>Rectangle that contains shared part of a and b rectangles.</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Shared(FlaxEngine.Rectangle@,FlaxEngine.Rectangle@,FlaxEngine.Rectangle@)">
            <summary>
            Calculates a rectangle that contains the shared part of a and b rectangles.
            </summary>
            <param name="a">The first rectangle.</param>
            <param name="b">The second rectangle.</param>
            <param name="result">When the method completes, contains the rectangle that shared part of a and b rectangles.</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.FromPoints(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Creates rectangle from two points.
            </summary>
            <param name="p1">First point</param>
            <param name="p2">Second point</param>
            <returns>Rectangle that contains both p1 and p2</returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.FromPoints(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Rectangle@)">
            <summary>
            Creates rectangle from two points.
            </summary>
            <param name="p1">First point</param>
            <param name="p2">Second point</param>
            <returns>Rectangle that contains both p1 and p2</returns>
            <param name="result">When the method completes, contains the rectangle that contains both p1 and p2 points.</param>
        </member>
        <member name="M:FlaxEngine.Rectangle.op_Addition(FlaxEngine.Rectangle,FlaxEngine.Vector2)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="offset">The offset.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.op_Subtraction(FlaxEngine.Rectangle,FlaxEngine.Vector2)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="offset">The offset.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.op_Multiply(FlaxEngine.Rectangle,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="scale">The scale.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.op_Equality(FlaxEngine.Rectangle,FlaxEngine.Rectangle)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.op_Inequality(FlaxEngine.Rectangle,FlaxEngine.Rectangle)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Equals(FlaxEngine.Rectangle@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Rectangle" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Rectangle" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Rectangle" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Rectangle.Equals(FlaxEngine.Rectangle)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Rectangle.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Rectangle.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Rectangle.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Transform">
            <summary>
            Describes transformation in a 3D space.
            </summary>
        </member>
        <member name="F:FlaxEngine.Transform.Translation">
            <summary>
            The translation vector of the transform.
            </summary>
        </member>
        <member name="F:FlaxEngine.Transform.Orientation">
            <summary>
            The rotation of the transform.
            </summary>
        </member>
        <member name="F:FlaxEngine.Transform.Scale">
            <summary>
            The scale vector of the transform.
            </summary>
        </member>
        <member name="F:FlaxEngine.Transform.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Transform" /> type, in bytes
            </summary>
        </member>
        <member name="F:FlaxEngine.Transform.Identity">
            <summary>
            A identity <see cref="T:FlaxEngine.Transform" /> with all default values
            </summary>
        </member>
        <member name="M:FlaxEngine.Transform.#ctor(FlaxEngine.Vector3)">
            <summary>
            Init
            </summary>
            <param name="position">Position in 3D space</param>
        </member>
        <member name="M:FlaxEngine.Transform.#ctor(FlaxEngine.Vector3,FlaxEngine.Quaternion)">
            <summary>
            Init
            </summary>
            <param name="position">Position in 3D space</param>
            <param name="rotation">Rotation in 3D space</param>
        </member>
        <member name="M:FlaxEngine.Transform.#ctor(FlaxEngine.Vector3,FlaxEngine.Quaternion,FlaxEngine.Vector3)">
            <summary>
            Init
            </summary>
            <param name="position">Position in 3D space</param>
            <param name="rotation">Rotation in 3D space</param>
            <param name="scale">Transform scale</param>
        </member>
        <member name="M:FlaxEngine.Transform.#ctor(FlaxEngine.Matrix)">
            <summary>
            Creates a new Transform from a matrix
            </summary>
            <param name="transform">World matrix</param>
        </member>
        <member name="M:FlaxEngine.Transform.#ctor(FlaxEngine.Matrix@)">
            <summary>
            Creates a new Transform from a matrix
            </summary>
            <param name="transform">World matrix</param>
        </member>
        <member name="P:FlaxEngine.Transform.IsIdentity">
            <summary>
            Gets a value indicting whether this transform is identity
            </summary>
        </member>
        <member name="P:FlaxEngine.Transform.Forward">
            <summary>
            Gets the forward vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.Transform.Backward">
            <summary>
            Gets the backward vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.Transform.Up">
            <summary>
            Gets the up vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.Transform.Down">
            <summary>
            Gets the down vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.Transform.Left">
            <summary>
            Gets the left vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.Transform.Right">
            <summary>
            Gets the right vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Transform.GetRotation">
            <summary>
            Gets rotation matrix (from Orientation).
            </summary>
            <returns>Rotation matrix</returns>
        </member>
        <member name="M:FlaxEngine.Transform.GetRotation(FlaxEngine.Matrix@)">
            <summary>
            Gets rotation matrix (from Orientation).
            </summary>
            <param name="result">Matrix to set</param>
        </member>
        <member name="M:FlaxEngine.Transform.SetRotation(FlaxEngine.Matrix)">
            <summary>
            Sets rotation matrix (from Orientation).
            </summary>
            <param name="value">Rotation matrix</param>
        </member>
        <member name="M:FlaxEngine.Transform.SetRotation(FlaxEngine.Matrix@)">
            <summary>
            Sets rotation matrix (from Orientation).
            </summary>
            <param name="value">Rotation matrix</param>
        </member>
        <member name="M:FlaxEngine.Transform.GetWorld">
            <summary>
            Gets world matrix that describes transformation as a 4 by 4 matrix.
            </summary>
            <returns>World matrix</returns>
        </member>
        <member name="M:FlaxEngine.Transform.GetWorld(FlaxEngine.Matrix@)">
            <summary>
            Gets world matrix that describes transformation as a 4 by 4 matrix.
            </summary>
            <param name="result">World matrix</param>
        </member>
        <member name="M:FlaxEngine.Transform.Add(FlaxEngine.Transform,FlaxEngine.Transform)">
            <summary>
            Adds two transforms.
            </summary>
            <param name="left">The first transform to add.</param>
            <param name="right">The second transform to add.</param>
            <returns>The sum of the two transforms.</returns>
        </member>
        <member name="M:FlaxEngine.Transform.Subtract(FlaxEngine.Transform,FlaxEngine.Transform)">
            <summary>
            Subtracts two transforms.
            </summary>
            <param name="left">The first transform to subtract from.</param>
            <param name="right">The second transform to subtract.</param>
            <returns>The difference of the two transforms.</returns>
        </member>
        <member name="M:FlaxEngine.Transform.LocalToWorld(FlaxEngine.Transform)">
            <summary>
            Perform transformation of the given transform in local space
            </summary>
            <param name="other">Local space transform</param>
            <returns>World space transform</returns>
        </member>
        <member name="M:FlaxEngine.Transform.LocalToWorld(FlaxEngine.Vector3)">
            <summary>
            Perform transformation of the given point in local space
            </summary>
            <param name="point">Local space point</param>
            <returns>World space point</returns>
        </member>
        <member name="M:FlaxEngine.Transform.LocalToWorldVector(FlaxEngine.Vector3)">
            <summary>
            Performs transformation of the given vector in local space to the world space of this transform.
            </summary>
            <param name="vector">The local space vector.</param>
            <returns>The world space vector.</returns>
        </member>
        <member name="M:FlaxEngine.Transform.LocalToWorld(FlaxEngine.Vector3[],FlaxEngine.Vector3[])">
            <summary>
            Perform transformation of the given points in local space
            </summary>
            <param name="points">Local space points</param>
            <param name="result">World space points</param>
        </member>
        <member name="M:FlaxEngine.Transform.WorldToLocal(FlaxEngine.Transform)">
            <summary>
            Perform transformation of the given transform in world space
            </summary>
            <param name="other">World space transform</param>
            <returns>Local space transform</returns>
        </member>
        <member name="M:FlaxEngine.Transform.WorldToLocal(FlaxEngine.Vector3)">
            <summary>
            Perform transformation of the given point in world space
            </summary>
            <param name="point">World space point</param>
            <returns>Local space point</returns>
        </member>
        <member name="M:FlaxEngine.Transform.WorldToLocalVector(FlaxEngine.Vector3)">
            <summary>
            Perform transformation of the given vector in world space
            </summary>
            <param name="vector">World space vector</param>
            <returns>Local space vector</returns>
        </member>
        <member name="M:FlaxEngine.Transform.WorldToLocal(FlaxEngine.Vector3[],FlaxEngine.Vector3[])">
            <summary>
            Perform transformation of the given points in world space
            </summary>
            <param name="points">World space points</param>
            <param name="result">Local space points</param>
        </member>
        <member name="M:FlaxEngine.Transform.TransformDirection(FlaxEngine.Vector3)">
            <summary>
            Transforms the direction vector from the local space to the world space.
            </summary>
            <remarks>
            This operation is not affected by scale or position of the transform. The returned vector has the same length as direction.
            Use <see cref="M:FlaxEngine.Transform.TransformPoint(FlaxEngine.Vector3)"/> for the conversion if the vector represents a position rather than a direction.
            </remarks>
            <param name="direction">The direction.</param>
            <returns>The transformed direction vector.</returns>
        </member>
        <member name="M:FlaxEngine.Transform.TransformPoint(FlaxEngine.Vector3)">
            <summary>
            Transforms the position from the local space to the world space.
            </summary>
            <remarks>
            Use <see cref="M:FlaxEngine.Transform.TransformDirection(FlaxEngine.Vector3)"/> for the conversion if the vector represents a direction rather than a position.
            </remarks>
            <param name="position">The position.</param>
            <returns>The transformed position.</returns>
        </member>
        <member name="M:FlaxEngine.Transform.Lerp(FlaxEngine.Transform,FlaxEngine.Transform,System.Single)">
            <summary>
            Performs a linear interpolation between two transformations.
            </summary>
            <param name="start">Start transformation.</param>
            <param name="end">End transformation.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two transformations.</returns>
            <remarks>Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned.</remarks>
        </member>
        <member name="M:FlaxEngine.Transform.Lerp(FlaxEngine.Transform@,FlaxEngine.Transform@,System.Single,FlaxEngine.Transform@)">
            <summary>
            Performs a linear interpolation between two transformations.
            </summary>
            <param name="start">Start transformation.</param>
            <param name="end">End transformation.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two transformations.</param>
            <remarks>Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned.</remarks>
        </member>
        <member name="M:FlaxEngine.Transform.op_Equality(FlaxEngine.Transform,FlaxEngine.Transform)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Transform.op_Inequality(FlaxEngine.Transform,FlaxEngine.Transform)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Transform.op_Addition(FlaxEngine.Transform,FlaxEngine.Transform)">
            <summary>
            Adds two transformations.
            </summary>
            <param name="left">The first transform to add.</param>
            <param name="right">The second transform to add.</param>
            <returns>The sum of the two transformations.</returns>
        </member>
        <member name="M:FlaxEngine.Transform.op_Subtraction(FlaxEngine.Transform,FlaxEngine.Transform)">
            <summary>
            Subtracts two transformations.
            </summary>
            <param name="left">The first transform to subtract from.</param>
            <param name="right">The second transform to subtract.</param>
            <returns>The difference of the two transformations.</returns>
        </member>
        <member name="M:FlaxEngine.Transform.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Transform.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Transform.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Transform.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Transform.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:FlaxEngine.Transform.NearEqual(FlaxEngine.Transform,FlaxEngine.Transform,System.Single)">
            <summary>
            Tests whether one transform is near another transform.
            </summary>
            <param name="left">The left transform.</param>
            <param name="right">The right transform.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near another, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Transform.NearEqual(FlaxEngine.Transform@,FlaxEngine.Transform@,System.Single)">
            <summary>
            Tests whether one transform is near another transform.
            </summary>
            <param name="left">The left transform.</param>
            <param name="right">The right transform.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near another, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Transform.Equals(FlaxEngine.Transform@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Transform" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Transform" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Transform" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Transform.Equals(FlaxEngine.Transform)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Transform" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Transform" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Transform" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Transform.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:FlaxEngine.Vector2">
            <summary>
            Represents a two dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Vector2" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Vector2" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.UnitX">
            <summary>
            The X unit <see cref="T:FlaxEngine.Vector2" /> (1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.UnitY">
            <summary>
            The Y unit <see cref="T:FlaxEngine.Vector2" /> (0, 1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.Half">
            <summary>
            A <see cref="T:FlaxEngine.Vector2" /> with all of its components set to half.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.One">
            <summary>
            A <see cref="T:FlaxEngine.Vector2" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.Minimum">
            <summary>
            A <see cref="T:FlaxEngine.Vector2" /> with all components equal to <see cref="F:System.Single.MinValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector2.Maximum">
            <summary>
            A <see cref="T:FlaxEngine.Vector2" /> with all components equal to <see cref="F:System.Single.MaxValue"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector2" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector2" /> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.#ctor(FlaxEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector2" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.#ctor(FlaxEngine.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector2" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector2" /> struct.
            </summary>
            <param name="values">The values to assign to the X and Y components of the vector. This must be an array with two elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values" /> contains more or less than two elements.</exception>
        </member>
        <member name="P:FlaxEngine.Vector2.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector2.IsZero">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector2.MinValue">
            <summary>
            Gets a minimum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector2.MaxValue">
            <summary>
            Gets a maximum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector2.AvgValue">
            <summary>
            Gets an arithmetic average value of all vector components.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector2.ValuesSum">
            <summary>
            Gets a sum of the component values.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector2.Absolute">
            <summary>
            Gets a vector with values being absolute values of that vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector2.Negative">
            <summary>
            Gets a vector with values being opposite to values of that vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector2.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X or Y component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component and 1 for the Y component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index" /> is out of the range [0,1].</exception>
        </member>
        <member name="P:FlaxEngine.Vector2.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks><see cref="P:FlaxEngine.Vector2.LengthSquared" /> may be preferred when only the relative length is needed and speed is of the essence.</remarks>
        </member>
        <member name="P:FlaxEngine.Vector2.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>This method may be preferred to <see cref="P:FlaxEngine.Vector2.Length" /> when only a relative length is needed and speed is of the essence.</remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector2.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector2.Add(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Add(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Add(FlaxEngine.Vector2@,System.Single@,FlaxEngine.Vector2@)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <param name="result">The vector with added scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Add(FlaxEngine.Vector2,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Subtract(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Subtract(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Subtract(FlaxEngine.Vector2@,System.Single@,FlaxEngine.Vector2@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Subtract(FlaxEngine.Vector2,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Subtract(System.Single@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Subtract(System.Single,FlaxEngine.Vector2)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Multiply(FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Multiply(FlaxEngine.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Multiply(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Multiply(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Divide(FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Divide(FlaxEngine.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Divide(System.Single,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Divide(System.Single,FlaxEngine.Vector2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Negate(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Negate(FlaxEngine.Vector2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Barycentric(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single,System.Single,FlaxEngine.Vector2@)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of a point specified in Barycentric
            coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <param name="result">When the method completes, contains the 2D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Barycentric(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of a point specified in Barycentric
            coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <returns>A new <see cref="T:FlaxEngine.Vector2" /> containing the 2D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Clamp(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Clamp(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Saturate">
            <summary>
            Saturates this instance in the range [0,1].
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector2.TriangleArea(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Calculates the area of the triangle.
            </summary>
            <param name="v0">The first triangle vertex.</param>
            <param name="v1">The second triangle vertex.</param>
            <param name="v2">The third triangle vertex.</param>
            <returns>The triangle area.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Distance(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks><see cref="M:FlaxEngine.Vector2.DistanceSquared(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single@)" /> may be preferred when only the relative distance is needed and speed is of the essence.</remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Distance(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks><see cref="M:FlaxEngine.Vector2.DistanceSquared(FlaxEngine.Vector2,FlaxEngine.Vector2)" /> may be preferred when only the relative distance is needed and speed is of the essence.</remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Distance(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks><see cref="M:FlaxEngine.Vector2.DistanceSquared(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single@)" /> may be preferred when only the relative distance is needed and speed is of the essence.</remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.DistanceSquared(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.DistanceSquared(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.DistanceSquared(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.NearEqual(FlaxEngine.Vector2,FlaxEngine.Vector2,System.Single)">
            <summary>
            Tests whether one vector is near another vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.NearEqual(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single)">
            <summary>
            Tests whether one vector is near another vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near another, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Dot(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Dot(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Dot(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Cross(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the cross product of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Cross(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Cross(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Normalize(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Normalize(FlaxEngine.Vector2)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.ClampLength(FlaxEngine.Vector2,System.Single)">
            <summary>
            Makes sure that Length of the output vector is always below max and above 0.
            </summary>
            <param name="vector">Input Vector.</param>
            <param name="max">Max Length</param>
        </member>
        <member name="M:FlaxEngine.Vector2.ClampLength(FlaxEngine.Vector2,System.Single,System.Single)">
            <summary>
            Makes sure that Length of the output vector is always below max and above min.
            </summary>
            <param name="vector">Input Vector.</param>
            <param name="min">Min Length</param>
            <param name="max">Max Length</param>
        </member>
        <member name="M:FlaxEngine.Vector2.ClampLength(FlaxEngine.Vector2@,System.Single,System.Single,FlaxEngine.Vector2@)">
            <summary>
            Makes sure that Length of the output vector is always below max and above min.
            </summary>
            <param name="vector">Input Vector.</param>
            <param name="min">Min Length</param>
            <param name="max">Max Length</param>
            <param name="retVect">The Return Vector</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Round(FlaxEngine.Vector2)">
            <summary>
            Returns the vector with components rounded to the nearest integer.
            </summary>
            <param name="v">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Ceil(FlaxEngine.Vector2)">
            <summary>
            Returns the vector with components containing the smallest integer greater to or equal to the original value.
            </summary>
            <param name="v">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Mod(FlaxEngine.Vector2)">
            <summary>
            Breaks the components of the vector into an integral and a fractional part. Returns vector made of fractional parts.
            </summary>
            <param name="v">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Lerp(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned.</remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Lerp(FlaxEngine.Vector2,FlaxEngine.Vector2,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned.</remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Lerp(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned.</remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Lerp(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned.</remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.SmoothStep(FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.SmoothStep(FlaxEngine.Vector2,FlaxEngine.Vector2,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Hermite(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Hermite(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Perpendicular(FlaxEngine.Vector2)">
            <summary>
            Calculates the 2D vector perpendicular to the given 2D vector. The result is always rotated 90-degrees in a counter-clockwise direction for a 2D coordinate system where the positive Y axis goes up.
            </summary>
            <param name="inDirection">The input direction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Perpendicular(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Calculates the 2D vector perpendicular to the given 2D vector. The result is always rotated 90-degrees in a counter-clockwise direction for a 2D coordinate system where the positive Y axis goes up.
            </summary>
            <param name="inDirection">The in direction.</param>
            <param name="result">When the method completes, contains the result of the calculation.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.CatmullRom(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,System.Single,FlaxEngine.Vector2@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.CatmullRom(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Max(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Max(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Min(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Min(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Abs(FlaxEngine.Vector2)">
            <summary>
            Returns the absolute value of a vector.
            </summary>
            <param name="v">The value.</param>
            <returns> A vector which components are less or equal to 0.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Reflect(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="result">When the method completes, contains the reflected vector.</param>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Reflect(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.Orthogonalize(FlaxEngine.Vector2[],FlaxEngine.Vector2[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>
              Orthogonalization is the process of making all vectors orthogonal to each other. This
              means that any given vector in the list will be orthogonal to any other given vector in the
              list.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting vectors
              tend to be numerically unstable. The numeric stability decreases according to the vectors
              position in the list so that the first vector is the most stable and the last vector is the
              least stable.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source" /> or <paramref name="destination" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination" /> is shorter in length than <paramref name="source" />.</exception>
        </member>
        <member name="M:FlaxEngine.Vector2.Orthonormalize(FlaxEngine.Vector2[],FlaxEngine.Vector2[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>
              Orthonormalization is the process of making all vectors orthogonal to each
              other and making all vectors of unit length. This means that any given vector will
              be orthogonal to any other given vector in the list.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting vectors
              tend to be numerically unstable. The numeric stability decreases according to the vectors
              position in the list so that the first vector is the most stable and the last vector is the
              least stable.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source" /> or <paramref name="destination" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination" /> is shorter in length than<paramref name="source" />.</exception>
        </member>
        <member name="M:FlaxEngine.Vector2.Transform(FlaxEngine.Vector2@,FlaxEngine.Quaternion@,FlaxEngine.Vector2@)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector4" />.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Transform(FlaxEngine.Vector2,FlaxEngine.Quaternion)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:FlaxEngine.Vector4" />.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Transform(FlaxEngine.Vector2[],FlaxEngine.Quaternion@,FlaxEngine.Vector2[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <param name="destination">The array for which the transformed vectors are stored. This array may be the same array as <paramref name="source" />.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source" /> or <paramref name="destination" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination" /> is shorter in length than <paramref name="source" />.</exception>
        </member>
        <member name="M:FlaxEngine.Vector2.Transform(FlaxEngine.Vector2@,FlaxEngine.Matrix@,FlaxEngine.Vector4@)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector4" />.</param>
        </member>
        <member name="M:FlaxEngine.Vector2.Transform(FlaxEngine.Vector2,FlaxEngine.Matrix)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <returns>The transformed <see cref="T:FlaxEngine.Vector4" />.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Transform(FlaxEngine.Vector2[],FlaxEngine.Matrix@,FlaxEngine.Vector4[])">
            <summary>
            Transforms an array of 2D vectors by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="destination">The array for which the transformed vectors are stored.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source" /> or <paramref name="destination" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination" /> is shorter in length than <paramref name="source" />.</exception>
        </member>
        <member name="M:FlaxEngine.Vector2.TransformCoordinate(FlaxEngine.Vector2@,FlaxEngine.Matrix@,FlaxEngine.Vector2@)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.TransformCoordinate(FlaxEngine.Vector2,FlaxEngine.Matrix)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.TransformCoordinate(FlaxEngine.Vector2[],FlaxEngine.Matrix@,FlaxEngine.Vector2[])">
            <summary>
            Performs a coordinate transformation on an array of vectors using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="source">The array of coordinate vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="destination">The array for which the transformed vectors are stored. This array may be the same array as <paramref name="source" />.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source" /> or <paramref name="destination" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination" /> is shorter in length than <paramref name="source" />.</exception>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.TransformNormal(FlaxEngine.Vector2@,FlaxEngine.Matrix@,FlaxEngine.Vector2@)">
            <summary>
            Performs a normal transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed normal.</param>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.TransformNormal(FlaxEngine.Vector2,FlaxEngine.Matrix)">
            <summary>
            Performs a normal transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <returns>The transformed normal.</returns>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.TransformNormal(FlaxEngine.Vector2[],FlaxEngine.Matrix@,FlaxEngine.Vector2[])">
            <summary>
            Performs a normal transformation on an array of vectors using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="source">The array of normal vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="destination">The array for which the transformed vectors are stored. This array may be the same array as <paramref name="source" />.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source" /> or <paramref name="destination" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination" /> is shorter in length than <paramref name="source" />.</exception>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Addition(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Multiply(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication equivalent to <see cref="M:FlaxEngine.Vector2.Multiply(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)" />.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplication of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_UnaryPlus(FlaxEngine.Vector2)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchanged).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Subtraction(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_UnaryNegation(FlaxEngine.Vector2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Multiply(System.Single,FlaxEngine.Vector2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Multiply(FlaxEngine.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Division(FlaxEngine.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Division(System.Single,FlaxEngine.Vector2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Division(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Modulus(FlaxEngine.Vector2,System.Single)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Modulus(System.Single,FlaxEngine.Vector2)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The amount by which to scale the vector.</param>
            <param name="scale">The vector to scale.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Modulus(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Addition(FlaxEngine.Vector2,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Addition(System.Single,FlaxEngine.Vector2)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Subtraction(FlaxEngine.Vector2,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Subtraction(System.Single,FlaxEngine.Vector2)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Equality(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise,<c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Inequality(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,<c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Explicit(FlaxEngine.Vector2)~FlaxEngine.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector2" /> to <see cref="T:FlaxEngine.Vector3" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.op_Explicit(FlaxEngine.Vector2)~FlaxEngine.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector2" /> to <see cref="T:FlaxEngine.Vector4" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector2.Equals(FlaxEngine.Vector2@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector2" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Vector2" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Vector2" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Equals(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector2"/> are equal.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector2.Equals(FlaxEngine.Vector2)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector2" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Vector2" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Vector2" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Vector2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:FlaxEngine.Vector3">
            <summary>
            Represents a three dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.X">
            <summary>
            The X component.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Y">
            <summary>
            The Y component.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Z">
            <summary>
            The Z component.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Vector3" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Vector3" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.UnitX">
            <summary>
            The X unit <see cref="T:FlaxEngine.Vector3" /> (1, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.UnitY">
            <summary>
            The Y unit <see cref="T:FlaxEngine.Vector3" /> (0, 1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.UnitZ">
            <summary>
            The Z unit <see cref="T:FlaxEngine.Vector3" /> (0, 0, 1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.One">
            <summary>
            A <see cref="T:FlaxEngine.Vector3" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Half">
            <summary>
            A <see cref="T:FlaxEngine.Vector3" /> with all of its components set to half.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Up">
            <summary>
            A unit <see cref="T:FlaxEngine.Vector3" /> designating up (0, 1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Down">
            <summary>
            A unit <see cref="T:FlaxEngine.Vector3" /> designating down (0, -1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Left">
            <summary>
            A unit <see cref="T:FlaxEngine.Vector3" /> designating left (-1, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Right">
            <summary>
            A unit <see cref="T:FlaxEngine.Vector3" /> designating right (1, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Forward">
            <summary>
            A unit <see cref="T:FlaxEngine.Vector3" /> designating forward in a left-handed coordinate system (0, 0, 1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Backward">
            <summary>
            A unit <see cref="T:FlaxEngine.Vector3" /> designating backward in a left-handed coordinate system (0, 0, -1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Minimum">
            <summary>
            A <see cref="T:FlaxEngine.Vector3" /> with all components equal to <see cref="F:System.Single.MinValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector3.Maximum">
            <summary>
            A <see cref="T:FlaxEngine.Vector3" /> with all components equal to <see cref="F:System.Single.MaxValue"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector3" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector3" /> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.#ctor(FlaxEngine.Vector2,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector3" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.#ctor(FlaxEngine.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector3" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y and Z components.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector3" /> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, and Z components of the vector. This must be an array with three elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown when <paramref name="values" /> contains more or less than three elements.</exception>
        </member>
        <member name="P:FlaxEngine.Vector3.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.Normalized">
            <summary>
            Gets the normalized vector. Returned vector has length equal 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.IsZero">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.IsOne">
            <summary>
            Gets a value indicting whether this vector is one
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.MinValue">
            <summary>
            Gets a minimum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.MaxValue">
            <summary>
            Gets a maximum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.AvgValue">
            <summary>
            Gets an arithmetic average value of all vector components.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.ValuesSum">
            <summary>
            Gets a sum of the component values.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.Absolute">
            <summary>
            Gets a vector with values being absolute values of that vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.Negative">
            <summary>
            Gets a vector with values being opposite to values of that vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, or Z component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, and 2 for the Z component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index" /> is out of the range [0, 2].</exception>
        </member>
        <member name="P:FlaxEngine.Vector3.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks><see cref="P:FlaxEngine.Vector3.LengthSquared" /> may be preferred when only the relative length is needed and speed is of the essence.</remarks>
        </member>
        <member name="P:FlaxEngine.Vector3.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>This method may be preferred to <see cref="P:FlaxEngine.Vector3.Length" /> when only a relative length is needed and speed is of the essence.</remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector3.Negate">
            <summary>
            Reverses the direction of the vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector3.UnwindEuler">
            <summary>
            When this vector contains Euler angles (degrees), ensure that angles are between +/-180
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector3.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A three-element array containing the components of the vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Add(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Add(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Add(FlaxEngine.Vector3@,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <param name="result">The vector with added scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Add(FlaxEngine.Vector3,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Subtract(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Subtract(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Subtract(FlaxEngine.Vector3@,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Subtract(FlaxEngine.Vector3,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Subtract(System.Single@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Subtract(System.Single,FlaxEngine.Vector3)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Multiply(FlaxEngine.Vector3@,System.Single,FlaxEngine.Vector3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Multiply(FlaxEngine.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Multiply(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Multiply a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Multiply(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Multiply a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to Multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Divide(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Divides a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector (per component).</param>
            <param name="result">When the method completes, contains the divided vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Divide(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Divides a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector (per component).</param>
            <returns>The divided vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Divide(FlaxEngine.Vector3@,System.Single,FlaxEngine.Vector3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Divide(FlaxEngine.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Divide(System.Single,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Divide(System.Single,FlaxEngine.Vector3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Negate(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Negate(FlaxEngine.Vector3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Barycentric(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single,System.Single,FlaxEngine.Vector3@)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of a point specified in Barycentric
            coordinates relative to a 3D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <param name="result">When the method completes, contains the 3D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Barycentric(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of a point specified in Barycentric
            coordinates relative to a 3D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <returns>A new <see cref="T:FlaxEngine.Vector3" /> containing the 3D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Clamp(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Clamp(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Cross(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains he cross product of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Cross(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Distance(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks><see cref="M:FlaxEngine.Vector3.DistanceSquared(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)" /> may be preferred when only the relative distance is needed and speed is of the essence.</remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.Distance(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks><see cref="M:FlaxEngine.Vector3.DistanceSquared(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)" /> may be preferred when only the relative distance is needed and speed is of the essence.</remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.Distance(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks><see cref="M:FlaxEngine.Vector3.DistanceSquared(FlaxEngine.Vector3,FlaxEngine.Vector3)" /> may be preferred when only the relative distance is needed and speed is of the essence.</remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceSquared(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceSquared(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceSquared(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceXY(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the distance between two vectors on the XY plane (ignoring Z).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors in the XY plane.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceXYSquared(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors on the XY plane (ignoring Z).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors in the XY plane.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceXZ(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the distance between two vectors on the XZ plane (ignoring Y).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors in the XY plane.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceXZSquared(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors on the XZ plane (ignoring Y).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors in the XY plane.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceYZ(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the distance between two vectors on the YZ plane (ignoring X).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors in the YZ plane.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.DistanceYZSquared(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors on the YZ plane (ignoring X).
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors in the YZ plane.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.NearEqual(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single)">
            <summary>
            Tests whether one vector is near another vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near another, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.NearEqual(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single)">
            <summary>
            Tests whether one vector is near another vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near another, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Dot(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Dot(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Dot(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Normalize(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Normalize(FlaxEngine.Vector3)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.ClampLength(FlaxEngine.Vector3,System.Single)">
            <summary>
            Makes sure that Length of the output vector is always below max and above 0.
            </summary>
            <param name="vector">Input Vector.</param>
            <param name="max">Max Length</param>
        </member>
        <member name="M:FlaxEngine.Vector3.ClampLength(FlaxEngine.Vector3,System.Single,System.Single)">
            <summary>
            Makes sure that Length of the output vector is always below max and above min.
            </summary>
            <param name="vector">Input Vector.</param>
            <param name="min">Min Length</param>
            <param name="max">Max Length</param>
        </member>
        <member name="M:FlaxEngine.Vector3.ClampLength(FlaxEngine.Vector3@,System.Single,System.Single,FlaxEngine.Vector3@)">
            <summary>
            Makes sure that Length of the output vector is always below max and above min.
            </summary>
            <param name="vector">Input Vector.</param>
            <param name="min">Min Length</param>
            <param name="max">Max Length</param>
            <param name="retVect">The Return Vector</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Lerp(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single,FlaxEngine.Vector3@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned.</remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.Lerp(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned.</remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.SmoothStep(FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single,FlaxEngine.Vector3@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.SmoothStep(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Hermite(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single,FlaxEngine.Vector3@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Hermite(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.CatmullRom(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single,FlaxEngine.Vector3@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.CatmullRom(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Max(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Max(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Min(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Min(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Abs(FlaxEngine.Vector3)">
            <summary>
            Returns the absolute value of a vector.
            </summary>
            <param name="v">The value.</param>
            <returns> A vector which components are less or equal to 0.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Project(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Projects a vector onto another vector.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="onNormal">The projection normal vector.</param>
            <returns>The projected vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.ProjectOnPlane(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Projects a vector onto a plane defined by a normal orthogonal to the plane.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="planeNormal">The plane normal vector.</param>
            <returns>The projected vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Angle(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Calculates the angle (in degrees) between <paramref name="from"/> and <paramref name="to"/>. This is always the smallest value.
            </summary>
            <param name="from">The first vector.</param>
            <param name="to">The second vector.</param>
            <returns>The angle (in degrees).</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Project(FlaxEngine.Vector3@,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix@,FlaxEngine.Vector3@)">
            <summary>
            Projects a 3D vector from object space into screen space.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <param name="result">When the method completes, contains the vector in screen space.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Project(FlaxEngine.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix)">
            <summary>
            Projects a 3D vector from object space into screen space.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <returns>The vector in screen space.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Unproject(FlaxEngine.Vector3@,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix@,FlaxEngine.Vector3@)">
            <summary>
            Projects a 3D vector from screen space into object space.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <param name="result">When the method completes, contains the vector in object space.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Unproject(FlaxEngine.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,FlaxEngine.Matrix)">
            <summary>
            Projects a 3D vector from screen space into object space.
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <returns>The vector in object space.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Reflect(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="result">When the method completes, contains the reflected vector.</param>
            <remarks>
            Reflect only gives the direction of a reflection off a surface, it does not determine
            whether the original vector was close enough to the surface to hit it.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.Reflect(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.Orthogonalize(FlaxEngine.Vector3[],FlaxEngine.Vector3[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>
              Orthogonalization is the process of making all vectors orthogonal to each other. This
              means that any given vector in the list will be orthogonal to any other given vector in the
              list.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting vectors
              tend to be numerically unstable. The numeric stability decreases according to the vectors
              position in the list so that the first vector is the most stable and the last vector is the
              least stable.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source" /> or <paramref name="destination" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination" /> is shorter in length than <paramref name="source" />.</exception>
        </member>
        <member name="M:FlaxEngine.Vector3.Orthonormalize(FlaxEngine.Vector3[],FlaxEngine.Vector3[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>
              Orthonormalization is the process of making all vectors orthogonal to each
              other and making all vectors of unit length. This means that any given vector will
              be orthogonal to any other given vector in the list.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting vectors
              tend to be numerically unstable. The numeric stability decreases according to the vectors
              position in the list so that the first vector is the most stable and the last vector is the
              least stable.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source" /> or <paramref name="destination" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination" /> is shorter in length than <paramref name="source" />.</exception>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3@,FlaxEngine.Quaternion@,FlaxEngine.Vector3@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector3" />.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3,FlaxEngine.Quaternion)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:FlaxEngine.Vector3" />.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3[],FlaxEngine.Quaternion@,FlaxEngine.Vector3[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <param name="destination">The array for which the transformed vectors are stored. This array may be the same array as <paramref name="source" />.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source" /> or <paramref name="destination" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination" /> is shorter in length than <paramref name="source" />.</exception>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3@,FlaxEngine.Matrix3x3@,FlaxEngine.Vector3@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:FlaxEngine.Matrix3x3"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix3x3"/>.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector3"/>.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3,FlaxEngine.Matrix3x3)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:FlaxEngine.Matrix3x3"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix3x3"/>.</param>
            <returns>The transformed <see cref="T:FlaxEngine.Vector3"/>.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3@,FlaxEngine.Matrix@,FlaxEngine.Vector3@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector3" />.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3@,FlaxEngine.Matrix@,FlaxEngine.Vector4@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector4" />.</param>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3,FlaxEngine.Matrix)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <returns>The transformed <see cref="T:FlaxEngine.Vector4" />.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Transform(FlaxEngine.Vector3[],FlaxEngine.Matrix@,FlaxEngine.Vector4[])">
            <summary>
            Transforms an array of 3D vectors by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="destination">The array for which the transformed vectors are stored.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source" /> or <paramref name="destination" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination" /> is shorter in length than <paramref name="source" />.</exception>
        </member>
        <member name="M:FlaxEngine.Vector3.TransformCoordinate(FlaxEngine.Vector3@,FlaxEngine.Matrix@,FlaxEngine.Vector3@)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.TransformCoordinate(FlaxEngine.Vector3,FlaxEngine.Matrix)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.TransformCoordinate(FlaxEngine.Vector3[],FlaxEngine.Matrix@,FlaxEngine.Vector3[])">
            <summary>
            Performs a coordinate transformation on an array of vectors using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="source">The array of coordinate vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="destination">The array for which the transformed vectors are stored. This array may be the same array as <paramref name="source" />.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source" /> or <paramref name="destination" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination" /> is shorter in length than
            <paramref name="source" />.
            </exception>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the w component to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.TransformNormal(FlaxEngine.Vector3@,FlaxEngine.Matrix@,FlaxEngine.Vector3@)">
            <summary>
            Performs a normal transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed normal.</param>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.TransformNormal(FlaxEngine.Vector3,FlaxEngine.Matrix)">
            <summary>
            Performs a normal transformation using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <returns>The transformed normal.</returns>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.TransformNormal(FlaxEngine.Vector3[],FlaxEngine.Matrix@,FlaxEngine.Vector3[])">
            <summary>
            Performs a normal transformation on an array of vectors using the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="source">The array of normal vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="destination">The array for which the transformed vectors are stored. This array may be the same array as <paramref name="source" />.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source" /> or <paramref name="destination" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination" /> is shorter in length than <paramref name="source" />.</exception>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth column of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often preferred for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Addition(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Multiply(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication equivalent to
            <see cref="M:FlaxEngine.Vector3.Multiply(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)" />.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplication of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_UnaryPlus(FlaxEngine.Vector3)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchanged).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Subtraction(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_UnaryNegation(FlaxEngine.Vector3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Multiply(FlaxEngine.Vector3,FlaxEngine.Quaternion)">
            <summary>
            Transforms a vector by the given rotation.
            </summary>
            <param name="vector">The vector to transform.</param>
            <param name="rotation">The quaternion.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Multiply(System.Single,FlaxEngine.Vector3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Multiply(FlaxEngine.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Division(FlaxEngine.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Division(System.Single,FlaxEngine.Vector3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Division(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Modulus(FlaxEngine.Vector3,System.Single)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Modulus(System.Single,FlaxEngine.Vector3)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The amount by which to scale the vector.</param>
            <param name="scale">The vector to scale.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Modulus(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Addition(FlaxEngine.Vector3,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Addition(System.Single,FlaxEngine.Vector3)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Subtraction(FlaxEngine.Vector3,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with added scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Subtraction(System.Single,FlaxEngine.Vector3)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Equality(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Inequality(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Explicit(FlaxEngine.Vector3)~FlaxEngine.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector3" /> to <see cref="T:FlaxEngine.Vector2" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.op_Explicit(FlaxEngine.Vector3)~FlaxEngine.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector3" /> to <see cref="T:FlaxEngine.Vector4" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector3.Equals(FlaxEngine.Vector3@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector3" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Vector3" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Vector3" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Equals(FlaxEngine.Vector3)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector3" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Vector3" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Vector3" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Vector3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:FlaxEngine.Vector4">
            <summary>
            Represents a four dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.X">
            <summary>
            The X component.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.Y">
            <summary>
            The Y component.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.Z">
            <summary>
            The Z component.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.W">
            <summary>
            The W component.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Vector4" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Vector4" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.UnitX">
            <summary>
            The X unit <see cref="T:FlaxEngine.Vector4" /> (1, 0, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.UnitY">
            <summary>
            The Y unit <see cref="T:FlaxEngine.Vector4" /> (0, 1, 0, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.UnitZ">
            <summary>
            The Z unit <see cref="T:FlaxEngine.Vector4" /> (0, 0, 1, 0).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.UnitW">
            <summary>
            The W unit <see cref="T:FlaxEngine.Vector4" /> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.Half">
            <summary>
            A <see cref="T:FlaxEngine.Vector4" /> with all of its components set to half.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.One">
            <summary>
            A <see cref="T:FlaxEngine.Vector4" /> with all of its components set to one.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.Minimum">
            <summary>
            A <see cref="T:FlaxEngine.Vector4" /> with all components equal to <see cref="F:System.Single.MinValue"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Vector4.Maximum">
            <summary>
            A <see cref="T:FlaxEngine.Vector4" /> with all components equal to <see cref="F:System.Single.MaxValue"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector4" /> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector4" /> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.#ctor(FlaxEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector4" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.#ctor(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector4" /> struct.
            </summary>
            <param name="xy">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="zw">A vector containing the values with which to initialize the Z and W components.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.#ctor(FlaxEngine.Vector2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector4" /> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Vector4" /> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, Z, and W components of the vector. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values" /> contains more or less than four elements.</exception>
        </member>
        <member name="P:FlaxEngine.Vector4.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector4.IsZero">
            <summary>
            Gets a value indicting whether this vector is zero
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector4.IsOne">
            <summary>
            Gets a value indicting whether this vector is one
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector4.MinValue">
            <summary>
            Gets a minimum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector4.MaxValue">
            <summary>
            Gets a maximum component value
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector4.AvgValue">
            <summary>
            Gets an arithmetic average value of all vector components.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector4.ValuesSum">
            <summary>
            Gets a sum of the component values.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector4.Absolute">
            <summary>
            Gets a vector with values being absolute values of that vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector4.Negative">
            <summary>
            Gets a vector with values being opposite to values of that vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.Vector4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index" /> is out of the range [0,3].</exception>
        </member>
        <member name="P:FlaxEngine.Vector4.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks><see cref="P:FlaxEngine.Vector4.LengthSquared" /> may be preferred when only the relative length is needed and speed is of the essence.</remarks>
        </member>
        <member name="P:FlaxEngine.Vector4.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>This method may be preferred to <see cref="P:FlaxEngine.Vector4.Length" /> when only a relative length is needed and speed is of the essence.</remarks>
        </member>
        <member name="M:FlaxEngine.Vector4.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector4.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A four-element array containing the components of the vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Add(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Add(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Add(FlaxEngine.Vector4@,System.Single@,FlaxEngine.Vector4@)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <param name="result">The vector with added scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Add(FlaxEngine.Vector4,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be added to elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Subtract(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Subtract(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Subtract(FlaxEngine.Vector4@,System.Single@,FlaxEngine.Vector4@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Subtract(FlaxEngine.Vector4,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The input vector</param>
            <param name="right">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Subtract(System.Single@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <param name="result">The vector with subtracted scalar for each element.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Subtract(System.Single,FlaxEngine.Vector4)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="left">The scalar value to be subtracted from elements</param>
            <param name="right">The input vector.</param>
            <returns>The vector with subtracted scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Multiply(FlaxEngine.Vector4@,System.Single,FlaxEngine.Vector4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Multiply(FlaxEngine.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Multiply(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the multiplied vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Multiply(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Divide(FlaxEngine.Vector4@,System.Single,FlaxEngine.Vector4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Divide(FlaxEngine.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Divide(System.Single,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Divide(System.Single,FlaxEngine.Vector4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Negate(FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Negate(FlaxEngine.Vector4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Barycentric(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single,System.Single,FlaxEngine.Vector4@)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <param name="result">When the method completes, contains the 4D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Barycentric(FlaxEngine.Vector4,FlaxEngine.Vector4,FlaxEngine.Vector4,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <returns>A new <see cref="T:FlaxEngine.Vector4" /> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Clamp(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Clamp(FlaxEngine.Vector4,FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Distance(FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks><see cref="M:FlaxEngine.Vector4.DistanceSquared(FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single@)" /> may be preferred when only the relative distance is needed and speed is of the essence.</remarks>
        </member>
        <member name="M:FlaxEngine.Vector4.Distance(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks><see cref="M:FlaxEngine.Vector4.DistanceSquared(FlaxEngine.Vector4,FlaxEngine.Vector4)" /> may be preferred when only the relative distance is needed and speed is of the essence.</remarks>
        </member>
        <member name="M:FlaxEngine.Vector4.DistanceSquared(FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector4.DistanceSquared(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>
            Distance squared is the value before taking the square root.
            Distance squared can often be used in place of distance if relative comparisons are being made.
            For example, consider three points A, B, and C. To determine whether B or C is further from A,
            compare the distance between A and B to the distance between A and C. Calculating the two distances
            involves two square roots, which are computationally expensive. However, using distance squared
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Vector4.NearEqual(FlaxEngine.Vector4,FlaxEngine.Vector4,System.Single)">
            <summary>
            Tests whether one vector is near another vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near another, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.NearEqual(FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single)">
            <summary>
            Tests whether one vector is near another vector.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <param name="epsilon">The epsilon.</param>
            <returns><c>true</c> if left and right are near another, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Dot(FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Dot(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Normalize(FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Normalize(FlaxEngine.Vector4)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.ClampLength(FlaxEngine.Vector4,System.Single)">
            <summary>
            Makes sure that Length of the output vector is always below max and above 0.
            </summary>
            <param name="vector">Input Vector.</param>
            <param name="max">Max Length</param>
        </member>
        <member name="M:FlaxEngine.Vector4.ClampLength(FlaxEngine.Vector4,System.Single,System.Single)">
            <summary>
            Makes sure that Length of the output vector is always below max and above min.
            </summary>
            <param name="vector">Input Vector.</param>
            <param name="min">Min Length</param>
            <param name="max">Max Length</param>
        </member>
        <member name="M:FlaxEngine.Vector4.ClampLength(FlaxEngine.Vector4@,System.Single,System.Single,FlaxEngine.Vector4@)">
            <summary>
            Makes sure that Length of the output vector is always below max and above min.
            </summary>
            <param name="vector">Input Vector.</param>
            <param name="min">Min Length</param>
            <param name="max">Max Length</param>
            <param name="retVect">The Return Vector</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Lerp(FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single,FlaxEngine.Vector4@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned.</remarks>
        </member>
        <member name="M:FlaxEngine.Vector4.Lerp(FlaxEngine.Vector4,FlaxEngine.Vector4,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned.</remarks>
        </member>
        <member name="M:FlaxEngine.Vector4.SmoothStep(FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single,FlaxEngine.Vector4@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.SmoothStep(FlaxEngine.Vector4,FlaxEngine.Vector4,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Hermite(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single,FlaxEngine.Vector4@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Hermite(FlaxEngine.Vector4,FlaxEngine.Vector4,FlaxEngine.Vector4,FlaxEngine.Vector4,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.CatmullRom(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@,System.Single,FlaxEngine.Vector4@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.CatmullRom(FlaxEngine.Vector4,FlaxEngine.Vector4,FlaxEngine.Vector4,FlaxEngine.Vector4,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Max(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Max(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Min(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Min(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Abs(FlaxEngine.Vector4)">
            <summary>
            Returns the absolute value of a vector.
            </summary>
            <param name="v">The value.</param>
            <returns> A vector which components are less or equal to 0.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Orthogonalize(FlaxEngine.Vector4[],FlaxEngine.Vector4[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>
              Orthogonalization is the process of making all vectors orthogonal to each other. This
              means that any given vector in the list will be orthogonal to any other given vector in the
              list.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting vectors
              tend to be numerically unstable. The numeric stability decreases according to the vectors
              position in the list so that the first vector is the most stable and the last vector is the
              least stable.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source" /> or <paramref name="destination" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination" /> is shorter in length than <paramref name="source" />.</exception>
        </member>
        <member name="M:FlaxEngine.Vector4.Orthonormalize(FlaxEngine.Vector4[],FlaxEngine.Vector4[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>
              Orthonormalization is the process of making all vectors orthogonal to each
              other and making all vectors of unit length. This means that any given vector will
              be orthogonal to any other given vector in the list.
            </para>
            <para>
              Because this method uses the modified Gram-Schmidt process, the resulting vectors
              tend to be numerically unstable. The numeric stability decreases according to the vectors
              position in the list so that the first vector is the most stable and the last vector is the
              least stable.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source" /> or <paramref name="destination" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination" /> is shorter in length than <paramref name="source" />.</exception>
        </member>
        <member name="M:FlaxEngine.Vector4.Transform(FlaxEngine.Vector4@,FlaxEngine.Quaternion@,FlaxEngine.Vector4@)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector4" />.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Transform(FlaxEngine.Vector4,FlaxEngine.Quaternion)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:FlaxEngine.Vector4" />.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Transform(FlaxEngine.Vector4[],FlaxEngine.Quaternion@,FlaxEngine.Vector4[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:FlaxEngine.Quaternion" /> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:FlaxEngine.Quaternion" /> rotation to apply.</param>
            <param name="destination">The array for which the transformed vectors are stored. This array may be the same array as <paramref name="source" />.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source" /> or <paramref name="destination" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination" /> is shorter in length than <paramref name="source" />.</exception>
        </member>
        <member name="M:FlaxEngine.Vector4.Transform(FlaxEngine.Vector4@,FlaxEngine.Matrix@,FlaxEngine.Vector4@)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:FlaxEngine.Vector4" />.</param>
        </member>
        <member name="M:FlaxEngine.Vector4.Transform(FlaxEngine.Vector4,FlaxEngine.Matrix)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <returns>The transformed <see cref="T:FlaxEngine.Vector4" />.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Transform(FlaxEngine.Vector4[],FlaxEngine.Matrix@,FlaxEngine.Vector4[])">
            <summary>
            Transforms an array of 4D vectors by the given <see cref="T:FlaxEngine.Matrix" />.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:FlaxEngine.Matrix" />.</param>
            <param name="destination">The array for which the transformed vectors are stored. This array may be the same array as <paramref name="source" />.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source" /> or <paramref name="destination" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination" /> is shorter in length than <paramref name="source" />.</exception>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Addition(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Multiply(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Multiplies a vector with another by performing component-wise multiplication equivalent to
            <see cref="M:FlaxEngine.Vector4.Multiply(FlaxEngine.Vector4@,FlaxEngine.Vector4@,FlaxEngine.Vector4@)" />.
            </summary>
            <param name="left">The first vector to multiply.</param>
            <param name="right">The second vector to multiply.</param>
            <returns>The multiplication of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_UnaryPlus(FlaxEngine.Vector4)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchanged).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Subtraction(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_UnaryNegation(FlaxEngine.Vector4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Multiply(System.Single,FlaxEngine.Vector4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Multiply(FlaxEngine.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Division(FlaxEngine.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Division(System.Single,FlaxEngine.Vector4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="value">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Division(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Modulus(FlaxEngine.Vector4,System.Single)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Modulus(System.Single,FlaxEngine.Vector4)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The amount by which to scale the vector.</param>
            <param name="scale">The vector to scale.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Modulus(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Remainder of value divided by scale.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The remained vector.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Addition(FlaxEngine.Vector4,System.Single)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Addition(System.Single,FlaxEngine.Vector4)">
            <summary>
            Perform a component-wise addition
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be added on elements</param>
            <returns>The vector with added scalar for each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Subtraction(FlaxEngine.Vector4,System.Single)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Subtraction(System.Single,FlaxEngine.Vector4)">
            <summary>
            Perform a component-wise subtraction
            </summary>
            <param name="value">The input vector.</param>
            <param name="scalar">The scalar value to be subtracted from elements</param>
            <returns>The vector with subtracted scalar from each element.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Equality(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Inequality(FlaxEngine.Vector4,FlaxEngine.Vector4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Explicit(FlaxEngine.Vector4)~FlaxEngine.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector4" /> to <see cref="T:FlaxEngine.Vector2" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.op_Explicit(FlaxEngine.Vector4)~FlaxEngine.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector4" /> to <see cref="T:FlaxEngine.Vector3" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:FlaxEngine.Vector4.Equals(FlaxEngine.Vector4@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Equals(FlaxEngine.Vector4)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Vector4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:FlaxEngine.LayersMask">
            <summary>
            The objects layers selection mask (from layers and tags settings). Uses 1 bit per layer (up to 32 layers).
            </summary>
        </member>
        <member name="F:FlaxEngine.LayersMask.Mask">
            <summary>
            The layers selection mask.
            </summary>
        </member>
        <member name="M:FlaxEngine.LayersMask.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.LayersMask"/> struct.
            </summary>
            <param name="mask">The bit mask.</param>
        </member>
        <member name="M:FlaxEngine.LayersMask.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.LayersMask"/> struct.
            </summary>
            <param name="mask">The bit mask.</param>
        </member>
        <member name="M:FlaxEngine.LayersMask.HasLayer(System.Int32)">
            <summary>
            Determines whether the specified layer index is set in the mask.
            </summary>
            <param name="layerIndex">Index of the layer (zero-based).</param>
            <returns><c>true</c> if the specified layer is set; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.LayersMask.HasLayer(System.String)">
            <summary>
            Determines whether the specified layer is set in the mask.
            </summary>
            <param name="layerName">Name of the layer (from layers settings).</param>
            <returns><c>true</c> if the specified layer is set; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.LayersMask.op_Addition(FlaxEngine.LayersMask,FlaxEngine.LayersMask)">
            <summary>
            Adds two masks.
            </summary>
            <param name="left">The left mask.</param>
            <param name="right">The right mask.</param>
            <returns>The sum of the two masks.</returns>
        </member>
        <member name="M:FlaxEngine.LayersMask.op_Subtraction(FlaxEngine.LayersMask,FlaxEngine.LayersMask)">
            <summary>
            Removes one mask from another.
            </summary>
            <param name="left">The left mask.</param>
            <param name="right">The right mask.</param>
            <returns>The left mask without right mask.</returns>
        </member>
        <member name="M:FlaxEngine.LayersMask.op_BitwiseOr(FlaxEngine.LayersMask,FlaxEngine.LayersMask)">
            <summary>
            Performance bitwise OR of the masks.
            </summary>
            <param name="left">The left mask.</param>
            <param name="right">The right mask.</param>
            <returns>The sum of the two masks.</returns>
        </member>
        <member name="M:FlaxEngine.LayersMask.op_BitwiseAnd(FlaxEngine.LayersMask,FlaxEngine.LayersMask)">
            <summary>
            Performance bitwise AND of the masks.
            </summary>
            <param name="left">The left mask.</param>
            <param name="right">The right mask.</param>
            <returns>The conjunction of the two masks.</returns>
        </member>
        <member name="M:FlaxEngine.LayersMask.op_ExclusiveOr(FlaxEngine.LayersMask,FlaxEngine.LayersMask)">
            <summary>
            Performance bitwise XOR of the masks.
            </summary>
            <param name="left">The left mask.</param>
            <param name="right">The right mask.</param>
            <returns>The difference of the two masks.</returns>
        </member>
        <member name="M:FlaxEngine.LayersMask.op_OnesComplement(FlaxEngine.LayersMask)">
            <summary>
            Performance bitwise NOT of the mask.
            </summary>
            <param name="left">The mask.</param>
            <returns>The negated mask.</returns>
        </member>
        <member name="M:FlaxEngine.LayersMask.op_Implicit(FlaxEngine.LayersMask)~System.UInt32">
            <summary>
            Performs an implicit conversion from <see cref="T:FlaxEngine.LayersMask"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="mask">The mask.</param>
            <returns>The mask value.</returns>
        </member>
        <member name="M:FlaxEngine.LayersMask.op_Equality(FlaxEngine.LayersMask,FlaxEngine.LayersMask)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.LayersMask.op_Inequality(FlaxEngine.LayersMask,FlaxEngine.LayersMask)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.LayersMask.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.LayersMask.ToString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.LayersMask.Equals(FlaxEngine.LayersMask)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="other">The other value to compare.</param>
            <returns>True if both values are equal, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.LayersMask.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.LayersMask.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.LayersMask.CompareTo(FlaxEngine.LayersMask)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Engine">
            <summary>
            The main engine class.
            </summary>
        </member>
        <member name="P:FlaxEngine.Engine.StartupTime">
            <summary>
            The engine start time (local time).
            </summary>
        </member>
        <member name="P:FlaxEngine.Engine.HasFocus">
            <summary>
            True if app has focus (one of the windows is being focused).
            </summary>
        </member>
        <member name="P:FlaxEngine.Engine.FrameCount">
            <summary>
            Gets the current frame count since the start of the game.
            </summary>
        </member>
        <member name="P:FlaxEngine.Engine.UpdateGraph">
            <summary>
            Task graph for engine update.
            </summary>
        </member>
        <member name="P:FlaxEngine.Engine.IsHeadless">
            <summary>
            Returns true if engine is running without main window (aka headless mode).
            </summary>
        </member>
        <member name="P:FlaxEngine.Engine.IsEditor">
            <summary>
            Returns true if the game is running in the Flax Editor; false if run from any deployment target. Use this property to perform Editor-related actions.
            </summary>
        </member>
        <member name="P:FlaxEngine.Engine.FramesPerSecond">
            <summary>
            Gets the amount of frames rendered during last second known as Frames Per Second. User scripts updates or fixed updates for physics may run at a different frequency than scene rendering. Use this property to get an accurate amount of frames rendered during the last second.
            </summary>
        </member>
        <member name="P:FlaxEngine.Engine.CommandLine">
            <summary>
            Gets the application command line arguments.
            </summary>
        </member>
        <member name="P:FlaxEngine.Engine.HasGameViewportFocus">
            <summary>
            Checks whenever the game viewport is focused by the user (eg. can receive input).
            </summary>
        </member>
        <member name="M:FlaxEngine.Engine.RequestExit(System.Int32)">
            <summary>
            Requests normal engine exit.
            </summary>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:FlaxEngine.Engine.GetCustomSettings(System.String)">
            <summary>
            Gets the custom game settings asset referenced by the given key.
            </summary>
            <param name="key">The settings key.</param>
            <returns>The returned asset. Returns null if key is invalid, cannot load asset or data is missing.</returns>
        </member>
        <member name="T:FlaxEngine.GameplayGlobals">
            <summary>
            The global gameplay variables container asset that can be accessed across whole project.
            </summary>
        </member>
        <member name="M:FlaxEngine.GameplayGlobals.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GameplayGlobals"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GameplayGlobals.Values">
            <summary>
            Gets or sets the values (run-time).
            </summary>
        </member>
        <member name="P:FlaxEngine.GameplayGlobals.DefaultValues">
            <summary>
            Gets or sets the default values (edit-time).
            </summary>
        </member>
        <member name="M:FlaxEngine.GameplayGlobals.GetValue(System.String)">
            <summary>
            Gets the value of the global variable (it must be added first).
            </summary>
            <param name="name">The variable name.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.GameplayGlobals.SetValue(System.String,System.Object)">
            <summary>
            Sets the value of the global variable (it must be added first).
            </summary>
            <param name="name">The variable name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEngine.GameplayGlobals.ResetValues">
            <summary>
            Resets the variables values to default values.
            </summary>
        </member>
        <member name="T:FlaxEngine.Globals">
            <summary>
            Global engine variables container.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.StartupFolder">
            <summary>
            Main engine directory path.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.TemporaryFolder">
            <summary>
            Temporary folder path.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.ProjectFolder">
            <summary>
            Directory that contains project
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.ProductLocalFolder">
            <summary>
            The product local data directory.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.BinariesFolder">
            <summary>
            The game executable files location.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.ProjectContentFolder">
            <summary>
            Project content directory path
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.MonoPath">
            <summary>
            Mono library folder path
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.MainThreadID">
            <summary>
            Main Engine thread id
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.EngineVersion">
            <summary>
            The full engine version.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.EngineBuildNumber">
            <summary>
            The engine build version.
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.ProductName">
            <summary>
            The short name of the product (can be `Flax Editor` or name of the game e.g. `My Space Shooter`).
            </summary>
        </member>
        <member name="P:FlaxEngine.Globals.CompanyName">
            <summary>
            The company name (short name used for app data directory).
            </summary>
        </member>
        <member name="T:FlaxEngine.Screen">
            <summary>
            Helper class to access display information.
            </summary>
        </member>
        <member name="P:FlaxEngine.Screen.IsFullscreen">
            <summary>
            Gets or sets the fullscreen mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.Screen.Size">
            <summary>
            Gets or sets the window size.
            </summary>
        </member>
        <member name="P:FlaxEngine.Screen.CursorVisible">
            <summary>
            Gets or sets the cursor visible flag.
            </summary>
        </member>
        <member name="P:FlaxEngine.Screen.CursorLock">
            <summary>
            Gets or sets the cursor lock mode.
            </summary>
        </member>
        <member name="M:FlaxEngine.Screen.ScreenToGameViewport(FlaxEngine.Vector2)">
            <summary>
            Converts the screen-space position to the game viewport position.
            </summary>
            <param name="screenPos">The screen-space position.</param>
            <returns>The game viewport position.</returns>
        </member>
        <member name="M:FlaxEngine.Screen.GameViewportToScreen(FlaxEngine.Vector2)">
            <summary>
            Converts the game viewport position to the screen-space position.
            </summary>
            <param name="viewportPos">The game viewport position.</param>
            <returns>The screen-space position.</returns>
        </member>
        <member name="T:FlaxEngine.Time">
            <summary>
            Game ticking and timing system.
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.StartupTime">
            <summary>
            The time at which the game started (UTC local).
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.UpdateFPS">
            <summary>
            The target amount of the game logic updates per second (script updates frequency).
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.PhysicsFPS">
            <summary>
            The target amount of the physics simulation updates per second (also fixed updates frequency).
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.DrawFPS">
            <summary>
            The target amount of the frames rendered per second (target game FPS).
            </summary>
            <remarks>
            To get the actual game FPS use <see cref="P:FlaxEngine.Engine.FramesPerSecond"/>
            </remarks>
        </member>
        <member name="P:FlaxEngine.Time.TimeScale">
            <summary>
            The game time scale factor. Default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.GamePaused">
            <summary>
            Gets or sets the value indicating whenever game logic is paused (physics, script updates, etc.).
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.DeltaTime">
            <summary>
            Gets time in seconds it took to complete the last frame, <see cref="P:FlaxEngine.Time.TimeScale"/> dependent.
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.GameTime">
            <summary>
            Gets time at the beginning of this frame. This is the time in seconds since the start of the game.
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.UnscaledDeltaTime">
            <summary>
            Gets timeScale-independent time in seconds it took to complete the last frame.
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.UnscaledGameTime">
            <summary>
            Gets timeScale-independent time at the beginning of this frame. This is the time in seconds since the start of the game.
            </summary>
        </member>
        <member name="P:FlaxEngine.Time.TimeSinceStartup">
            <summary>
            Gets the time since startup in seconds (unscaled).
            </summary>
        </member>
        <member name="M:FlaxEngine.Time.SetFixedDeltaTime(System.Boolean,System.Single)">
            <summary>
            Sets the fixed FPS for game logic updates (draw and update).
            </summary>
            <param name="enable">True if enable this feature, otherwise false.</param>
            <param name="value">The fixed draw/update rate for the time.</param>
        </member>
        <member name="T:FlaxEngine.Foliage">
            <summary>
            Represents a foliage actor that contains a set of instanced meshes.
            </summary>
            <seealso cref="T:FlaxEngine.Actor" />
        </member>
        <member name="M:FlaxEngine.Foliage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Foliage"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Foliage.FoliageTypes">
            <summary>
            The foliage instances types used by the current foliage actor. It's read-only.
            </summary>
        </member>
        <member name="P:FlaxEngine.Foliage.InstancesCount">
            <summary>
            Gets the total amount of the instanced of foliage.
            </summary>
        </member>
        <member name="P:FlaxEngine.Foliage.FoliageTypesCount">
            <summary>
            Gets the total amount of the types of foliage.
            </summary>
        </member>
        <member name="P:FlaxEngine.Foliage.GlobalDensityScale">
            <summary>
            Gets or sets the global density scale for all foliage instances. The default value is 1. Use values from range 0-1. Lower values decrease amount of foliage instances in-game. Use it to tweak game performance for slower devices.
            </summary>
        </member>
        <member name="M:FlaxEngine.Foliage.GetInstance(System.Int32)">
            <summary>
            Gets the foliage instance by index.
            </summary>
            <param name="index">The zero-based index of the foliage instance.</param>
            <returns>The foliage instance data.</returns>
        </member>
        <member name="M:FlaxEngine.Foliage.GetFoliageType(System.Int32)">
            <summary>
            Gets the foliage type.
            </summary>
            <param name="index">The zero-based index of the foliage type.</param>
            <returns>The foliage type.</returns>
        </member>
        <member name="M:FlaxEngine.Foliage.AddFoliageType(FlaxEngine.Model)">
            <summary>
            Adds the type of the foliage.
            </summary>
            <param name="model">The model to assign. It cannot be null nor already used by the other instance type (it must be unique within the given foliage actor).</param>
        </member>
        <member name="M:FlaxEngine.Foliage.RemoveFoliageType(System.Int32)">
            <summary>
            Removes the foliage instance type and all foliage instances using this type.
            </summary>
            <param name="index">The zero-based index of the foliage instance type.</param>
        </member>
        <member name="M:FlaxEngine.Foliage.GetFoliageTypeInstancesCount(System.Int32)">
            <summary>
            Gets the total amount of the instanced that use the given foliage type.
            </summary>
            <param name="index">The zero-based index of the foliage type.</param>
            <returns>The foliage type instances count.</returns>
        </member>
        <member name="M:FlaxEngine.Foliage.AddInstance(FlaxEngine.FoliageInstance@)">
            <summary>
            Adds the new foliage instance. Ensure to always call <see cref="M:FlaxEngine.Foliage.RebuildClusters"/> after editing foliage to sync cached data (call it once after editing one or more instances).
            </summary>
            <remarks>Input instance bounds, instance random and world matrix are ignored (recalculated).</remarks>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:FlaxEngine.Foliage.RemoveInstance(System.Int32)">
            <summary>
            Removes the foliage instance. Ensure to always call <see cref="M:FlaxEngine.Foliage.RebuildClusters"/> after editing foliage to sync cached data (call it once after editing one or more instances).
            </summary>
            <param name="index">The zero-based index of the instance to remove.</param>
        </member>
        <member name="M:FlaxEngine.Foliage.SetInstanceTransform(System.Int32,FlaxEngine.Transform@)">
            <summary>
            Sets the foliage instance transformation. Ensure to always call <see cref="M:FlaxEngine.Foliage.RebuildClusters"/> after editing foliage to sync cached data (call it once after editing one or more instances).
            </summary>
            <param name="index">The zero-based index of the foliage instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEngine.Foliage.RebuildClusters">
            <summary>
            Rebuilds the foliage clusters used as internal acceleration structures (quad tree).
            </summary>
        </member>
        <member name="M:FlaxEngine.Foliage.UpdateCullDistance">
            <summary>
            Updates the cull distance for all foliage instances and for created clusters.
            </summary>
        </member>
        <member name="M:FlaxEngine.Foliage.Intersects(FlaxEngine.Ray@,System.Single@,FlaxEngine.Vector3@,System.Int32@)">
            <summary>
            Determines if there is an intersection between the current object or any it's child and a ray.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection (if any valid).</param>
            <param name="normal">When the method completes, contains the intersection surface normal vector (if any valid).</param>
            <param name="instanceIndex">When the method completes, contains zero-based index of the foliage instance that is the closest to the ray.</param>
            <returns>True whether the two objects intersected, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.FoliageInstance">
            <summary>
            Foliage instanced mesh instance. Packed data with very little of logic. Managed by the foliage chunks and foliage actor itself.
            </summary>
        </member>
        <member name="F:FlaxEngine.FoliageInstance.Transform">
            <summary>
            The local-space transformation of the mesh relative to the foliage actor.
            </summary>
        </member>
        <member name="F:FlaxEngine.FoliageInstance.World">
            <summary>
            The cached world transformation matrix of this instance.
            </summary>
        </member>
        <member name="F:FlaxEngine.FoliageInstance.Type">
            <summary>
            The foliage type index. Foliage types are hold in foliage actor and shared by instances using the same model.
            </summary>
        </member>
        <member name="F:FlaxEngine.FoliageInstance.Random">
            <summary>
            The per-instance random value from range [0;1].
            </summary>
        </member>
        <member name="F:FlaxEngine.FoliageInstance.Bounds">
            <summary>
            The cached instance bounds (in world space).
            </summary>
        </member>
        <member name="T:FlaxEngine.FoliageScalingModes">
            <summary>
            The foliage instances scaling modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.FoliageScalingModes.Uniform">
            <summary>
            The uniform scaling. All axes are scaled the same.
            </summary>
        </member>
        <member name="F:FlaxEngine.FoliageScalingModes.Free">
            <summary>
            The free scaling. Each axis can have custom scale.
            </summary>
        </member>
        <member name="F:FlaxEngine.FoliageScalingModes.LockXZ">
            <summary>
            The lock XZ plane axis. Axes X and Z are constrained to-gather and axis Y is free.
            </summary>
        </member>
        <member name="F:FlaxEngine.FoliageScalingModes.LockXY">
            <summary>
            The lock XY plane axis. Axes X and Y are constrained to-gather and axis Z is free.
            </summary>
        </member>
        <member name="F:FlaxEngine.FoliageScalingModes.LockYZ">
            <summary>
            The lock YZ plane axis. Axes Y and Z are constrained to-gather and axis X is free.
            </summary>
        </member>
        <member name="T:FlaxEngine.FoliageType">
            <summary>
            Foliage mesh instances type descriptor. Defines the shared properties of the spawned mesh instances.
            </summary>
        </member>
        <member name="M:FlaxEngine.FoliageType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FoliageType"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.Foliage">
            <summary>
            The parent foliage actor.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.Index">
            <summary>
            The foliage type index.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.Model">
            <summary>
            The model to draw by the instances.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.CullDistance">
            <summary>
            The per-instance cull distance.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.CullDistanceRandomRange">
            <summary>
            The per-instance cull distance randomization range (randomized per instance and added to master CullDistance value).
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.ScaleInLightmap">
            <summary>
            The scale in lightmap (for instances of this foliage type). Can be used to adjust static lighting quality for the foliage instances.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.DrawModes">
            <summary>
            The draw passes to use for rendering this foliage type.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.ShadowsMode">
            <summary>
            The shadows casting mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PaintDensity">
            <summary>
            The foliage instances density defined in instances count per 1000x1000 units area.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PaintRadius">
            <summary>
            The minimum radius between foliage instances.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PaintGroundSlopeAngleMin">
            <summary>
            The minimum ground slope angle to paint foliage on it (in degrees).
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PaintGroundSlopeAngleMax">
            <summary>
            The maximum ground slope angle to paint foliage on it (in degrees).
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PaintScaling">
            <summary>
            The scaling mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PaintScaleMin">
            <summary>
            The scale minimum values per axis.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PaintScaleMax">
            <summary>
            The scale maximum values per axis.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PlacementOffsetY">
            <summary>
            The per-instance random offset range on axis Y.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PlacementRandomPitchAngle">
            <summary>
            The random pitch angle range (uniform in both ways around normal vector).
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PlacementRandomRollAngle">
            <summary>
            The random roll angle range (uniform in both ways around normal vector).
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.DensityScalingScale">
            <summary>
            The density scaling scale applied to the global scale for the foliage instances of this type. Can be used to boost or reduce density scaling effect on this foliage type. Default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.ReceiveDecals">
            <summary>
            Determines whenever this meshes can receive decals.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.UseDensityScaling">
            <summary>
            Flag used to determinate whenever use global foliage density scaling for instances of this foliage type.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PlacementAlignToNormal">
            <summary>
            If checked, instances will be aligned to normal of the placed surface.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.PlacementRandomYaw">
            <summary>
            If checked, instances will use randomized yaw when placed. Random yaw uses will rotation range over the Y axis.
            </summary>
        </member>
        <member name="P:FlaxEngine.FoliageType.Materials">
            <summary>
            Gets or sets the foliage instance type materials buffer (overrides).
            </summary>
        </member>
        <member name="T:FlaxEngine.RendererType">
            <summary>
            Graphics rendering backend system types.
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.Unknown">
            <summary>
            Unknown type
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.DirectX10">
            <summary>
            DirectX 10
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.DirectX10_1">
            <summary>
            DirectX 10.1
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.DirectX11">
            <summary>
            DirectX 11
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.DirectX12">
            <summary>
            DirectX 12
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.OpenGL4_1">
            <summary>
            OpenGL 4.1
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.OpenGL4_4">
            <summary>
            OpenGL 4.4
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.OpenGLES3">
            <summary>
            OpenGL ES 3
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.OpenGLES3_1">
            <summary>
            OpenGL ES 3.1
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.Null">
            <summary>
            Null backend
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.Vulkan">
            <summary>
            Vulkan
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.PS4">
            <summary>
            PlayStation 4
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.PS5">
            <summary>
            PlayStation 5
            </summary>
        </member>
        <member name="F:FlaxEngine.RendererType.MAX">
            <summary>
            The count of items in the RendererType enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.ShaderProfile">
            <summary>
            Shader profile types define the version and type of the shading language used by the graphics backend.
            </summary>
        </member>
        <member name="F:FlaxEngine.ShaderProfile.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:FlaxEngine.ShaderProfile.DirectX_SM4">
            <summary>
            DirectX (Shader Model 4 compatible)
            </summary>
        </member>
        <member name="F:FlaxEngine.ShaderProfile.DirectX_SM5">
            <summary>
            DirectX (Shader Model 5 compatible)
            </summary>
        </member>
        <member name="F:FlaxEngine.ShaderProfile.GLSL_410">
            <summary>
            GLSL 410
            </summary>
        </member>
        <member name="F:FlaxEngine.ShaderProfile.GLSL_440">
            <summary>
            GLSL 440
            </summary>
        </member>
        <member name="F:FlaxEngine.ShaderProfile.Vulkan_SM5">
            <summary>
            Vulkan (Shader Model 5 compatible)
            </summary>
        </member>
        <member name="F:FlaxEngine.ShaderProfile.PS4">
            <summary>
            PlayStation 4
            </summary>
        </member>
        <member name="F:FlaxEngine.ShaderProfile.DirectX_SM6">
            <summary>
            DirectX (Shader Model 6 compatible)
            </summary>
        </member>
        <member name="F:FlaxEngine.ShaderProfile.PS5">
            <summary>
            PlayStation 5
            </summary>
        </member>
        <member name="F:FlaxEngine.ShaderProfile.MAX">
            <summary>
            The count of items in the ShaderProfile enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.FeatureLevel">
            <summary>
            Graphics feature levels indicates what level of support can be relied upon.
            They are named after the graphics API to indicate the minimum level of the features set to support.
            Feature levels are ordered from the lowest to the most high-end so feature level enum can be used to switch between feature levels (e.g. don't use geometry shader if not supported).
            </summary>
        </member>
        <member name="F:FlaxEngine.FeatureLevel.ES2">
            <summary>
            The features set defined by the core capabilities of OpenGL ES2.
            </summary>
        </member>
        <member name="F:FlaxEngine.FeatureLevel.ES3">
            <summary>
            The features set defined by the core capabilities of OpenGL ES3.
            </summary>
        </member>
        <member name="F:FlaxEngine.FeatureLevel.ES3_1">
            <summary>
            The features set defined by the core capabilities of OpenGL ES3.1.
            </summary>
        </member>
        <member name="F:FlaxEngine.FeatureLevel.SM4">
            <summary>
            The features set defined by the core capabilities of DirectX 10 Shader Model 4.
            </summary>
        </member>
        <member name="F:FlaxEngine.FeatureLevel.SM5">
            <summary>
            The features set defined by the core capabilities of DirectX 11 Shader Model 5.
            </summary>
        </member>
        <member name="F:FlaxEngine.FeatureLevel.SM6">
            <summary>
            The features set defined by the core capabilities of DirectX 12 Shader Model 6.
            </summary>
        </member>
        <member name="F:FlaxEngine.FeatureLevel.MAX">
            <summary>
            The count of items in the FeatureLevel enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.MSAALevel">
            <summary>
            Multisample count level.
            </summary>
        </member>
        <member name="F:FlaxEngine.MSAALevel.None">
            <summary>
            Disabled multisampling.
            </summary>
        </member>
        <member name="F:FlaxEngine.MSAALevel.X2">
            <summary>
            Two samples per pixel.
            </summary>
        </member>
        <member name="F:FlaxEngine.MSAALevel.X4">
            <summary>
            Four samples per pixel.
            </summary>
        </member>
        <member name="F:FlaxEngine.MSAALevel.X8">
            <summary>
            Eight samples per pixel.
            </summary>
        </member>
        <member name="T:FlaxEngine.ShadowsCastingMode">
            <summary>
            Shadows casting modes by visual elements.
            </summary>
        </member>
        <member name="F:FlaxEngine.ShadowsCastingMode.None">
            <summary>
            Never render shadows.
            </summary>
        </member>
        <member name="F:FlaxEngine.ShadowsCastingMode.StaticOnly">
            <summary>
            Render shadows only in static views (env probes, lightmaps, etc.).
            </summary>
        </member>
        <member name="F:FlaxEngine.ShadowsCastingMode.DynamicOnly">
            <summary>
            Render shadows only in dynamic views (game, editor, etc.).
            </summary>
        </member>
        <member name="F:FlaxEngine.ShadowsCastingMode.All">
            <summary>
            Always render shadows.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUResourceUsage">
            <summary>
            Identifies expected GPU resource use during rendering. The usage directly reflects whether a resource is accessible by the CPU and/or the GPU.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUResourceUsage.Default">
            <summary>
            A resource that requires read and write access by the GPU.
            This is likely to be the most common usage choice.
            Memory will be used on device only, so fast access from the device is preferred.
            It usually means device-local GPU (video) memory.
            </summary>
            <remarks>
            Usage:
            - Resources written and read by device, e.g. images used as render targets.
            - Resources transferred from host once (immutable) or infrequently and read by
              device multiple times, e.g. textures to be sampled, vertex buffers, constant
              buffers, and majority of other types of resources used on GPU.
            </remarks>
        </member>
        <member name="F:FlaxEngine.GPUResourceUsage.Dynamic">
            <summary>
            A resource that is accessible by both the GPU (read only) and the CPU (write only).
            A dynamic resource is a good choice for a resource that will be updated by the CPU at least once per frame.
            Dynamic buffers or textures are usually used to upload data to GPU and use it within a single frame.
            </summary>
            <remarks>
            Usage:
            - Resources written frequently by CPU (dynamic), read by device.
              E.g. textures, vertex buffers, uniform buffers updated every frame or every draw call.
            </remarks>
        </member>
        <member name="F:FlaxEngine.GPUResourceUsage.StagingUpload">
            <summary>
            A resource that supports data transfer (copy) from the CPU to the GPU.
            It usually means CPU (system) memory. Resources created in this pool may still be accessible to the device, but access to them can be slow.
            </summary>
            <remarks>
            Usage:
            - Staging copy of resources used as transfer source.
            </remarks>
        </member>
        <member name="F:FlaxEngine.GPUResourceUsage.StagingReadback">
            <summary>
            A resource that supports data transfer (copy) from the GPU to the CPU.
            </summary>
            <remarks>
            Usage:
            - Resources written by device, read by host - results of some computations, e.g. screen capture, average scene luminance for HDR tone mapping.
            - Any resources read or accessed randomly on host, e.g. CPU-side copy of vertex buffer used as source of transfer, but also used for collision detection.
            </remarks>
        </member>
        <member name="T:FlaxEngine.GPUResourceMapMode">
            <summary>
            Describes how a mapped GPU resource will be accessed.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUResourceMapMode.Read">
            <summary>
            The resource is mapped for reading.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUResourceMapMode.Write">
            <summary>
            The resource is mapped for writing.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUResourceMapMode.ReadWrite">
            <summary>
            The resource is mapped for reading and writing.
            </summary>
        </member>
        <member name="T:FlaxEngine.PrimitiveTopologyType">
            <summary>
            Primitives types.
            </summary>
        </member>
        <member name="F:FlaxEngine.PrimitiveTopologyType.Undefined">
            <summary>
            Unknown topology.
            </summary>
        </member>
        <member name="F:FlaxEngine.PrimitiveTopologyType.Point">
            <summary>
            Points list.
            </summary>
        </member>
        <member name="F:FlaxEngine.PrimitiveTopologyType.Line">
            <summary>
            Line list.
            </summary>
        </member>
        <member name="F:FlaxEngine.PrimitiveTopologyType.Triangle">
            <summary>
            Triangle list.
            </summary>
        </member>
        <member name="T:FlaxEngine.CullMode">
            <summary>
            Primitives culling mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.CullMode.Normal">
            <summary>
            Cull back-facing primitives only.
            </summary>
        </member>
        <member name="F:FlaxEngine.CullMode.Inverted">
            <summary>
            Cull front-facing primitives only.
            </summary>
        </member>
        <member name="F:FlaxEngine.CullMode.TwoSided">
            <summary>
            Disable face culling.
            </summary>
        </member>
        <member name="T:FlaxEngine.BlendingMode">
            <summary>
            Render target blending mode descriptor.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.AlphaToCoverageEnable">
            <summary>
            Render target blending mode descriptor.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.BlendEnable">
            <summary>
            Render target blending mode descriptor.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.SrcBlend">
            <summary>
            Render target blending mode descriptor.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.DestBlend">
            <summary>
            Render target blending mode descriptor.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.BlendOp">
            <summary>
            Render target blending mode descriptor.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.SrcBlendAlpha">
            <summary>
            Render target blending mode descriptor.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.DestBlendAlpha">
            <summary>
            Render target blending mode descriptor.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.BlendOpAlpha">
            <summary>
            Render target blending mode descriptor.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.RenderTargetWriteMask">
            <summary>
            Render target blending mode descriptor.
            </summary>
        </member>
        <member name="P:FlaxEngine.BlendingMode.Opaque">
            <summary>
            Gets the opaque rendering (default). No blending is being performed.
            </summary>
        </member>
        <member name="P:FlaxEngine.BlendingMode.Additive">
            <summary>
            Gets the additive rendering. Adds the color and the alpha channel. Source color is multiplied by the alpha.
            </summary>
        </member>
        <member name="P:FlaxEngine.BlendingMode.AlphaBlend">
            <summary>
            Gets the alpha blending.
            </summary>
        </member>
        <member name="P:FlaxEngine.BlendingMode.Add">
            <summary>
            Gets the additive blending with pre-multiplied color.
            </summary>
        </member>
        <member name="P:FlaxEngine.BlendingMode.Multiply">
            <summary>
            Gets the multiply blending (multiply output color with texture color).
            </summary>
        </member>
        <member name="T:FlaxEngine.BlendingMode.Blend">
            <summary>
            Blending mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.Zero">
            <summary>
            The blend factor is (0, 0, 0, 0). No pre-blend operation.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.One">
            <summary>
            The blend factor is (1, 1, 1, 1). No pre-blend operation.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.SrcColor">
            <summary>
            The blend factor is (Rs, Gs, Bs, As), that is color data (RGB) from a pixel shader. No pre-blend operation.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.InvSrcColor">
            <summary>
            The blend factor is (1 - Rs, 1 - Gs, 1 - Bs, 1 - As), that is color data (RGB) from a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.SrcAlpha">
            <summary>
            The blend factor is (As, As, As, As), that is alpha data (A) from a pixel shader. No pre-blend operation.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.InvSrcAlpha">
            <summary>
            The blend factor is ( 1 - As, 1 - As, 1 - As, 1 - As), that is alpha data (A) from a pixel shader. The pre-blend operation inverts the data, generating 1 - A.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.DestAlpha">
            <summary>
            The blend factor is (Ad Ad Ad Ad), that is alpha data from a render target. No pre-blend operation.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.InvDestAlpha">
            <summary>
            The blend factor is (1 - Ad 1 - Ad 1 - Ad 1 - Ad), that is alpha data from a render target. The pre-blend operation inverts the data, generating 1 - A.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.DestColor">
            <summary>
            The blend factor is (Rd, Gd, Bd, Ad), that is color data from a render target. No pre-blend operation.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.InvDestColor">
            <summary>
            The blend factor is (1 - Rd, 1 - Gd, 1 - Bd, 1 - Ad), that is color data from a render target. The pre-blend operation inverts the data, generating 1 - RGB.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.SrcAlphaSat">
            <summary>
            The blend factor is (f, f, f, 1); where f = min(As, 1 - Ad). The pre-blend operation clamps the data to 1 or less.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.BlendFactor">
            <summary>
            The blend factor is the blend factor set with GPUContext::SetBlendFactor. No pre-blend operation.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.BlendInvFactor">
            <summary>
            The blend factor is the blend factor set with GPUContext::SetBlendFactor. The pre-blend operation inverts the blend factor, generating 1 - blend_factor.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.Src1Color">
            <summary>
            The blend factor is data sources both as color data output by a pixel shader. There is no pre-blend operation. This blend factor supports dual-source color blending.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.InvSrc1Color">
            <summary>
            The blend factor is data sources both as color data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB. This blend factor supports dual-source color blending.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.Src1Alpha">
            <summary>
            The blend factor is data sources as alpha data output by a pixel shader. There is no pre-blend operation. This blend factor supports dual-source color blending.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.InvSrc1Alpha">
            <summary>
            The blend factor is data sources as alpha data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - A. This blend factor supports dual-source color blending.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Blend.MAX">
            <summary>
            The count of items in the Blend enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.BlendingMode.Operation">
            <summary>
            Blending operation.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Operation.Add">
            <summary>
            Add source 1 and source 2.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Operation.Subtract">
            <summary>
            Subtract source 1 from source 2.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Operation.RevSubtract">
            <summary>
            Subtract source 2 from source 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Operation.Min">
            <summary>
            Find the minimum of source 1 and source 2.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Operation.Max">
            <summary>
            Find the maximum of source 1 and source 2.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.Operation.MAX">
            <summary>
            The count of items in the Operation enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.BlendingMode.ColorWrite">
            <summary>
            Render target write mask
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.ColorWrite.None">
            <summary>
            No color writing.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.ColorWrite.Red">
            <summary>
            Allow data to be stored in the red component.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.ColorWrite.Green">
            <summary>
            Allow data to be stored in the green component.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.ColorWrite.Blue">
            <summary>
            Allow data to be stored in the blue component.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.ColorWrite.Alpha">
            <summary>
            Allow data to be stored in the alpha component.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.ColorWrite.All">
            <summary>
            Allow data to be stored in all components.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.ColorWrite.RG">
            <summary>
            Allow data to be stored in red and green components.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.ColorWrite.RGB">
            <summary>
            Allow data to be stored in red, green and blue components.
            </summary>
        </member>
        <member name="F:FlaxEngine.BlendingMode.ColorWrite.RGBA">
            <summary>
            Allow data to be stored in all components.
            </summary>
        </member>
        <member name="T:FlaxEngine.ComparisonFunc">
            <summary>
            Comparison function modes
            </summary>
        </member>
        <member name="F:FlaxEngine.ComparisonFunc.Never">
            <summary>
            Never pass the comparison.
            </summary>
        </member>
        <member name="F:FlaxEngine.ComparisonFunc.Less">
            <summary>
            If the source data is less than the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ComparisonFunc.Equal">
            <summary>
            If the source data is equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ComparisonFunc.LessEqual">
            <summary>
            If the source data is less than or equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ComparisonFunc.Greater">
            <summary>
            If the source data is greater than the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ComparisonFunc.NotEqual">
            <summary>
            If the source data is not equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ComparisonFunc.GreaterEqual">
            <summary>
            If the source data is greater than or equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ComparisonFunc.Always">
            <summary>
            Always pass the comparison.
            </summary>
        </member>
        <member name="F:FlaxEngine.ComparisonFunc.MAX">
            <summary>
            The count of items in the ComparisonFunc enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.Quality">
            <summary>
            Rendering quality levels.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quality.Low">
            <summary>
            The low quality.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quality.Medium">
            <summary>
            The medium quality.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quality.High">
            <summary>
            The high quality.
            </summary>
        </member>
        <member name="F:FlaxEngine.Quality.Ultra">
            <summary>
            The ultra, mega, fantastic quality!
            </summary>
        </member>
        <member name="F:FlaxEngine.Quality.MAX">
            <summary>
            The count of items in the Quality enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialPostFxLocation">
            <summary>
            Post Fx material rendering locations.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialPostFxLocation.AfterPostProcessingPass">
            <summary>
            The after post processing pass using LDR input frame.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialPostFxLocation.BeforePostProcessingPass">
            <summary>
            The before post processing pass using HDR input frame.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialPostFxLocation.BeforeForwardPass">
            <summary>
            The before forward pass but after GBuffer with HDR input frame.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialPostFxLocation.AfterCustomPostEffects">
            <summary>
            The after custom post effects.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialPostFxLocation.BeforeReflectionsPass">
            <summary>
            The 'before' Reflections pass. After the Light pass. Can be used to implement a custom light types that accumulate lighting to the light buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialPostFxLocation.AfterAntiAliasingPass">
            <summary>
            The 'after' AA filter pass. Rendering is done to the output backbuffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialPostFxLocation.MAX">
            <summary>
            The count of items in the MaterialPostFxLocation enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.PostProcessEffectLocation">
            <summary>
            The Post Process effect rendering location within the rendering pipeline.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessEffectLocation.Default">
            <summary>
            The default location after the in-build PostFx pass (bloom, color grading, etc.) but before anti-aliasing effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessEffectLocation.BeforePostProcessingPass">
             <summary>
            The 'before' in-build PostFx pass (bloom, color grading, etc.). After Forward Pass (transparency) and fog effects.
             </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessEffectLocation.BeforeForwardPass">
            <summary>
            The 'before' Forward pass (transparency) and fog effects. After the Light pass and Reflections pass.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessEffectLocation.BeforeReflectionsPass">
            <summary>
            The 'before' Reflections pass. After the Light pass. Can be used to implement a custom light types that accumulate lighting to the light buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessEffectLocation.AfterAntiAliasingPass">
            <summary>
            The 'after' AA filter pass.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessEffectLocation.CustomUpscale">
            <summary>
            The custom frame up-scaling that replaces default implementation. Rendering is done to the output backbuffer (use OutputView and OutputViewport as render destination).
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessEffectLocation.MAX">
            <summary>
            The count of items in the PostProcessEffectLocation enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.DrawPass">
            <summary>
            The objects drawing pass types. Used as a flags for objects drawing masking.
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawPass.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawPass.Depth">
            <summary>
            The hardware depth rendering to the depth buffer (used for shadow maps rendering).
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawPass.GBuffer">
            <summary>
            The base pass rendering to the GBuffer (for opaque materials).
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawPass.Forward">
            <summary>
            The forward pass rendering (for transparent materials).
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawPass.Distortion">
            <summary>
            The transparent objects distortion vectors rendering (with blending).
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawPass.MotionVectors">
            <summary>
            The motion vectors (velocity) rendering pass (for movable objects).
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawPass.QuadOverdraw">
            <summary>
            The debug quad overdraw rendering (editor-only).
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawPass.Default">
            <summary>
            The default set of draw passes for the scene objects.
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawPass.All">
            <summary>
            The all draw passes combined into a single mask.
            </summary>
        </member>
        <member name="T:FlaxEngine.ViewMode">
            <summary>
            Describes frame rendering modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.Default">
            <summary>
            Full rendering
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.NoPostFx">
            <summary>
            Without post-process pass
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.Diffuse">
            <summary>
            Draw Diffuse
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.Normals">
            <summary>
            Draw Normals
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.Emissive">
            <summary>
            Draw Emissive
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.Depth">
            <summary>
            Draw Depth
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.AmbientOcclusion">
            <summary>
            Draw Ambient Occlusion
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.Metalness">
            <summary>
            Draw Material's Metalness
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.Roughness">
            <summary>
            Draw Material's Roughness
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.Specular">
            <summary>
            Draw Material's Specular
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.SpecularColor">
            <summary>
            Draw Material's Specular Color
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.ShadingModel">
            <summary>
            Draw Shading Model
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.LightBuffer">
            <summary>
            Draw Lights buffer
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.Reflections">
            <summary>
            Draw reflections buffer
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.Wireframe">
            <summary>
            Draw scene objects in wireframe mode
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.MotionVectors">
            <summary>
            Draw motion vectors debug view
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.SubsurfaceColor">
            <summary>
            Draw materials subsurface color debug view
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.Unlit">
            <summary>
            Draw materials colors with ambient occlusion
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.LightmapUVsDensity">
            <summary>
            Draw meshes lightmaps coordinates density
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.VertexColors">
            <summary>
            Draw meshes vertex colors
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.PhysicsColliders">
            <summary>
            Draw physics colliders debug view
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.LODPreview">
            <summary>
            Draw Level Of Detail number as colors to debug LOD switches.
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.MaterialComplexity">
            <summary>
            Draw material shaders complexity to visualize performance of pixels rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewMode.QuadOverdraw">
            <summary>
            Draw geometry overdraw to visualize performance of pixels rendering.
            </summary>
        </member>
        <member name="T:FlaxEngine.ViewFlags">
            <summary>
            Frame rendering flags used to switch between graphics features.
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.None">
            <summary>
            Nothing.
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.DebugDraw">
            <summary>
            Shows/hides the debug shapes rendered using Debug Draw.
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.EditorSprites">
            <summary>
            Shows/hides Editor sprites
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.Reflections">
            <summary>
            Shows/hides reflections
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.SSR">
            <summary>
            Shows/hides Screen Space Reflections
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.AO">
            <summary>
            Shows/hides Ambient Occlusion effect
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.GI">
            <summary>
            Shows/hides Global Illumination effect
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.DirectionalLights">
            <summary>
            Shows/hides directional lights
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.PointLights">
            <summary>
            Shows/hides point lights
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.SpotLights">
            <summary>
            Shows/hides spot lights
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.SkyLights">
            <summary>
            Shows/hides sky lights
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.Shadows">
            <summary>
            Shows/hides shadows
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.SpecularLight">
            <summary>
            Shows/hides specular light rendering
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.AntiAliasing">
            <summary>
            Shows/hides Anti-Aliasing
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.CustomPostProcess">
            <summary>
            Shows/hides custom Post-Process effects
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.Bloom">
            <summary>
            Shows/hides bloom effect
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.ToneMapping">
            <summary>
            Shows/hides tone mapping effect
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.EyeAdaptation">
            <summary>
            Shows/hides eye adaptation effect
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.CameraArtifacts">
            <summary>
            Shows/hides camera artifacts
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.LensFlares">
            <summary>
            Shows/hides lens flares
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.Decals">
            <summary>
            Shows/hides deferred decals.
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.DepthOfField">
            <summary>
            Shows/hides depth of field effect
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.PhysicsDebug">
            <summary>
            Shows/hides physics debug shapes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.Fog">
            <summary>
            Shows/hides fogging effects.
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.MotionBlur">
            <summary>
            Shows/hides the motion blur effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.ContactShadows">
            <summary>
            Shows/hides the contact shadows effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.DefaultGame">
            <summary>
            Default flags for Game.
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.DefaultEditor">
            <summary>
            Default flags for Editor.
            </summary>
        </member>
        <member name="F:FlaxEngine.ViewFlags.DefaultAssetPreview">
            <summary>
            Default flags for materials/models previews generating.
            </summary>
        </member>
        <member name="T:FlaxEngine.TessellationMethod">
            <summary>
            Describes the different tessellation methods supported by the graphics system.
            </summary>
        </member>
        <member name="F:FlaxEngine.TessellationMethod.None">
            <summary>
            No tessellation.
            </summary>
        </member>
        <member name="F:FlaxEngine.TessellationMethod.Flat">
            <summary>
            Flat tessellation. Also known as dicing tessellation.
            </summary>
        </member>
        <member name="F:FlaxEngine.TessellationMethod.PointNormal">
            <summary>
            Point normal tessellation.
            </summary>
        </member>
        <member name="F:FlaxEngine.TessellationMethod.Phong">
            <summary>
            Geometric version of Phong normal interpolation, not applied on normals but on the vertex positions.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUAdapter">
            <summary>
            Interface for GPU device adapter.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUAdapter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GPUAdapter"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUAdapter.VendorId">
            <summary>
            Gets the GPU vendor identifier.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUAdapter.Description">
            <summary>
            Gets a string that contains the adapter description. Used for presentation to the user.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUAdapter.IsAMD">
            <summary>
            Returns true if adapter's vendor is AMD.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUAdapter.IsIntel">
            <summary>
            Returns true if adapter's vendor is Intel.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUAdapter.IsNVIDIA">
            <summary>
            Returns true if adapter's vendor is Nvidia.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUAdapter.IsMicrosoft">
            <summary>
            Returns true if adapter's vendor is Microsoft.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUBufferView">
            <summary>
            Defines a view for the <see cref="T:FlaxEngine.GPUBuffer"/>. Used to bind buffer to the shaders (for input as shader resource or for input/output as unordered access).
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUBufferView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GPUBufferView"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUBuffer">
            <summary>
            All-in-one GPU buffer class. This class is able to create index buffers, vertex buffers, structured buffer and argument buffers.
            </summary>
            <seealso cref="T:FlaxEngine.GPUResource" />
        </member>
        <member name="M:FlaxEngine.GPUBuffer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GPUBuffer"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBuffer.IsAllocated">
            <summary>
            Gets a value indicating whether this buffer has been allocated.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBuffer.Size">
            <summary>
            Gets buffer size in bytes.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBuffer.Stride">
            <summary>
            Gets buffer stride in bytes.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBuffer.Format">
            <summary>
            Gets buffer data format (if used).
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBuffer.ElementsCount">
            <summary>
            Gets buffer elements count (size divided by the stride).
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBuffer.IsStaging">
            <summary>
            Checks if buffer is a staging buffer (supports CPU readback).
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBuffer.IsDynamic">
            <summary>
            Checks if buffer is a staging buffer (supports CPU readback).
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBuffer.IsShaderResource">
            <summary>
            Gets a value indicating whether this buffer is a shader resource.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBuffer.IsUnorderedAccess">
            <summary>
            Gets a value indicating whether this buffer is a unordered access.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBuffer.Description">
            <summary>
            Gets buffer description structure.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUBuffer.View">
            <summary>
            Gets the view for the whole buffer.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUBuffer.Init(FlaxEngine.GPUBufferDescription@)">
            <summary>
            Creates new buffer.
            </summary>
            <param name="desc">The buffer description.</param>
            <returns>True if cannot create buffer, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBuffer.Resize(System.UInt32)">
            <summary>
            Tries to resize the buffer (warning: contents will be lost).
            </summary>
            <param name="newSize">The new size (in bytes).</param>
            <returns>True if cannot resize buffer, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBuffer.DownloadData(System.Byte[]@)">
            <summary>
            Stops current thread execution to gather buffer data from the GPU. Cannot be called from main thread if the buffer is not a dynamic nor staging readback.
            </summary>
            <param name="result">The result data.</param>
            <returns>True if cannot download data, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBuffer.GetData(System.Byte[]@)">
            <summary>
            Gets the buffer data via map/memcpy/unmap sequence. Always supported for dynamic and staging readback buffers (other types support depends on graphics backend implementation).
            </summary>
            <param name="output">The output data container.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBuffer.SetData(System.IntPtr,System.UInt32)">
            <summary>
            Sets the buffer data via map/memcpy/unmap sequence. Always supported for dynamic buffers (other types support depends on graphics backend implementation).
            </summary>
            <param name="data">The source data to upload.</param>
            <param name="size">The size of data (in bytes).</param>
        </member>
        <member name="M:FlaxEngine.GPUBuffer.Map(FlaxEngine.GPUResourceMapMode)">
            <summary>
            Gets a CPU pointer to the resource by mapping its contents. Denies the GPU access to that resource.
            </summary>
            <param name="mode">The map operation mode.</param>
            <returns>The pointer of the mapped CPU buffer with resource data or null if failed.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBuffer.Unmap">
            <summary>
            Invalidates the mapped pointer to a resource and restores the GPU's access to that resource.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUBufferFlags">
            <summary>
            The GPU buffer usage flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.None">
            <summary>
            Nothing
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.ShaderResource">
            <summary>
            Create a buffer that can be bound as a shader resource.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.VertexBuffer">
            <summary>
            Create a buffer that can be bound as a vertex buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.IndexBuffer">
            <summary>
            Create a buffer that can be bound as a index buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.UnorderedAccess">
            <summary>
            Create a buffer that can be bound as a unordered access.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.Append">
            <summary>
            Flag for unordered access buffers that will use append feature.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.Counter">
            <summary>
            Flag for unordered access buffers that will use counter feature.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.Argument">
            <summary>
            Flag for unordered access buffers that will be used as draw indirect argument buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.Structured">
            <summary>
            Flag for structured buffers.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.RawBuffer">
            <summary>
            Flag for raw buffers.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.StructuredAppendBuffer">
            <summary>
            Creates a structured buffer that supports unordered access and append.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferFlags.StructuredCounterBuffer">
            <summary>
            Creates a structured buffer that supports unordered access and counter.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUBufferDescription">
            <summary>
            A common description for all GPU buffers.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferDescription.Size">
            <summary>
            The buffer total size.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferDescription.Stride">
            <summary>
            The buffer structure stride (size in bytes per element).
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferDescription.Flags">
            <summary>
            The buffer flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferDescription.Format">
            <summary>
            The format of the data in a buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferDescription.InitData">
            <summary>
            The pointer to location of initial resource data. Null if not used.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUBufferDescription.Usage">
            <summary>
            Value that identifies how the buffer is to be read from and written to. The most common value is <see cref="F:FlaxEngine.GPUResourceUsage.Default"/>; see <strong><see cref="T:FlaxEngine.GPUResourceUsage"/></strong> for all possible values.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBufferDescription.GetElementsCount">
            <summary>
            Gets the number elements in the buffer.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBufferDescription.IsShaderResource">
            <summary>
            Gets a value indicating whether this instance is a shader resource.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUBufferDescription.IsUnorderedAccess">
            <summary>
            Gets a value indicating whether this instance is a unordered access.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Clear">
            <summary>
            Clears description.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Buffer(System.UInt32,FlaxEngine.GPUBufferFlags,FlaxEngine.PixelFormat,System.IntPtr,System.UInt32,FlaxEngine.GPUResourceUsage)">
            <summary>
            Creates the buffer description.
            </summary>
            <param name="size">The size (in bytes).</param>
            <param name="flags">The flags.</param>
            <param name="format">The format.</param>
            <param name="initData">The initial data.</param>
            <param name="stride">The stride.</param>
            <param name="usage">The usage.</param>
            <returns>The buffer description.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Buffer(System.Int32,FlaxEngine.GPUBufferFlags,FlaxEngine.PixelFormat,System.IntPtr,System.Int32,FlaxEngine.GPUResourceUsage)">
            <summary>
            Creates the buffer description.
            </summary>
            <param name="size">The size (in bytes).</param>
            <param name="flags">The flags.</param>
            <param name="format">The format.</param>
            <param name="initData">The initial data.</param>
            <param name="stride">The stride.</param>
            <param name="usage">The usage.</param>
            <returns>The buffer description.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Typed(System.Int32,FlaxEngine.PixelFormat,System.Boolean,FlaxEngine.GPUResourceUsage)">
            <summary>
            Creates typed buffer description.
            </summary>
            <param name="count">The elements count.</param>
            <param name="viewFormat">The view format.</param>
            <param name="isUnorderedAccess">True if use UAV, otherwise false.</param>
            <param name="usage">The usage.</param>
            <returns>The buffer description.</returns>
            <remarks>
            Example in HLSL: Buffer&lt;float4&gt;.
            </remarks>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Typed(System.IntPtr,System.Int32,FlaxEngine.PixelFormat,System.Boolean,FlaxEngine.GPUResourceUsage)">
            <summary>
            Creates typed buffer description.
            </summary>
            <param name="data">The data.</param>
            <param name="count">The elements count.</param>
            <param name="viewFormat">The view format.</param>
            <param name="isUnorderedAccess">True if use UAV, otherwise false.</param>
            <param name="usage">The usage.</param>
            <returns>The buffer description.</returns>
            <remarks>
            Example in HLSL: Buffer&lt;float4&gt;.
            </remarks>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Vertex(System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Creates vertex buffer description.
            </summary>
            <param name="elementStride">The element stride.</param>
            <param name="elementsCount">The elements count.</param>
            <param name="data">The data.</param>
            <returns>The buffer description.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Vertex(System.Int32,System.Int32,FlaxEngine.GPUResourceUsage)">
            <summary>
            Creates vertex buffer description.
            </summary>
            <param name="elementStride">The element stride.</param>
            <param name="elementsCount">The elements count.</param>
            <param name="usage">The usage mode.</param>
            <returns>The buffer description.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Vertex(System.Int32,FlaxEngine.GPUResourceUsage)">
            <summary>
            Creates vertex buffer description.
            </summary>
            <param name="size">The size (in bytes).</param>
            <param name="usage">The usage mode.</param>
            <returns>The buffer description.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Index(System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Creates index buffer description.
            </summary>
            <param name="elementStride">The element stride.</param>
            <param name="elementsCount">The elements count.</param>
            <param name="data">The data.</param>
            <returns>The buffer description.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Index(System.Int32,System.Int32,FlaxEngine.GPUResourceUsage)">
            <summary>
            Creates index buffer description.
            </summary>
            <param name="elementStride">The element stride.</param>
            <param name="elementsCount">The elements count.</param>
            <param name="usage">The usage mode.</param>
            <returns>The buffer description.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Structured(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates structured buffer description.
            </summary>
            <param name="elementCount">The element count.</param>
            <param name="elementSize">Size of the element (in bytes).</param>
            <param name="isUnorderedAccess">if set to <c>true</c> [is unordered access].</param>
            <returns>The buffer description.</returns>
            <remarks>
            Example in HLSL: StructuredBuffer&lt;float4&gt; or RWStructuredBuffer&lt;float4&gt; for structured buffers supporting unordered access.
            </remarks>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.StructuredAppend(System.Int32,System.Int32)">
            <summary>
            Creates append buffer description (structured buffer).
            </summary>
            <param name="elementCount">The element count.</param>
            <param name="elementSize">Size of the element (in bytes).</param>
            <returns>The buffer description.</returns>
            <remarks>
            Example in HLSL: AppendStructuredBuffer&lt;float4&gt; or ConsumeStructuredBuffer&lt;float4&gt;.
            </remarks>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.StructuredCounter(System.Int32,System.Int32)">
            <summary>
            Creates counter buffer description (structured buffer).
            </summary>
            <param name="elementCount">The element count.</param>
            <param name="elementSize">Size of the element (in bytes).</param>
            <returns>The buffer description.</returns>
            <remarks>
            Example in HLSL: StructuredBuffer&lt;float4&gt; or RWStructuredBuffer&lt;float4&gt; for structured buffers supporting unordered access.
            </remarks>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Argument(System.Int32,FlaxEngine.GPUResourceUsage)">
            <summary>
            Creates argument buffer description.
            </summary>
            <param name="size">The size (in bytes).</param>
            <param name="usage">The usage.</param>
            <returns>The buffer description.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Argument(System.IntPtr,System.Int32,FlaxEngine.GPUResourceUsage)">
            <summary>
            Creates argument buffer description.
            </summary>
            <param name="data">The initial data.</param>
            <param name="size">The size (in bytes).</param>
            <param name="usage">The usage.</param>
            <returns>The buffer description.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Raw(System.Int32,FlaxEngine.GPUBufferFlags,FlaxEngine.GPUResourceUsage)">
            <summary>
            Creates raw buffer description.
            </summary>
            <param name="size">The size (in bytes).</param>
            <param name="additionalFlags">The additional bindings (for example, to create a combined raw/index buffer, pass <see cref="F:FlaxEngine.GPUBufferFlags.IndexBuffer" />).</param>
            <param name="usage">The usage.</param>
            <returns>The buffer description.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Raw(System.IntPtr,System.Int32,FlaxEngine.GPUBufferFlags,FlaxEngine.GPUResourceUsage)">
            <summary>
            Creates raw buffer description.
            </summary>
            <param name="data">The initial data.</param>
            <param name="size">The size (in bytes).</param>
            <param name="additionalFlags">The additional bindings (for example, to create a combined raw/index buffer, pass <see cref="F:FlaxEngine.GPUBufferFlags.IndexBuffer" />).</param>
            <param name="usage">The usage.</param>
            <returns>The buffer description.</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.ToStagingUpload">
            <summary>
            Gets the staging upload description for this instance.
            </summary>
            <returns>A staging buffer description</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.ToStagingReadback">
            <summary>
            Gets the staging readback description for this instance.
            </summary>
            <returns>A staging buffer description</returns>
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Equals(FlaxEngine.GPUBufferDescription)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GPUBufferDescription.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GPUDispatchIndirectArgs">
            <summary>
            The GPU dispatch indirect command arguments data.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDispatchIndirectArgs.ThreadGroupCountX">
            <summary>
            The X dimension of dispatch size.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDispatchIndirectArgs.ThreadGroupCountY">
            <summary>
            The Y dimension of dispatch size.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDispatchIndirectArgs.ThreadGroupCountZ">
            <summary>
            The Z dimension of dispatch size.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUDrawIndirectArgs">
            <summary>
            The GPU draw indirect command arguments data.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDrawIndirectArgs.VerticesCount">
            <summary>
            The number of vertices to draw for each instance.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDrawIndirectArgs.InstanceCount">
            <summary>
            The number of instances to draw.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDrawIndirectArgs.StartVertex">
            <summary>
            An offset added to each vertex index.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDrawIndirectArgs.StartInstance">
            <summary>
            An offset added to each instance index.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUDrawIndexedIndirectArgs">
            <summary>
            The GPU draw indexed indirect command arguments data.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDrawIndexedIndirectArgs.IndicesCount">
            <summary>
            The number of indices to draw for each instance.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDrawIndexedIndirectArgs.InstanceCount">
            <summary>
            The number of instances to draw.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDrawIndexedIndirectArgs.StartIndex">
            <summary>
            An offset into the index buffer where drawing should begin.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDrawIndexedIndirectArgs.StartVertex">
            <summary>
            An offset added to each vertex index.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDrawIndexedIndirectArgs.StartInstance">
            <summary>
            An offset added to each instance index.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUContext">
            <summary>
            Interface for GPU device context that can record and send graphics commands to the GPU in a sequence.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GPUContext"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUContext.NativePtr">
            <summary>
            Gets the native pointer to the underlying graphics device context. It's a low-level platform-specific handle.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUContext.Clear(FlaxEngine.GPUTextureView,FlaxEngine.Color)">
            <summary>
            Clears texture surface with a color. Supports volumetric textures and texture arrays (including cube textures).
            </summary>
            <param name="rt">The target surface.</param>
            <param name="color">The clear color.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.ClearDepth(FlaxEngine.GPUTextureView,System.Single)">
            <summary>
            Clears depth buffer.
            </summary>
            <param name="depthBuffer">The depth buffer to clear.</param>
            <param name="depthValue">The clear depth value.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.ClearUA(FlaxEngine.GPUBuffer,FlaxEngine.Vector4)">
            <summary>
            Clears an unordered access buffer with a float value.
            </summary>
            <param name="buf">The buffer to clear.</param>
            <param name="value">The clear value.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.UpdateBuffer(FlaxEngine.GPUBuffer,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Updates the buffer data.
            </summary>
            <param name="buffer">The destination buffer to write to.</param>
            <param name="data">The pointer to the data.</param>
            <param name="size">The data size (in bytes) to write.</param>
            <param name="offset">The offset (in bytes) from the buffer start to copy data to.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.CopyBuffer(FlaxEngine.GPUBuffer,FlaxEngine.GPUBuffer,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copies the buffer data.
            </summary>
            <param name="dstBuffer">The destination buffer to write to.</param>
            <param name="srcBuffer">The source buffer to read from.</param>
            <param name="size">The size of data to copy (in bytes).</param>
            <param name="dstOffset">The offset (in bytes) from the destination buffer start to copy data to.</param>
            <param name="srcOffset">The offset (in bytes) from the source buffer start to copy data from.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.UpdateTexture(FlaxEngine.GPUTexture,System.Int32,System.Int32,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Updates the texture data.
            </summary>
            <param name="texture">The destination texture.</param>
            <param name="arrayIndex">The destination surface index in the texture array.</param>
            <param name="mipIndex">The absolute index of the mip map to update.</param>
            <param name="data">The pointer to the data.</param>
            <param name="rowPitch">The row pitch (in bytes) of the input data.</param>
            <param name="slicePitch">The slice pitch (in bytes) of the input data.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.CopyTexture(FlaxEngine.GPUTexture,System.UInt32,System.UInt32,System.UInt32,System.UInt32,FlaxEngine.GPUTexture,System.UInt32)">
            <summary>
            Copies region of the texture.
            </summary>
            <param name="dstResource">The destination resource.</param>
            <param name="dstSubresource">The destination subresource index.</param>
            <param name="dstX">The x-coordinate of the upper left corner of the destination region.</param>
            <param name="dstY">The y-coordinate of the upper left corner of the destination region.</param>
            <param name="dstZ">The z-coordinate of the upper left corner of the destination region.</param>
            <param name="srcResource">The source resource.</param>
            <param name="srcSubresource">The source subresource index.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.ResetCounter(FlaxEngine.GPUBuffer)">
            <summary>
            Resets the counter buffer to zero (hidden by the driver).
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.CopyCounter(FlaxEngine.GPUBuffer,System.UInt32,FlaxEngine.GPUBuffer)">
            <summary>
            Copies the counter buffer value.
            </summary>
            <param name="dstBuffer">The destination buffer.</param>
            <param name="dstOffset">The destination aligned byte offset.</param>
            <param name="srcBuffer">The source buffer.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.CopyResource(FlaxEngine.GPUResource,FlaxEngine.GPUResource)">
            <summary>
            Copies the resource data (whole resource).
            </summary>
            <param name="dstResource">The destination resource.</param>
            <param name="srcResource">The source resource.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.CopySubresource(FlaxEngine.GPUResource,System.UInt32,FlaxEngine.GPUResource,System.UInt32)">
            <summary>
            Copies the subresource data.
            </summary>
            <param name="dstResource">The destination resource.</param>
            <param name="dstSubresource">The destination subresource index.</param>
            <param name="srcResource">The source resource.</param>
            <param name="srcSubresource">The source subresource index.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.ResetRenderTarget">
            <summary>
            Unbinds all the render targets and flushes the change with the driver (used to prevent driver detection of resource hazards, eg. when down-scaling the texture).
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUContext.SetRenderTarget(FlaxEngine.GPUTextureView)">
            <summary>
            Sets the render target to the output.
            </summary>
            <param name="rt">The render target.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.SetRenderTarget(FlaxEngine.GPUTextureView,FlaxEngine.GPUTextureView)">
            <summary>
            Sets the render target and the depth buffer to the output.
            </summary>
            <param name="depthBuffer">The depth buffer.</param>
            <param name="rt">The render target.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.SetRenderTarget(FlaxEngine.GPUTextureView,FlaxEngine.GPUTextureView[])">
            <summary>
            Sets the render targets and the depth buffer to the output.
            </summary>
            <param name="depthBuffer">The depth buffer (can be null).</param>
            <param name="rts">The array with render targets to bind.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.ResetSR">
            <summary>
            Unbinds all shader resource slots and flushes the change with the driver (used to prevent driver detection of resource hazards, eg. when down-scaling the texture).
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUContext.ResetUA">
            <summary>
            Unbinds all unordered access resource slots and flushes the change with the driver (used to prevent driver detection of resource hazards, eg. when down-scaling the texture).
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUContext.ResetCB">
            <summary>
            Unbinds all constant buffer slots and flushes the change with the driver (used to prevent driver detection of resource hazards, eg. when down-scaling the texture).
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUContext.BindSR(System.Int32,FlaxEngine.GPUTexture)">
            <summary>
            Binds the texture to the shader resource slot.
            </summary>
            <param name="slot">The slot index.</param>
            <param name="t">The GPU texture.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.BindSR(System.Int32,FlaxEngine.GPUResourceView)">
            <summary>
            Binds the resource view to the shader resource slot (texture view or buffer view).
            </summary>
            <param name="slot">The slot index.</param>
            <param name="view">The resource view.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.BindUA(System.Int32,FlaxEngine.GPUResourceView)">
            <summary>
            Binds the resource view to the unordered access slot (texture view or buffer view).
            </summary>
            <param name="slot">The slot index.</param>
            <param name="view">The resource view.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.BindCB(System.Int32,System.IntPtr)">
            <summary>
            Binds the constant buffer to the slot.
            </summary>
            <param name="slot">The slot index.</param>
            <param name="cb">The constant buffer.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.BindVB(FlaxEngine.GPUBuffer[],System.UInt32*)">
            <summary>
            Binds the vertex buffers to the pipeline.
            </summary>
            <param name="vertexBuffers">The array of vertex buffers to use.</param>
            <param name="vertexBuffersOffsets">The optional array of byte offsets from the vertex buffers begins. Can be used to offset the vertex data when reusing the same buffer allocation for multiple geometry objects.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.BindIB(FlaxEngine.GPUBuffer)">
            <summary>
            Binds the index buffer to the pipeline.
            </summary>
            <param name="indexBuffer">The index buffer.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.BindSampler(System.Int32,FlaxEngine.GPUSampler)">
            <summary>
            Binds the texture sampler to the pipeline.
            </summary>
            <param name="slot">The slot index.</param>
            <param name="sampler">The sampler.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.UpdateCB(System.IntPtr,System.IntPtr)">
            <summary>
            Updates the constant buffer data.
            </summary>
            <param name="cb">The constant buffer.</param>
            <param name="data">The pointer to the data.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.Dispatch(System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Executes a command list from a thread group.
            </summary>
            <param name="shader">The compute shader program to execute.</param>
            <param name="threadGroupCountX">The number of groups dispatched in the x direction.</param>
            <param name="threadGroupCountY">The number of groups dispatched in the y direction.</param>
            <param name="threadGroupCountZ">The number of groups dispatched in the z direction.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.DispatchIndirect(System.IntPtr,FlaxEngine.GPUBuffer,System.UInt32)">
            <summary>
            Executes a command list from a thread group. Buffer must contain GPUDispatchIndirectArgs.
            </summary>
            <param name="shader">The compute shader program to execute.</param>
            <param name="bufferForArgs">The buffer with drawing arguments.</param>
            <param name="offsetForArgs">The aligned byte offset for arguments.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.ResolveMultisample(FlaxEngine.GPUTexture,FlaxEngine.GPUTexture,System.Int32,System.Int32,FlaxEngine.PixelFormat)">
            <summary>
            Resolves the multisampled texture by performing a copy of the resource into a non-multisampled resource.
            </summary>
            <param name="sourceMultisampleTexture">The source multisampled texture. Must be multisampled.</param>
            <param name="destTexture">The destination texture. Must be single-sampled.</param>
            <param name="sourceSubResource">The source sub-resource index.</param>
            <param name="destSubResource">The destination sub-resource index.</param>
            <param name="format">The format. Indicates how the multisampled resource will be resolved to a single-sampled resource.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.DrawFullscreenTriangle(System.Int32)">
            <summary>
            Draws the fullscreen triangle (using single triangle). Use instance count parameter to render more than one instance of the triangle.
            </summary>
            <param name="instanceCount">The instance count. Use SV_InstanceID in vertex shader to detect volume slice plane index.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.Draw(FlaxEngine.GPUTexture,FlaxEngine.GPUTexture)">
            <summary>
            Draws the specified source texture to destination render target (using fullscreen triangle). Copies contents with resizing and format conversion support. Uses linear texture sampling.
            </summary>
            <param name="dst">The destination texture.</param>
            <param name="src">The source texture.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.Draw(FlaxEngine.GPUTexture)">
            <summary>
            Draws the specified texture to render target (using fullscreen triangle). Copies contents with resizing and format conversion support. Uses linear texture sampling.
            </summary>
            <param name="rt">The texture.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.Draw(FlaxEngine.GPUTextureView)">
            <summary>
            Draws the specified texture to render target (using fullscreen triangle). Copies contents with resizing and format conversion support. Uses linear texture sampling.
            </summary>
            <param name="rt">The texture view.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.Draw(System.UInt32,System.UInt32)">
            <summary>
            Draws non-indexed, non-instanced primitives.
            </summary>
            <param name="startVertex">A value added to each index before reading a vertex from the vertex buffer.</param>
            <param name="verticesCount">The vertices count.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.DrawInstanced(System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Draws the instanced primitives.
            </summary>
            <param name="verticesCount">The vertices count.</param>
            <param name="instanceCount">Number of instances to draw.</param>
            <param name="startInstance">A value added to each index before reading per-instance data from a vertex buffer.</param>
            <param name="startVertex">A value added to each index before reading a vertex from the vertex buffer.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.DrawIndexed(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Draws the indexed primitives.
            </summary>
            <param name="indicesCount">The indices count.</param>
            <param name="startVertex">A value added to each index before reading a vertex from the vertex buffer.</param>
            <param name="startIndex">The location of the first index read by the GPU from the index buffer.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.DrawIndexedInstanced(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the indexed, instanced primitives.
            </summary>
            <param name="indicesCount">The indices count.</param>
            <param name="instanceCount">Number of instances to draw.</param>
            <param name="startInstance">A value added to each index before reading per-instance data from a vertex buffer.</param>
            <param name="startVertex">A value added to each index before reading a vertex from the vertex buffer.</param>
            <param name="startIndex">The location of the first index read by the GPU from the index buffer.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.DrawInstancedIndirect(FlaxEngine.GPUBuffer,System.UInt32)">
            <summary>
            Draws the instanced GPU-generated primitives. Buffer must contain GPUDrawIndirectArgs.
            </summary>
            <param name="bufferForArgs">The buffer with drawing arguments.</param>
            <param name="offsetForArgs">The aligned byte offset for arguments.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.DrawIndexedInstancedIndirect(FlaxEngine.GPUBuffer,System.UInt32)">
            <summary>
            Draws the instanced GPU-generated indexed primitives. Buffer must contain GPUDrawIndexedIndirectArgs.
            </summary>
            <param name="bufferForArgs">The buffer with drawing arguments.</param>
            <param name="offsetForArgs">The aligned byte offset for arguments.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.SetViewportAndScissors(System.Single,System.Single)">
            <summary>
            Sets the rendering viewport and scissor rectangle.
            </summary>
            <param name="width">The width (in pixels).</param>
            <param name="height">The height (in pixels).</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.SetViewportAndScissors(FlaxEngine.Viewport)">
            <summary>
            Sets the rendering viewport and scissor rectangle.
            </summary>
            <param name="viewport">The viewport.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.SetViewport(System.Single,System.Single)">
            <summary>
            Sets the rendering viewport.
            </summary>
            <param name="width">The width (in pixels).</param>
            <param name="height">The height (in pixels).</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.SetViewport(FlaxEngine.Viewport@)">
            <summary>
            Sets the rendering viewport.
            </summary>
            <param name="viewport">The viewport.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.SetScissor(FlaxEngine.Rectangle@)">
            <summary>
            Sets the scissor rectangle.
            </summary>
            <param name="scissorRect">The scissor rectangle.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.SetState(FlaxEngine.GPUPipelineState)">
            <summary>
            Sets the graphics pipeline state.
            </summary>
            <param name="state">The state to bind.</param>
        </member>
        <member name="M:FlaxEngine.GPUContext.GetState">
            <summary>
            Gets the current pipeline state binded to the graphics pipeline.
            </summary>
            <returns>The current state.</returns>
        </member>
        <member name="M:FlaxEngine.GPUContext.ClearState">
            <summary>
            Clears the context state.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUContext.FlushState">
            <summary>
            Flushes the internal cached context state with a command buffer.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUContext.Flush">
            <summary>
            Flushes the command buffer (calls GPU execution).
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUDevice">
            <summary>
            Graphics device object for rendering on GPU.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUDevice.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GPUDevice"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.Instance">
            <summary>
            The singleton instance of the graphics device.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.TotalGraphicsMemory">
            <summary>
            The total amount of graphics memory in bytes.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.Limits">
            <summary>
            The GPU limits.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.VideoOutputModes">
            <summary>
            The available video output modes.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.IsRendering">
            <summary>
            Returns true if device is during rendering state, otherwise false.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.RendererType">
            <summary>
            Gets the device renderer type.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.ShaderProfile">
            <summary>
            Gets device shader profile type.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.FeatureLevel">
            <summary>
            Gets device feature level type.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.MainContext">
            <summary>
            Gets the main GPU context.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.Adapter">
            <summary>
            Gets the adapter device.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.NativePtr">
            <summary>
            Gets the native pointer to the underlying graphics device. It's a low-level platform-specific handle.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.MemoryUsage">
            <summary>
            Gets the amount of memory usage by all the GPU resources (in bytes).
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.DefaultWhiteTexture">
            <summary>
            Gets the default solid white texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUDevice.DefaultBlackTexture">
            <summary>
            Gets the default solid black texture.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUDevice.GetFormatFeatures(FlaxEngine.PixelFormat)">
            <summary>
            Gets the supported features for the specified format (index is the pixel format value).
            </summary>
            <param name="format">The format.</param>
            <returns>The format features flags.</returns>
        </member>
        <member name="M:FlaxEngine.GPUDevice.CreateTexture(System.String)">
            <summary>
            Creates the texture.
            </summary>
            <param name="name">The resource name.</param>
            <returns>The texture.</returns>
        </member>
        <member name="M:FlaxEngine.GPUDevice.CreateBuffer(System.String)">
            <summary>
            Creates the buffer.
            </summary>
            <param name="name">The resource name.</param>
            <returns>The buffer.</returns>
        </member>
        <member name="M:FlaxEngine.GPUDevice.CreateSampler">
            <summary>
            Creates the texture sampler.
            </summary>
            <returns>The sampler.</returns>
        </member>
        <member name="T:FlaxEngine.GPUDevice.VideoOutputMode">
            <summary>
            Describes a video output display mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDevice.VideoOutputMode.Width">
            <summary>
            The resolution width (in pixel).
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDevice.VideoOutputMode.Height">
            <summary>
            The resolution height (in pixel).
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUDevice.VideoOutputMode.RefreshRate">
            <summary>
            The screen refresh rate (in hertz).
            </summary>
        </member>
        <member name="T:FlaxEngine.FormatSupport">
            <summary>
            Which resources are supported for a given format and given device.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.None">
            <summary>
            No features supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.Buffer">
            <summary>
            Buffer resources supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.InputAssemblyVertexBuffer">
            <summary>
            Vertex buffers supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.InputAssemblyIndexBuffer">
            <summary>
            Index buffers supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.StreamOutputBuffer">
            <summary>
            Streaming output buffers supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.Texture1D">
            <summary>
            1D texture resources supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.Texture2D">
            <summary>
            2D texture resources supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.Texture3D">
            <summary>
            3D texture resources supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.TextureCube">
            <summary>
            Cube texture resources supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.ShaderLoad">
            <summary>
            The shader Load function for texture objects is supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.ShaderSample">
            <summary>
            The shader Sample function for texture objects is supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.ShaderSampleComparison">
            <summary>
            The shader SampleCmp and SampleCmpLevelZero functions for texture objects are supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.ShaderSampleMonoText">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.Mip">
            <summary>
            Mipmaps are supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.MipAutogen">
            <summary>
            Automatic generation of mipmaps is supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.RenderTarget">
            <summary>
            Render targets are supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.Blendable">
            <summary>
            Blend operations supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.DepthStencil">
            <summary>
            Depth stencils supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.CpuLockable">
            <summary>
            CPU locking supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.MultisampleResolve">
            <summary>
            Multisample antialiasing (MSAA) resolve operations are supported.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.Display">
            <summary>
            Format can be displayed on screen.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.CastWithinBitLayout">
            <summary>
            Format can't be cast to another format.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.MultisampleRenderTarget">
            <summary>
            Format can be used as a multi-sampled render target.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.MultisampleLoad">
            <summary>
            Format can be used as a multi-sampled texture and read into a shader with the shader Load function.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.ShaderGather">
            <summary>
            Format can be used with the shader gather function.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.BackBufferCast">
            <summary>
            Format supports casting when the resource is a back buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.TypedUnorderedAccessView">
            <summary>
            Format can be used for an unordered access view.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.ShaderGatherComparison">
            <summary>
            Format can be used with the shader gather with comparison function.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.DecoderOutput">
            <summary>
            Format can be used with the decoder output.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.VideoProcessorOutput">
            <summary>
            Format can be used with the video processor output.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.VideoProcessorInput">
            <summary>
            Format can be used with the video processor input.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatSupport.VideoEncoder">
            <summary>
            Format can be used with the video encoder.
            </summary>
        </member>
        <member name="T:FlaxEngine.FormatFeatures">
            <summary>
            The features exposed for a particular format.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatFeatures.MSAALevelMax">
            <summary>
            Gets the maximum MSAA sample count for a particular <see cref="T:FlaxEngine.PixelFormat"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.FormatFeatures.Support">
            <summary>
            Support of a given format on the installed video device.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPULimits">
            <summary>
            Graphics Device limits and constraints descriptor.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.HasCompute">
            <summary>
            True if device supports Compute shaders.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.HasTessellation">
            <summary>
            True if device supports Tessellation shaders (domain and hull shaders).
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.HasGeometryShaders">
            <summary>
            True if device supports Geometry shaders.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.HasInstancing">
            <summary>
            True if device supports hardware geometry instancing.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.HasVolumeTextureRendering">
            <summary>
            True if device supports rendering to volume textures using Geometry shaders.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.HasDrawIndirect">
            <summary>
            True if device supports indirect drawing (including pixel shader write to UAV).
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.HasAppendConsumeBuffers">
            <summary>
            True if device supports append/consume buffers with counters.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.HasSeparateRenderTargetBlendState">
            <summary>
            True if device supports separate render target blending states.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.HasDepthAsSRV">
            <summary>
            True if device supports depth buffer texture as a shader resource view.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.HasReadOnlyDepth">
            <summary>
            True if device supports depth buffer texture as a readonly depth buffer (can be sampled in the shader while performing depth-test).
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.HasMultisampleDepthAsSRV">
            <summary>
            True if device supports multisampled depth buffer texture as a shader resource view.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.HasTypedUAVLoad">
            <summary>
            True if device supports reading from typed UAV in shader (common types such as R32G32B32A32, R16G16B16A16, R16, R8). This doesn't apply to single-component 32-bit formats.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.MaximumMipLevelsCount">
            <summary>
            The maximum amount of texture mip levels.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.MaximumTexture1DSize">
            <summary>
            The maximum size of the 1D texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.MaximumTexture1DArraySize">
            <summary>
            The maximum length of 1D textures array.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.MaximumTexture2DSize">
            <summary>
            The maximum size of the 2D texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.MaximumTexture2DArraySize">
            <summary>
            The maximum length of 2D textures array.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.MaximumTexture3DSize">
            <summary>
            The maximum size of the 3D texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.MaximumTextureCubeSize">
            <summary>
            The maximum size of the cube texture (both width and height).
            </summary>
        </member>
        <member name="F:FlaxEngine.GPULimits.MaximumSamplerAnisotropy">
            <summary>
            The maximum degree of anisotropic filtering used for texture sampling.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUPipelineState">
            <summary>
            Describes full graphics pipeline state within single object.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUPipelineState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GPUPipelineState"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUPipelineState.IsValid">
            <summary>
            Returns true if pipeline state is valid and ready to use
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUPipelineState.Init(FlaxEngine.GPUPipelineState.Description@)">
            <summary>
            Create new state data
            </summary>
            <param name="desc">Full pipeline state description</param>
            <returns>True if cannot create state, otherwise false</returns>
        </member>
        <member name="T:FlaxEngine.GPUPipelineState.Description">
            <summary>
            Pipeline state description
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.DepthWriteEnable">
            <summary>
            Enable/disable depth write
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.DepthTestEnable">
            <summary>
            Enable/disable depth test
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.DepthClipEnable">
            <summary>
            Enable/disable depth clipping
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.DepthFunc">
            <summary>
            A function that compares depth data against existing depth data
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.VS">
            <summary>
            Vertex shader program
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.HS">
            <summary>
            Hull shader program
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.DS">
            <summary>
            Domain shader program
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.GS">
            <summary>
            Geometry shader program
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.PS">
            <summary>
            Pixel shader program
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.PrimitiveTopologyType">
            <summary>
            Input primitives topology
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.Wireframe">
            <summary>
            True if use wireframe rendering, otherwise false
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.CullMode">
            <summary>
            Primitives culling mode
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUPipelineState.Description.BlendMode">
            <summary>
            Colors blending mode
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUPipelineState.Description.Default">
            <summary>
            Default description
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUPipelineState.Description.DefaultNoDepth">
            <summary>
            Default description without using depth buffer at all
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUPipelineState.Description.DefaultFullscreenTriangle">
            <summary>
            Default description for fullscreen triangle rendering
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUResource">
            <summary>
            The base class for all GPU resources.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GPUResource"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUResource.MemoryUsage">
            <summary>
            Gets amount of GPU memory used by this resource (in bytes). It's a rough estimation. GPU memory may be fragmented, compressed or sub-allocated so the actual memory pressure from this resource may vary (also depends on the current graphics backend).
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUResource.ReleaseGPU">
            <summary>
            Releases GPU resource data.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUResourceView">
            <summary>
            Interface for GPU resources views. Shared base class for texture and buffer views.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUResourceView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GPUResourceView"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.Graphics">
            <summary>
            Graphics device manager that creates, manages and releases graphics device and related objects.
            </summary>
        </member>
        <member name="P:FlaxEngine.Graphics.UseVSync">
            <summary>
            Enables rendering synchronization with the refresh rate of the display device to avoid "tearing" artifacts.
            </summary>
        </member>
        <member name="P:FlaxEngine.Graphics.AAQuality">
            <summary>
            Anti Aliasing quality setting.
            </summary>
        </member>
        <member name="P:FlaxEngine.Graphics.SSRQuality">
            <summary>
            Screen Space Reflections quality setting.
            </summary>
        </member>
        <member name="P:FlaxEngine.Graphics.SSAOQuality">
            <summary>
            Screen Space Ambient Occlusion quality setting.
            </summary>
        </member>
        <member name="P:FlaxEngine.Graphics.VolumetricFogQuality">
            <summary>
            Volumetric Fog quality setting.
            </summary>
        </member>
        <member name="P:FlaxEngine.Graphics.ShadowsQuality">
            <summary>
            The shadows quality.
            </summary>
        </member>
        <member name="P:FlaxEngine.Graphics.ShadowMapsQuality">
            <summary>
            The shadow maps quality (textures resolution).
            </summary>
        </member>
        <member name="P:FlaxEngine.Graphics.AllowCSMBlending">
            <summary>
            Enables cascades splits blending for directional light shadows.
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialDomain">
            <summary>
            Material domain type. Material domain defines the target usage of the material shader.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialDomain.Surface">
            <summary>
            The surface material. Can be used to render the scene geometry including models and skinned models.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialDomain.PostProcess">
            <summary>
            The post process material. Can be used to perform custom post-processing of the rendered frame.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialDomain.Decal">
            <summary>
            The deferred decal material. Can be used to apply custom overlay or surface modifications to the object surfaces in the world.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialDomain.GUI">
            <summary>
            The GUI shader. Can be used to draw custom control interface elements or to add custom effects to the GUI.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialDomain.Terrain">
            <summary>
            The terrain shader. Can be used only with landscape chunks geometry that use optimized vertex data and support multi-layered blending.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialDomain.Particle">
            <summary>
            The particle shader. Can be used only with particles geometry (sprites, trails and ribbons). Supports reading particle data on a GPU.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialDomain.Deformable">
            <summary>
            The deformable shader. Can be used only with objects that can be deformed (spline models).
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialDomain.VolumeParticle">
            <summary>
            The particle shader used for volumetric effects rendering such as Volumetric Fog.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialDomain.MAX">
            <summary>
            The count of items in the MaterialDomain enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialBlendMode">
            <summary>
            Material blending modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialBlendMode.Opaque">
            <summary>
            The opaque material. Used during GBuffer pass rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialBlendMode.Transparent">
            <summary>
            The transparent material. Used during Forward pass rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialBlendMode.Additive">
            <summary>
            The additive blend. Material color is used to add to color of the objects behind the surface. Used during Forward pass rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialBlendMode.Multiply">
            <summary>
            The multiply blend. Material color is used to multiply color of the objects behind the surface. Used during Forward pass rendering.
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialShadingModel">
            <summary>
            Material shading modes. Defines how material inputs and properties are combined to result the final surface color.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialShadingModel.Unlit">
            <summary>
            The unlit material. Emissive channel is used as an output color. Can perform custom lighting operations or just glow. Won't be affected by the lighting pipeline.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialShadingModel.Lit">
            <summary>
            The default lit material. The most common choice for the material surfaces.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialShadingModel.Subsurface">
            <summary>
            The subsurface material. Intended for materials like vax or skin that need light scattering to transport simulation through the object.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialShadingModel.Foliage">
            <summary>
            The foliage material. Intended for foliage materials like leaves and grass that need light scattering to transport simulation through the thin object.
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialFeaturesFlags">
            <summary>
            Material features flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialFeaturesFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialFeaturesFlags.Wireframe">
            <summary>
            The wireframe material.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialFeaturesFlags.DisableDepthTest">
            <summary>
            The depth test is disabled (material ignores depth).
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialFeaturesFlags.DisableDepthWrite">
            <summary>
            Disable depth buffer write (won't modify depth buffer value during rendering).
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialFeaturesFlags.InputWorldSpaceNormal">
            <summary>
            The flag used to indicate that material input normal vector is defined in the world space rather than tangent space.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialFeaturesFlags.DitheredLODTransition">
            <summary>
            The flag used to indicate that material uses dithered model LOD transition for smoother LODs switching.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialFeaturesFlags.DisableFog">
            <summary>
            The flag used to disable fog. The Forward Pass materials option.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialFeaturesFlags.DisableReflections">
            <summary>
            The flag used to disable reflections. The Forward Pass materials option.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialFeaturesFlags.DisableDistortion">
            <summary>
            The flag used to disable distortion effect (light refraction). The Forward Pass materials option.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialFeaturesFlags.PixelNormalOffsetRefraction">
            <summary>
            The flag used to enable refraction offset based on the difference between the per-pixel normal and the per-vertex normal. Useful for large water-like surfaces.
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialUsageFlags">
            <summary>
            Material features usage flags. Detected by the material generator to help graphics pipeline optimize rendering of material shaders.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialUsageFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialUsageFlags.UseMask">
            <summary>
            Material is using mask to discard some pixels. Masked materials are using full vertex buffer during shadow maps and depth pass rendering (need UVs).
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialUsageFlags.UseEmissive">
            <summary>
            The material is using emissive light.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialUsageFlags.UsePositionOffset">
            <summary>
            The material is using world position offset (it may be animated inside a shader).
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialUsageFlags.UseVertexColor">
            <summary>
            The material is using vertex colors. The render will try to feed the pipeline with a proper buffer so material can gather valid data.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialUsageFlags.UseNormal">
            <summary>
            The material is using per-pixel normal mapping.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialUsageFlags.UseDisplacement">
            <summary>
            The material is using position displacement (in domain shader).
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialUsageFlags.UseRefraction">
            <summary>
            The flag used to indicate that material uses refraction feature.
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialDecalBlendingMode">
            <summary>
            Decal material blending modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialDecalBlendingMode.Translucent">
            <summary>
            Decal will be fully blended with the material surface.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialDecalBlendingMode.Stain">
            <summary>
            Decal color will be blended with the material surface color (using multiplication).
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialDecalBlendingMode.Normal">
            <summary>
            Decal will blend the normal vector only.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialDecalBlendingMode.Emissive">
            <summary>
            Decal will apply the emissive light only.
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialSceneTextures">
            <summary>
            Material input scene textures. Special inputs from the graphics pipeline.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialSceneTextures.SceneColor">
            <summary>
            The scene color.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialSceneTextures.SceneDepth">
            <summary>
            The scene depth.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialSceneTextures.DiffuseColor">
            <summary>
            The material diffuse color.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialSceneTextures.SpecularColor">
            <summary>
            The material specular color.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialSceneTextures.WorldNormal">
            <summary>
            The material world space normal.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialSceneTextures.AmbientOcclusion">
            <summary>
            The ambient occlusion.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialSceneTextures.Metalness">
            <summary>
            The material metalness value.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialSceneTextures.Roughness">
            <summary>
            The material roughness value.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialSceneTextures.Specular">
            <summary>
            The material specular value.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialSceneTextures.BaseColor">
            <summary>
            The material color.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialSceneTextures.ShadingModel">
            <summary>
            The material shading mode.
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialInfo">
            <summary>
            Structure with basic information about the material surface. It describes how material is reacting on light and which graphical features of it requires to render.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialInfo.Domain">
            <summary>
            The material shader domain.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialInfo.BlendMode">
            <summary>
            The blending mode for rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialInfo.ShadingModel">
            <summary>
            The shading mode for lighting.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialInfo.UsageFlags">
            <summary>
            The usage flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialInfo.FeaturesFlags">
            <summary>
            The features usage flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialInfo.DecalBlendingMode">
            <summary>
            The decal material blending mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialInfo.PostFxLocation">
            <summary>
            The post fx material rendering location.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialInfo.CullMode">
            <summary>
            The primitives culling mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialInfo.MaskThreshold">
            <summary>
            The mask threshold.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialInfo.OpacityThreshold">
            <summary>
            The opacity threshold.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialInfo.TessellationMode">
            <summary>
            The tessellation mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialInfo.MaxTessellationFactor">
            <summary>
            The maximum tessellation factor (used only if material uses tessellation).
            </summary>
        </member>
        <member name="M:FlaxEngine.MaterialInfo.CreateDefault">
            <summary>
            Creates the default <see cref="T:FlaxEngine.MaterialInfo"/>.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.MaterialInfo.op_Equality(FlaxEngine.MaterialInfo,FlaxEngine.MaterialInfo)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.MaterialInfo.op_Inequality(FlaxEngine.MaterialInfo,FlaxEngine.MaterialInfo)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.MaterialInfo.Equals(FlaxEngine.MaterialInfo)">
            <summary>
            Compares with the other material info and returns true if both values are equal.
            </summary>
            <param name="other">The other info.</param>
            <returns>True if both objects are equal, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.MaterialInfo.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.MaterialInfo.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.MaterialParameter">
            <summary>
            Material variable object. Allows to modify material parameter value at runtime.
            </summary>
        </member>
        <member name="M:FlaxEngine.MaterialParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.MaterialParameter"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialParameter.ParameterID">
            <summary>
            Gets the parameter ID (not the parameter instance Id but the original parameter ID).
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialParameter.ParameterType">
            <summary>
            Gets the parameter type.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialParameter.Name">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialParameter.IsPublic">
            <summary>
            Returns true is parameter is public visible.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialParameter.IsOverride">
            <summary>
            Returns true is parameter is overriding the value.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
        </member>
        <member name="T:FlaxEngine.MaterialSlot">
            <summary>
            The material slot descriptor that specifies how to render geometry using it.
            </summary>
        </member>
        <member name="M:FlaxEngine.MaterialSlot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.MaterialSlot"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialSlot.Material">
            <summary>
            The material to use for rendering.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialSlot.ShadowsMode">
            <summary>
            The shadows casting mode by this visual element.
            </summary>
        </member>
        <member name="P:FlaxEngine.MaterialSlot.Name">
            <summary>
            The slot name.
            </summary>
        </member>
        <member name="T:FlaxEngine.Mesh">
            <summary>
            Represents part of the model that is made of vertices and can be rendered using custom material and transformation.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mesh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Mesh"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mesh.HasVertexColors">
            <summary>
            Determines whether this mesh has a vertex colors buffer.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mesh.HasLightmapUVs">
            <summary>
            Determines whether this mesh contains valid lightmap texture coordinates data.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mesh.Draw(FlaxEngine.RenderContext@,FlaxEngine.MaterialBase,FlaxEngine.Matrix@,FlaxEngine.StaticFlags,System.Boolean,FlaxEngine.DrawPass,System.Single)">
            <summary>
            Draws the mesh.
            </summary>
            <param name="renderContext">The rendering context.</param>
            <param name="material">The material to use for rendering.</param>
            <param name="world">The world transformation of the model.</param>
            <param name="flags">The object static flags.</param>
            <param name="receiveDecals">True if rendered geometry can receive decals, otherwise false.</param>
            <param name="drawModes">The draw passes to use for rendering this object.</param>
            <param name="perInstanceRandom">The random per-instance value (normalized to range 0-1).</param>
        </member>
        <member name="T:FlaxEngine.Mesh.Vertex0">
            <summary>
            The Vertex Buffer 0 structure format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex0.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="T:FlaxEngine.Mesh.Vertex1">
            <summary>
            The Vertex Buffer 1 structure format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex1.TexCoord">
            <summary>
            The texture coordinates (packed).
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex1.Normal">
            <summary>
            The normal vector (packed).
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex1.Tangent">
            <summary>
            The tangent vector (packed). Bitangent sign in component A.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex1.LightmapUVs">
            <summary>
            The lightmap UVs (packed).
            </summary>
        </member>
        <member name="T:FlaxEngine.Mesh.Vertex2">
            <summary>
            The Vertex Buffer 2 structure format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex2.Color">
            <summary>
            The vertex color.
            </summary>
        </member>
        <member name="T:FlaxEngine.Mesh.Vertex">
            <summary>
            The raw Vertex Buffer structure format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex.TexCoord">
            <summary>
            The texture coordinates.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex.Normal">
            <summary>
            The normal vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex.Tangent">
            <summary>
            The tangent vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex.Bitangent">
            <summary>
            The tangent vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex.LightmapUVs">
            <summary>
            The lightmap UVs.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mesh.Vertex.Color">
            <summary>
            The vertex color.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mesh.ParentModel">
            <summary>
            Gets the parent model asset.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mesh.MaterialSlot">
            <summary>
            Gets the material slot used by this mesh during rendering.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mesh.IndexBufferFormat">
            <summary>
            Gets a format of the mesh index buffer.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mesh.UpdateMesh(FlaxEngine.Vector3[],System.Int32[],FlaxEngine.Vector3[],FlaxEngine.Vector3[],FlaxEngine.Vector2[],FlaxEngine.Color32[])">
            <summary>
            Updates the model mesh vertex and index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="vertices">The mesh vertices positions. Cannot be null.</param>
            <param name="triangles">The mesh index buffer (clockwise triangles). Uses 32-bit stride buffer. Cannot be null.</param>
            <param name="normals">The normal vectors (per vertex).</param>
            <param name="tangents">The normal vectors (per vertex). Use null to compute them from normal vectors.</param>
            <param name="uv">The texture coordinates (per vertex).</param>
            <param name="colors">The vertex colors (per vertex).</param>
        </member>
        <member name="M:FlaxEngine.Mesh.UpdateMesh(System.Collections.Generic.List{FlaxEngine.Vector3},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{FlaxEngine.Vector3},System.Collections.Generic.List{FlaxEngine.Vector3},System.Collections.Generic.List{FlaxEngine.Vector2},System.Collections.Generic.List{FlaxEngine.Color32})">
            <summary>
            Updates the model mesh vertex and index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="vertices">The mesh vertices positions. Cannot be null.</param>
            <param name="triangles">The mesh index buffer (clockwise triangles). Uses 32-bit stride buffer. Cannot be null.</param>
            <param name="normals">The normal vectors (per vertex).</param>
            <param name="tangents">The normal vectors (per vertex). Use null to compute them from normal vectors.</param>
            <param name="uv">The texture coordinates (per vertex).</param>
            <param name="colors">The vertex colors (per vertex).</param>
        </member>
        <member name="M:FlaxEngine.Mesh.UpdateMesh(FlaxEngine.Vector3[],System.UInt32[],FlaxEngine.Vector3[],FlaxEngine.Vector3[],FlaxEngine.Vector2[],FlaxEngine.Color32[])">
            <summary>
            Updates the model mesh vertex and index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="vertices">The mesh vertices positions. Cannot be null.</param>
            <param name="triangles">The mesh index buffer (clockwise triangles). Uses 32-bit stride buffer. Cannot be null.</param>
            <param name="normals">The normal vectors (per vertex).</param>
            <param name="tangents">The normal vectors (per vertex). Use null to compute them from normal vectors.</param>
            <param name="uv">The texture coordinates (per vertex).</param>
            <param name="colors">The vertex colors (per vertex).</param>
        </member>
        <member name="M:FlaxEngine.Mesh.UpdateMesh(System.Collections.Generic.List{FlaxEngine.Vector3},System.Collections.Generic.List{System.UInt32},System.Collections.Generic.List{FlaxEngine.Vector3},System.Collections.Generic.List{FlaxEngine.Vector3},System.Collections.Generic.List{FlaxEngine.Vector2},System.Collections.Generic.List{FlaxEngine.Color32})">
            <summary>
            Updates the model mesh vertex and index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="vertices">The mesh vertices positions. Cannot be null.</param>
            <param name="triangles">The mesh index buffer (clockwise triangles). Uses 32-bit stride buffer. Cannot be null.</param>
            <param name="normals">The normal vectors (per vertex).</param>
            <param name="tangents">The normal vectors (per vertex). Use null to compute them from normal vectors.</param>
            <param name="uv">The texture coordinates (per vertex).</param>
            <param name="colors">The vertex colors (per vertex).</param>
        </member>
        <member name="M:FlaxEngine.Mesh.UpdateMesh(FlaxEngine.Vector3[],System.UInt16[],FlaxEngine.Vector3[],FlaxEngine.Vector3[],FlaxEngine.Vector2[],FlaxEngine.Color32[])">
            <summary>
            Updates the model mesh vertex and index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="vertices">The mesh vertices positions. Cannot be null.</param>
            <param name="triangles">The mesh index buffer (clockwise triangles). Uses 16-bit stride buffer. Cannot be null.</param>
            <param name="normals">The normal vectors (per vertex).</param>
            <param name="tangents">The tangent vectors (per vertex). Use null to compute them from normal vectors.</param>
            <param name="uv">The texture coordinates (per vertex).</param>
            <param name="colors">The vertex colors (per vertex).</param>
        </member>
        <member name="M:FlaxEngine.Mesh.UpdateMesh(System.Collections.Generic.List{FlaxEngine.Vector3},System.Collections.Generic.List{System.UInt16},System.Collections.Generic.List{FlaxEngine.Vector3},System.Collections.Generic.List{FlaxEngine.Vector3},System.Collections.Generic.List{FlaxEngine.Vector2},System.Collections.Generic.List{FlaxEngine.Color32})">
            <summary>
            Updates the model mesh vertex and index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="vertices">The mesh vertices positions. Cannot be null.</param>
            <param name="triangles">The mesh index buffer (clockwise triangles). Uses 16-bit stride buffer. Cannot be null.</param>
            <param name="normals">The normal vectors (per vertex).</param>
            <param name="tangents">The tangent vectors (per vertex). Use null to compute them from normal vectors.</param>
            <param name="uv">The texture coordinates (per vertex).</param>
            <param name="colors">The vertex colors (per vertex).</param>
        </member>
        <member name="M:FlaxEngine.Mesh.UpdateTriangles(System.Int32[])">
            <summary>
            Updates the model mesh index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="triangles">The mesh index buffer (triangles). Uses 32-bit stride buffer. Cannot be null.</param>
        </member>
        <member name="M:FlaxEngine.Mesh.UpdateTriangles(System.Collections.Generic.List{System.Int32})">
            <summary>
            Updates the model mesh index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="triangles">The mesh index buffer (triangles). Uses 32-bit stride buffer. Cannot be null.</param>
        </member>
        <member name="M:FlaxEngine.Mesh.UpdateTriangles(System.UInt16[])">
            <summary>
            Updates the model mesh index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="triangles">The mesh index buffer (triangles). Uses 16-bit stride buffer. Cannot be null.</param>
        </member>
        <member name="M:FlaxEngine.Mesh.UpdateTriangles(System.Collections.Generic.List{System.UInt16})">
            <summary>
            Updates the model mesh index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="triangles">The mesh index buffer (triangles). Uses 16-bit stride buffer. Cannot be null.</param>
        </member>
        <member name="M:FlaxEngine.Mesh.DownloadVertexBuffer0(System.Boolean)">
            <summary>
            Downloads the first vertex buffer that contains mesh vertices data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Platform.IsInMainThread"/>).
            </summary>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="M:FlaxEngine.Mesh.DownloadVertexBuffer1(System.Boolean)">
            <summary>
            Downloads the second vertex buffer that contains mesh vertices data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Platform.IsInMainThread"/>).
            </summary>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="M:FlaxEngine.Mesh.DownloadVertexBuffer2(System.Boolean)">
            <summary>
            Downloads the third vertex buffer that contains mesh vertices data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Platform.IsInMainThread"/>).
            </summary>
            <remarks>
            If mesh has no vertex colors (stored in vertex buffer 2) the returned value is null.
            </remarks>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data or null if mesh has no vertex colors.</returns>
        </member>
        <member name="M:FlaxEngine.Mesh.DownloadVertexBuffer(System.Boolean)">
            <summary>
            Downloads the raw vertex buffer that contains mesh vertices data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Platform.IsInMainThread"/>).
            </summary>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="M:FlaxEngine.Mesh.DownloadIndexBuffer(System.Boolean)">
            <summary>
            Downloads the index buffer that contains mesh triangles data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Platform.IsInMainThread"/>).
            </summary>
            <remarks>If mesh index buffer format (see <see cref="P:FlaxEngine.Mesh.IndexBufferFormat"/>) is <see cref="F:FlaxEngine.PixelFormat.R16_UInt"/> then it's faster to call .</remarks>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="M:FlaxEngine.Mesh.DownloadIndexBufferUShort(System.Boolean)">
            <summary>
            Downloads the index buffer that contains mesh triangles data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Platform.IsInMainThread"/>).
            </summary>
            <remarks>If mesh index buffer format (see <see cref="P:FlaxEngine.Mesh.IndexBufferFormat"/>) is <see cref="F:FlaxEngine.PixelFormat.R32_UInt"/> then data won't be downloaded.</remarks>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="T:FlaxEngine.MeshBase">
            <summary>
            Base class for model resources meshes.
            </summary>
        </member>
        <member name="M:FlaxEngine.MeshBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.MeshBase"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.MeshBase.ModelBase">
            <summary>
            Gets the model owning this mesh.
            </summary>
        </member>
        <member name="P:FlaxEngine.MeshBase.LODIndex">
            <summary>
            Gets the mesh parent LOD index.
            </summary>
        </member>
        <member name="P:FlaxEngine.MeshBase.Index">
            <summary>
            Gets the mesh index.
            </summary>
        </member>
        <member name="P:FlaxEngine.MeshBase.TriangleCount">
            <summary>
            Gets the triangle count.
            </summary>
        </member>
        <member name="P:FlaxEngine.MeshBase.VertexCount">
            <summary>
            Gets the vertex count.
            </summary>
        </member>
        <member name="P:FlaxEngine.MeshBase.Box">
            <summary>
            Gets the box.
            </summary>
        </member>
        <member name="P:FlaxEngine.MeshBase.Sphere">
            <summary>
            Gets the sphere.
            </summary>
        </member>
        <member name="P:FlaxEngine.MeshBase.Use16BitIndexBuffer">
            <summary>
            Determines whether this mesh is using 16 bit index buffer, otherwise it's 32 bit.
            </summary>
        </member>
        <member name="P:FlaxEngine.MeshBase.MaterialSlotIndex">
            <summary>
            Gets or sets the index of the material slot to use during this mesh rendering.
            </summary>
        </member>
        <member name="T:FlaxEngine.ModelInstanceEntry">
            <summary>
            The model instance entry that describes how to draw it.
            </summary>
        </member>
        <member name="F:FlaxEngine.ModelInstanceEntry.Material">
            <summary>
            The mesh surface material used for the rendering. If not assigned the default value will be used from the model asset.
            </summary>
        </member>
        <member name="F:FlaxEngine.ModelInstanceEntry.ShadowsMode">
            <summary>
            The shadows casting mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.ModelInstanceEntry.Visible">
            <summary>
            Determines whenever this mesh is visible.
            </summary>
        </member>
        <member name="F:FlaxEngine.ModelInstanceEntry.ReceiveDecals">
            <summary>
            Determines whenever this mesh can receive decals.
            </summary>
        </member>
        <member name="T:FlaxEngine.ModelLOD">
            <summary>
            Represents single Level Of Detail for the model. Contains a collection of the meshes.
            </summary>
        </member>
        <member name="M:FlaxEngine.ModelLOD.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.ModelLOD"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelLOD.ScreenSize">
            <summary>
            The screen size to switch LODs. Bottom limit of the model screen size to render this LOD.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelLOD.Meshes">
            <summary>
            The meshes array.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelLOD.VertexCount">
            <summary>
            Gets the vertex count for this model LOD level.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelLOD.Box">
            <summary>
            Gets the bounding box combined for all meshes in this model LOD.
            </summary>
        </member>
        <member name="M:FlaxEngine.ModelLOD.Draw(FlaxEngine.RenderContext@,FlaxEngine.MaterialBase,FlaxEngine.Matrix@,FlaxEngine.StaticFlags,System.Boolean,FlaxEngine.DrawPass,System.Single)">
            <summary>
            Draws the meshes from the model LOD.
            </summary>
            <param name="renderContext">The rendering context.</param>
            <param name="material">The material to use for rendering.</param>
            <param name="world">The world transformation of the model.</param>
            <param name="flags">The object static flags.</param>
            <param name="receiveDecals">True if rendered geometry can receive decals, otherwise false.</param>
            <param name="drawModes">The draw passes to use for rendering this object.</param>
            <param name="perInstanceRandom">The random per-instance value (normalized to range 0-1).</param>
        </member>
        <member name="T:FlaxEngine.SkeletonNode">
            <summary>
            Describes a single skeleton node data. Used by the runtime.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkeletonNode.ParentIndex">
            <summary>
            The parent node index. The root node uses value -1.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkeletonNode.LocalTransform">
            <summary>
            The local transformation of the node, relative to the parent node.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkeletonNode.Name">
            <summary>
            The name of this node.
            </summary>
        </member>
        <member name="T:FlaxEngine.SkeletonBone">
            <summary>
            Describes a single skeleton bone data. Used by the runtime. Skeleton bones are subset of the skeleton nodes collection that are actually used by the skinned model meshes.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkeletonBone.ParentIndex">
            <summary>
            The parent bone index. The root bone uses value -1.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkeletonBone.NodeIndex">
            <summary>
            The index of the skeleton node where bone is 'attached'. Used as a animation transformation source.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkeletonBone.LocalTransform">
            <summary>
            The local transformation of the bone, relative to the parent bone (in bind pose).
            </summary>
        </member>
        <member name="F:FlaxEngine.SkeletonBone.OffsetMatrix">
            <summary>
            The matrix that transforms from mesh space to bone space in bind pose (inverse bind pose).
            </summary>
        </member>
        <member name="T:FlaxEngine.SkinnedMesh">
            <summary>
            Represents part of the skinned model that is made of vertices and can be rendered using custom material, transformation and skeleton bones hierarchy.
            </summary>
        </member>
        <member name="M:FlaxEngine.SkinnedMesh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SkinnedMesh"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.SkinnedMesh.Vertex0">
            <summary>
            The Vertex Buffer 0 structure format.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex0.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex0.TexCoord">
            <summary>
            The texture coordinates (packed).
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex0.Normal">
            <summary>
            The normal vector (packed).
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex0.Tangent">
            <summary>
            The tangent vector (packed). Bitangent sign in component A.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex0.BlendIndices">
            <summary>
            The blend indices (packed). Up to 4 bones.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex0.BlendWeights">
            <summary>
            The blend weights (normalized, packed). Up to 4 bones.
            </summary>
        </member>
        <member name="T:FlaxEngine.SkinnedMesh.Vertex">
            <summary>
            The raw Vertex Buffer structure format.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex.TexCoord">
            <summary>
            The texture coordinates.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex.Normal">
            <summary>
            The normal vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex.Tangent">
            <summary>
            The tangent vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex.Bitangent">
            <summary>
            The tangent vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex.BlendIndices">
            <summary>
            The blend indices. Up to 4 bones.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkinnedMesh.Vertex.BlendWeights">
            <summary>
            The blend weights (normalized). Up to 4 bones.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedMesh.ParentSkinnedModel">
            <summary>
            Gets the parent model asset.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedMesh.MaterialSlot">
            <summary>
            Gets the material slot used by this mesh during rendering.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedMesh.IndexBufferFormat">
            <summary>
            Gets a format of the mesh index buffer.
            </summary>
        </member>
        <member name="M:FlaxEngine.SkinnedMesh.UpdateMesh(FlaxEngine.Vector3[],System.Int32[],FlaxEngine.Int4[],FlaxEngine.Vector4[],FlaxEngine.Vector3[],FlaxEngine.Vector3[],FlaxEngine.Vector2[])">
            <summary>
            Updates the skinned model mesh vertex and index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="vertices">The mesh vertices positions. Cannot be null.</param>
            <param name="triangles">The mesh index buffer (clockwise triangles). Uses 32-bit stride buffer. Cannot be null.</param>
            <param name="blendIndices">The skinned mesh blend indices buffer. Contains indices of the skeleton bones (up to 4 bones per vertex) to use for vertex position blending. Cannot be null.</param>
            <param name="blendWeights">The skinned mesh blend weights buffer (normalized). Contains weights per blend bone (up to 4 bones per vertex) of the skeleton bones to mix for vertex position blending. Cannot be null.</param>
            <param name="normals">The normal vectors (per vertex).</param>
            <param name="tangents">The normal vectors (per vertex). Use null to compute them from normal vectors.</param>
            <param name="uv">The texture coordinates (per vertex).</param>
        </member>
        <member name="M:FlaxEngine.SkinnedMesh.UpdateMesh(FlaxEngine.Vector3[],System.UInt32[],FlaxEngine.Int4[],FlaxEngine.Vector4[],FlaxEngine.Vector3[],FlaxEngine.Vector3[],FlaxEngine.Vector2[])">
            <summary>
            Updates the skinned model mesh vertex and index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="vertices">The mesh vertices positions. Cannot be null.</param>
            <param name="triangles">The mesh index buffer (clockwise triangles). Uses 32-bit stride buffer. Cannot be null.</param>
            <param name="blendIndices">The skinned mesh blend indices buffer. Contains indices of the skeleton bones (up to 4 bones per vertex) to use for vertex position blending. Cannot be null.</param>
            <param name="blendWeights">The skinned mesh blend weights buffer (normalized). Contains weights per blend bone (up to 4 bones per vertex) of the skeleton bones to mix for vertex position blending. Cannot be null.</param>
            <param name="normals">The normal vectors (per vertex).</param>
            <param name="tangents">The normal vectors (per vertex). Use null to compute them from normal vectors.</param>
            <param name="uv">The texture coordinates (per vertex).</param>
        </member>
        <member name="M:FlaxEngine.SkinnedMesh.UpdateMesh(FlaxEngine.Vector3[],System.UInt16[],FlaxEngine.Int4[],FlaxEngine.Vector4[],FlaxEngine.Vector3[],FlaxEngine.Vector3[],FlaxEngine.Vector2[])">
            <summary>
            Updates the skinned model mesh vertex and index buffer data.
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            Mesh data will be cached and uploaded to the GPU with a delay.
            </summary>
            <param name="vertices">The mesh vertices positions. Cannot be null.</param>
            <param name="triangles">The mesh index buffer (clockwise triangles). Uses 16-bit stride buffer. Cannot be null.</param>
            <param name="blendIndices">The skinned mesh blend indices buffer. Contains indices of the skeleton bones (up to 4 bones per vertex) to use for vertex position blending. Cannot be null.</param>
            <param name="blendWeights">The skinned mesh blend weights buffer (normalized). Contains weights per blend bone (up to 4 bones per vertex) of the skeleton bones to mix for vertex position blending. Cannot be null.</param>
            <param name="normals">The normal vectors (per vertex).</param>
            <param name="tangents">The tangent vectors (per vertex). Use null to compute them from normal vectors.</param>
            <param name="uv">The texture coordinates (per vertex).</param>
        </member>
        <member name="M:FlaxEngine.SkinnedMesh.DownloadVertexBuffer0(System.Boolean)">
            <summary>
            Downloads the first vertex buffer that contains mesh vertices data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Platform.IsInMainThread"/>).
            </summary>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedMesh.DownloadVertexBuffer(System.Boolean)">
            <summary>
            Downloads the raw vertex buffer that contains mesh vertices data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Platform.IsInMainThread"/>).
            </summary>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedMesh.DownloadIndexBuffer(System.Boolean)">
            <summary>
            Downloads the index buffer that contains mesh triangles data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Platform.IsInMainThread"/>).
            </summary>
            <remarks>If mesh index buffer format (see <see cref="P:FlaxEngine.SkinnedMesh.IndexBufferFormat"/>) is <see cref="F:FlaxEngine.PixelFormat.R16_UInt"/> then it's faster to call .</remarks>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="M:FlaxEngine.SkinnedMesh.DownloadIndexBufferUShort(System.Boolean)">
            <summary>
            Downloads the index buffer that contains mesh triangles data. To download data from GPU set <paramref name="forceGpu"/> to true and call this method from the thread other than main thread (see <see cref="P:FlaxEngine.Platform.IsInMainThread"/>).
            </summary>
            <remarks>If mesh index buffer format (see <see cref="P:FlaxEngine.SkinnedMesh.IndexBufferFormat"/>) is <see cref="F:FlaxEngine.PixelFormat.R32_UInt"/> then data won't be downloaded.</remarks>
            <param name="forceGpu">If set to <c>true</c> the data will be downloaded from the GPU, otherwise it can be loaded from the drive (source asset file) or from memory (if cached). Downloading mesh from GPU requires this call to be made from the other thread than main thread. Virtual assets are always downloaded from GPU memory due to lack of dedicated storage container for the asset data.</param>
            <returns>The gathered data.</returns>
        </member>
        <member name="T:FlaxEngine.SkinnedModelLOD">
            <summary>
            Represents single Level Of Detail for the skinned model. Contains a collection of the meshes.
            </summary>
        </member>
        <member name="M:FlaxEngine.SkinnedModelLOD.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SkinnedModelLOD"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedModelLOD.ScreenSize">
            <summary>
            The screen size to switch LODs. Bottom limit of the model screen size to render this LOD.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedModelLOD.Meshes">
            <summary>
            The meshes array.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkinnedModelLOD.Box">
            <summary>
            Gets the bounding box combined for all meshes in this model LOD.
            </summary>
        </member>
        <member name="T:FlaxEngine.PixelFormat">
            <summary>
            Enumeration with all pixel formats used by the graphics pipeline.
            </summary>
            <remarks>
            Reference: https://msdn.microsoft.com/en-us/library/windows/desktop/bb173059(v=vs.85).aspx
            </remarks>
        </member>
        <member name="F:FlaxEngine.PixelFormat.Unknown">
            <summary>
            The format is not known.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32B32A32_Typeless">
            <summary>
            A four-component, 128-bit typeless format that supports 32 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32B32A32_Float">
            <summary>
            A four-component, 128-bit floating-point format that supports 32 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32B32A32_UInt">
            <summary>
            A four-component, 128-bit unsigned-integer format that supports 32 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32B32A32_SInt">
            <summary>
            A four-component, 128-bit signed-integer format that supports 32 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32B32_Typeless">
            <summary>
            A three-component, 96-bit typeless format that supports 32 bits per color channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32B32_Float">
            <summary>
            A three-component, 96-bit floating-point format that supports 32 bits per color channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32B32_UInt">
            <summary>
            A three-component, 96-bit unsigned-integer format that supports 32 bits per color channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32B32_SInt">
            <summary>
            A three-component, 96-bit signed-integer format that supports 32 bits per color channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16B16A16_Typeless">
            <summary>
            A four-component, 64-bit typeless format that supports 16 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16B16A16_Float">
            <summary>
            A four-component, 64-bit floating-point format that supports 16 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16B16A16_UNorm">
            <summary>
            A four-component, 64-bit unsigned-normalized-integer format that supports 16 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16B16A16_UInt">
            <summary>
            A four-component, 64-bit unsigned-integer format that supports 16 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16B16A16_SNorm">
            <summary>
            A four-component, 64-bit signed-normalized-integer format that supports 16 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16B16A16_SInt">
            <summary>
            A four-component, 64-bit signed-integer format that supports 16 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32_Typeless">
            <summary>
            A two-component, 64-bit typeless format that supports 32 bits for the red channel and 32 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32_Float">
            <summary>
            A two-component, 64-bit floating-point format that supports 32 bits for the red channel and 32 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32_UInt">
            <summary>
            A two-component, 64-bit unsigned-integer format that supports 32 bits for the red channel and 32 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G32_SInt">
            <summary>
            A two-component, 64-bit signed-integer format that supports 32 bits for the red channel and 32 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32G8X24_Typeless">
            <summary>
            A two-component, 64-bit typeless format that supports 32 bits for the red channel, 8 bits for the green channel, and 24 bits are unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.D32_Float_S8X24_UInt">
            <summary>
            A 32-bit floating-point component, and two unsigned-integer components (with an additional 32 bits). This format supports 32-bit depth, 8-bit stencil, and 24 bits are unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32_Float_X8X24_Typeless">
            <summary>
            A 32-bit floating-point component, and two typeless components (with an additional 32 bits). This format supports 32-bit red channel, 8 bits are unused, and 24 bits are unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.X32_Typeless_G8X24_UInt">
            <summary>
            A 32-bit typeless component, and two unsigned-integer components (with an additional 32 bits). This format has 32 bits unused, 8 bits for green channel, and 24 bits are unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R10G10B10A2_Typeless">
            <summary>
            A four-component, 32-bit typeless format that supports 10 bits for each color and 2 bits for alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R10G10B10A2_UNorm">
            <summary>
            A four-component, 32-bit unsigned-normalized-integer format that supports 10 bits for each color and 2 bits for alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R10G10B10A2_UInt">
            <summary>
            A four-component, 32-bit unsigned-integer format that supports 10 bits for each color and 2 bits for alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R11G11B10_Float">
            <summary>
            Three partial-precision floating-point numbers encoded into a single 32-bit value (a variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent). There are no sign bits, and there is a 5-bit biased (15) exponent for each channel, 6-bit mantissa for R and G, and a 5-bit mantissa for B.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8B8A8_Typeless">
            <summary>
            A four-component, 32-bit typeless format that supports 8 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8B8A8_UNorm">
            <summary>
            A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8B8A8_UNorm_sRGB">
            <summary>
            A four-component, 32-bit unsigned-normalized integer sRGB format that supports 8 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8B8A8_UInt">
            <summary>
            A four-component, 32-bit unsigned-integer format that supports 8 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8B8A8_SNorm">
            <summary>
            A four-component, 32-bit signed-normalized-integer format that supports 8 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8B8A8_SInt">
            <summary>
            A four-component, 32-bit signed-integer format that supports 8 bits per channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16_Typeless">
            <summary>
            A two-component, 32-bit typeless format that supports 16 bits for the red channel and 16 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16_Float">
            <summary>
            A two-component, 32-bit floating-point format that supports 16 bits for the red channel and 16 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16_UNorm">
            <summary>
            A two-component, 32-bit unsigned-normalized-integer format that supports 16 bits each for the green and red channels.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16_UInt">
            <summary>
            A two-component, 32-bit unsigned-integer format that supports 16 bits for the red channel and 16 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16_SNorm">
            <summary>
            A two-component, 32-bit signed-normalized-integer format that supports 16 bits for the red channel and 16 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16G16_SInt">
            <summary>
            A two-component, 32-bit signed-integer format that supports 16 bits for the red channel and 16 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32_Typeless">
            <summary>
            A single-component, 32-bit typeless format that supports 32 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.D32_Float">
            <summary>
            A single-component, 32-bit floating-point format that supports 32 bits for depth.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32_Float">
            <summary>
            A single-component, 32-bit floating-point format that supports 32 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32_UInt">
            <summary>
            A single-component, 32-bit unsigned-integer format that supports 32 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R32_SInt">
            <summary>
            A single-component, 32-bit signed-integer format that supports 32 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R24G8_Typeless">
            <summary>
            A two-component, 32-bit typeless format that supports 24 bits for the red channel and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.D24_UNorm_S8_UInt">
            <summary>
            A 32-bit z-buffer format that supports 24 bits for depth and 8 bits for stencil.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R24_UNorm_X8_Typeless">
            <summary>
            A 32-bit format, that contains a 24 bit, single-component, unsigned-normalized integer, with an additional typeless 8 bits. This format has 24 bits red channel and 8 bits unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.X24_Typeless_G8_UInt">
            <summary>
            A 32-bit format, that contains a 24 bit, single-component, typeless format, with an additional 8 bit unsigned integer component. This format has 24 bits unused and 8 bits green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8_Typeless">
            <summary>
            A two-component, 16-bit typeless format that supports 8 bits for the red channel and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8_UNorm">
            <summary>
            A two-component, 16-bit unsigned-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8_UInt">
            <summary>
            A two-component, 16-bit unsigned-integer format that supports 8 bits for the red channel and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8_SNorm">
            <summary>
            A two-component, 16-bit signed-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8_SInt">
            <summary>
            A two-component, 16-bit signed-integer format that supports 8 bits for the red channel and 8 bits for the green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16_Typeless">
            <summary>
            A single-component, 16-bit typeless format that supports 16 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16_Float">
            <summary>
            A single-component, 16-bit floating-point format that supports 16 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.D16_UNorm">
            <summary>
            A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for depth.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16_UNorm">
            <summary>
            A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16_UInt">
            <summary>
            A single-component, 16-bit unsigned-integer format that supports 16 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16_SNorm">
            <summary>
            A single-component, 16-bit signed-normalized-integer format that supports 16 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R16_SInt">
            <summary>
            A single-component, 16-bit signed-integer format that supports 16 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8_Typeless">
            <summary>
            A single-component, 8-bit typeless format that supports 8 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8_UNorm">
            <summary>
            A single-component, 8-bit unsigned-normalized-integer format that supports 8 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8_UInt">
            <summary>
            A single-component, 8-bit unsigned-integer format that supports 8 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8_SNorm">
            <summary>
            A single-component, 8-bit signed-normalized-integer format that supports 8 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8_SInt">
            <summary>
            A single-component, 8-bit signed-integer format that supports 8 bits for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.A8_UNorm">
            <summary>
            A single-component, 8-bit unsigned-normalized-integer format for alpha only.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R1_UNorm">
            <summary>
            A single-component, 1-bit unsigned-normalized integer format that supports 1 bit for the red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R9G9B9E5_SharedExp">
            <summary>
            Three partial-precision floating-point numbers encoded into a single 32-bit value all sharing the same 5-bit exponent (variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent). There is no sign bit, and there is a shared 5-bit biased (15) exponent and a 9-bit mantissa for each channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R8G8_B8G8_UNorm">
            <summary>
            A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the UYVY format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel. Width must be even.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.G8R8_G8B8_UNorm">
            <summary>
            A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the YUY2 format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel. Width must be even.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC1_Typeless">
            <summary>
            Four-component typeless block-compression format
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC1_UNorm">
            <summary>
            Four-component block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC1_UNorm_sRGB">
            <summary>
            Four-component block-compression format for sRGB data.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC2_Typeless">
            <summary>
            Four-component typeless block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC2_UNorm">
            <summary>
            Four-component block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC2_UNorm_sRGB">
            <summary>
            Four-component block-compression format for sRGB data.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC3_Typeless">
            <summary>
            Four-component typeless block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC3_UNorm">
            <summary>
            Four-component block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC3_UNorm_sRGB">
            <summary>
            Four-component block-compression format for sRGB data.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC4_Typeless">
            <summary>
            One-component typeless block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC4_UNorm">
            <summary>
            One-component block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC4_SNorm">
            <summary>
            One-component block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC5_Typeless">
            <summary>
            Two-component typeless block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC5_UNorm">
            <summary>
            Two-component block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC5_SNorm">
            <summary>
            Two-component block-compression format.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.B5G6R5_UNorm">
            <summary>
            A three-component, 16-bit unsigned-normalized-integer format that supports 5 bits for blue, 6 bits for green, and 5 bits for red.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.B5G5R5A1_UNorm">
            <summary>
            A four-component, 16-bit unsigned-normalized-integer format that supports 5 bits for each color channel and 1-bit alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.B8G8R8A8_UNorm">
            <summary>
            A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8-bit alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.B8G8R8X8_UNorm">
            <summary>
            A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8 bits unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.R10G10B10_Xr_Bias_A2_UNorm">
            <summary>
            A four-component, 32-bit 2.8-biased fixed-point format that supports 10 bits for each color channel and 2-bit alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.B8G8R8A8_Typeless">
            <summary>
            A four-component, 32-bit typeless format that supports 8 bits for each channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.B8G8R8A8_UNorm_sRGB">
            <summary>
            A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each channel including alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.B8G8R8X8_Typeless">
            <summary>
            A four-component, 32-bit typeless format that supports 8 bits for each color channel, and 8 bits are unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.B8G8R8X8_UNorm_sRGB">
            <summary>
            A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each color channel, and 8 bits are unused.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC6H_Typeless">
            <summary>
            A three-component, HDR floating point format for color channels format that supports RGB channels. There is no support for an alpha channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC6H_Uf16">
            <summary>
            A three-component, HDR unsigned floating point format for color channels format that supports RGB channels. There is no support for an alpha channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC6H_Sf16">
            <summary>
            A three-component, HDR signed floating point format for color channels format that supports RGB channels. There is no support for an alpha channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC7_Typeless">
            <summary>
            A four-component, HDR floating point format for color channels format that supports RGBA channels.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC7_UNorm">
            <summary>
            A four-component, HDR floating point format for color channels format that supports RGBA channels.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.BC7_UNorm_sRGB">
            <summary>
            A four-component, HDR floating point format for color channels format that supports RGBA channels.
            </summary>
        </member>
        <member name="F:FlaxEngine.PixelFormat.MAX">
            <summary>
            The maximum format value (for internal use only).
            </summary>
        </member>
        <member name="T:FlaxEngine.PixelFormatExtensions">
            <summary>
            Extensions to <see cref="T:FlaxEngine.PixelFormat"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.SizeInBytes(FlaxEngine.PixelFormat)">
            <summary>
            Calculates the size of a <see cref="T:FlaxEngine.PixelFormat"/> in bytes.
            </summary>
            <param name="format">The Pixel format.</param>
            <returns>size of in bytes</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.SizeInBits(FlaxEngine.PixelFormat)">
            <summary>
            Calculates the size of a <see cref="T:FlaxEngine.PixelFormat"/> in bits.
            </summary>
            <param name="format">The pixel format.</param>
            <returns>The size in bits</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.AlphaSizeInBits(FlaxEngine.PixelFormat)">
            <summary>
            Calculate the size of the alpha channel in bits depending on the pixel format.
            </summary>
            <param name="format">The pixel format</param>
            <returns>The size in bits</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.HasAlpha(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.PixelFormat"/> contains alpha channel.
            </summary>
            <param name="format">The Pixel Format.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.PixelFormat"/> has alpha; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsDepthStencil(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.PixelFormat"/> is depth stencil.
            </summary>
            <param name="format">The Pixel Format.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.PixelFormat"/> is depth stencil; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.HasStencil(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.PixelFormat"/> has stencil bits.
            </summary>
            <param name="format">The Pixel Format.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.PixelFormat"/> has stencil bits; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsTypeless(FlaxEngine.PixelFormat,System.Boolean)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.PixelFormat"/> is Typeless.
            </summary>
            <param name="format">The <see cref="T:FlaxEngine.PixelFormat"/>.</param>
            <param name="partialTypeless">Enable/disable partially typeless formats.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.PixelFormat"/> is Typeless; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsValid(FlaxEngine.PixelFormat)">
            <summary>
            Returns true if the <see cref="T:FlaxEngine.PixelFormat"/> is valid.
            </summary>
            <param name="format">A format to validate</param>
            <returns>True if the <see cref="T:FlaxEngine.PixelFormat"/> is valid.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsCompressed(FlaxEngine.PixelFormat)">
            <summary>
            Returns true if the <see cref="T:FlaxEngine.PixelFormat"/> is a compressed format.
            </summary>
            <param name="format">The format to check for compressed.</param>
            <returns>True if the <see cref="T:FlaxEngine.PixelFormat"/> is a compressed format.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsCompressedBC(FlaxEngine.PixelFormat)">
            <summary>
            Returns true if the <see cref="T:FlaxEngine.PixelFormat"/> is a compressed format from BC formats family (BC1, BC2, BC3, BC4, BC5, BC6H, BC7).
            </summary>
            <param name="format">The format to check for compressed.</param>
            <returns>True if the <see cref="T:FlaxEngine.PixelFormat"/> is a compressed format from BC formats family.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsPacked(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.PixelFormat"/> is packed.
            </summary>
            <param name="format">The Pixel Format.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.PixelFormat"/> is packed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsPlanar(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.PixelFormat"/> is planar.
            </summary>
            <param name="format">The Pixel Format.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.PixelFormat"/> is planar; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsVideo(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.PixelFormat"/> is video.
            </summary>
            <param name="format">The <see cref="T:FlaxEngine.PixelFormat"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.PixelFormat"/> is video; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsSRGB(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.PixelFormat"/> is a sRGB format.
            </summary>
            <param name="format">The <see cref="T:FlaxEngine.PixelFormat"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.PixelFormat"/> is a sRGB format; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsHDR(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.PixelFormat"/> is HDR (either 16 or 32bits Float)
            </summary>
            <param name="format">The format.</param>
            <returns><c>true</c> if the specified pixel format is HDR (Floating poInt); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsRgbAOrder(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified format is in RGBA order.
            </summary>
            <param name="format">The format.</param>
            <returns><c>true</c> if the specified format is in RGBA order; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsBGRAOrder(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified format is in BGRA order.
            </summary>
            <param name="format">The format.</param>
            <returns><c>true</c> if the specified format is in BGRA order; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsNormalized(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified format contains normalized data. It indicates that values stored in an integer format are to be mapped to the range [-1,1] (for signed values) or [0,1] (for unsigned values) when they are accessed and converted to floating point.
            </summary>
            <param name="format">The <see cref="T:FlaxEngine.PixelFormat"/>.</param>
            <returns>True if given format contains normalized data type, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.IsInteger(FlaxEngine.PixelFormat)">
            <summary>
            Determines whether the specified format is integer data type (signed or unsigned).
            </summary>
            <param name="format">The <see cref="T:FlaxEngine.PixelFormat"/>.</param>
            <returns>True if given format contains integer data type (signed or unsigned), otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.ComputeScanlineCount(FlaxEngine.PixelFormat,System.Int32)">
            <summary>
            Computes the scanline count (number of scanlines).
            </summary>
            <param name="format">The <see cref="T:FlaxEngine.PixelFormat"/>.</param>
            <param name="height">The height.</param>
            <returns>The scanline count.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.ComputeComponentsCount(FlaxEngine.PixelFormat)">
            <summary>
            Computes the format components count (number of R, G, B, A channels).
            </summary>
            <param name="format">The <see cref="T:FlaxEngine.PixelFormat"/>.</param>
            <returns>The components count.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.TosRGB(FlaxEngine.PixelFormat)">
            <summary>
            Finds the equivalent sRGB format to the provided format.
            </summary>
            <param name="format">The non sRGB format.</param>
            <returns>The equivalent sRGB format if any, the provided format else.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.ToNonsRGB(FlaxEngine.PixelFormat)">
            <summary>
            Finds the equivalent non sRGB format to the provided sRGB format.
            </summary>
            <param name="format">The non sRGB format.</param>
            <returns>The equivalent non sRGB format if any, the provided format else.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.MakeTypeless(FlaxEngine.PixelFormat)">
            <summary>
            Converts the format to typeless.
            </summary>
            <param name="format">The format.</param>
            <returns>The typeless format.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.MakeTypelessFloat(FlaxEngine.PixelFormat)">
            <summary>
            Converts the typeless format to float.
            </summary>
            <param name="format">The typeless format.</param>
            <returns>The float format.</returns>
        </member>
        <member name="M:FlaxEngine.PixelFormatExtensions.MakeTypelessUNorm(FlaxEngine.PixelFormat)">
            <summary>
            Converts the typeless format to unorm.
            </summary>
            <param name="format">The typeless format.</param>
            <returns>The unorm format.</returns>
        </member>
        <member name="T:FlaxEngine.ToneMappingMode">
            <summary>
            Tone mapping effect rendering modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingMode.None">
            <summary>
            Disabled tone mapping effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingMode.Neutral">
            <summary>
            The neutral tonemapper.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingMode.ACES">
            <summary>
            The ACES Filmic reference tonemapper (approximation).
            </summary>
        </member>
        <member name="T:FlaxEngine.EyeAdaptationMode">
            <summary>
            Eye adaptation effect rendering modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationMode.None">
            <summary>
            Disabled eye adaptation effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationMode.Manual">
            <summary>
            The manual mode that uses a fixed exposure values.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationMode.AutomaticHistogram">
            <summary>
            The automatic mode applies the eye adaptation exposure based on the scene color luminance blending using the histogram. Requires compute shader support.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationMode.AutomaticAverageLuminance">
            <summary>
            The automatic mode applies the eye adaptation exposure based on the scene color luminance blending using the average luminance.
            </summary>
        </member>
        <member name="T:FlaxEngine.BokehShapeType">
            <summary>
            Depth of field bokeh shape types.
            </summary>
        </member>
        <member name="F:FlaxEngine.BokehShapeType.Hexagon">
            <summary>
            The hexagon shape.
            </summary>
        </member>
        <member name="F:FlaxEngine.BokehShapeType.Octagon">
            <summary>
            The octagon shape.
            </summary>
        </member>
        <member name="F:FlaxEngine.BokehShapeType.Circle">
            <summary>
            The circle shape.
            </summary>
        </member>
        <member name="F:FlaxEngine.BokehShapeType.Cross">
            <summary>
            The cross shape.
            </summary>
        </member>
        <member name="F:FlaxEngine.BokehShapeType.Custom">
            <summary>
            The custom texture shape.
            </summary>
        </member>
        <member name="T:FlaxEngine.AntialiasingMode">
            <summary>
            Anti-aliasing modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntialiasingMode.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntialiasingMode.FastApproximateAntialiasing">
            <summary>
            Fast-Approximate Anti-Aliasing effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntialiasingMode.TemporalAntialiasing">
            <summary>
            Temporal Anti-Aliasing effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntialiasingMode.SubpixelMorphologicalAntialiasing">
            <summary>
            Subpixel Morphological Anti-Aliasing effect.
            </summary>
        </member>
        <member name="T:FlaxEngine.ResolutionMode">
            <summary>
            The effect pass resolution.
            </summary>
        </member>
        <member name="F:FlaxEngine.ResolutionMode.Full">
            <summary>
            Full resolution
            </summary>
        </member>
        <member name="F:FlaxEngine.ResolutionMode.Half">
            <summary>
            Half resolution
            </summary>
        </member>
        <member name="T:FlaxEngine.AmbientOcclusionSettingsOverride">
            <summary>
            The <see cref="T:FlaxEngine.AmbientOcclusionSettings"/> structure members override flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettingsOverride.None">
            <summary>
            None properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettingsOverride.Enabled">
            <summary>
            Overrides <see cref="F:FlaxEngine.AmbientOcclusionSettings.Enabled"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettingsOverride.Intensity">
            <summary>
            Overrides <see cref="F:FlaxEngine.AmbientOcclusionSettings.Intensity"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettingsOverride.Power">
            <summary>
            Overrides <see cref="F:FlaxEngine.AmbientOcclusionSettings.Power"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettingsOverride.Radius">
            <summary>
            Overrides <see cref="F:FlaxEngine.AmbientOcclusionSettings.Radius"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettingsOverride.FadeOutDistance">
            <summary>
            Overrides <see cref="F:FlaxEngine.AmbientOcclusionSettings.FadeOutDistance"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettingsOverride.FadeDistance">
            <summary>
            Overrides <see cref="F:FlaxEngine.AmbientOcclusionSettings.FadeDistance"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettingsOverride.All">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="T:FlaxEngine.AmbientOcclusionSettings">
            <summary>
            Contains settings for Ambient Occlusion effect rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettings.OverrideFlags">
            <summary>
            The flags for overriden properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettings.Enabled">
            <summary>
            Enable/disable ambient occlusion effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettings.Intensity">
            <summary>
            Ambient occlusion intensity.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettings.Power">
            <summary>
            Ambient occlusion power.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettings.Radius">
            <summary>
            Ambient occlusion check range radius.
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettings.FadeOutDistance">
            <summary>
            Ambient occlusion fade out end distance from camera (in world units).
            </summary>
        </member>
        <member name="F:FlaxEngine.AmbientOcclusionSettings.FadeDistance">
            <summary>
            Ambient occlusion fade distance (in world units). Defines the size of the effect fade from fully visible to fully invisible at FadeOutDistance.
            </summary>
        </member>
        <member name="T:FlaxEngine.BloomSettingsOverride">
            <summary>
            The structure members override flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettingsOverride.None">
            <summary>
            None properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettingsOverride.Enabled">
            <summary>
            Overrides <see cref="F:FlaxEngine.BloomSettings.Enabled"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettingsOverride.Intensity">
            <summary>
            Overrides <see cref="F:FlaxEngine.BloomSettings.Intensity"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettingsOverride.Threshold">
            <summary>
            Overrides <see cref="F:FlaxEngine.BloomSettings.Threshold"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettingsOverride.BlurSigma">
            <summary>
            Overrides <see cref="F:FlaxEngine.BloomSettings.BlurSigma"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettingsOverride.Limit">
            <summary>
            Overrides <see cref="F:FlaxEngine.BloomSettings.Limit"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettingsOverride.All">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="T:FlaxEngine.BloomSettings">
            <summary>
            Contains settings for Bloom effect rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettings.OverrideFlags">
            <summary>
            The flags for overriden properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettings.Enabled">
            <summary>
            If checked, bloom effect will be rendered.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettings.Intensity">
            <summary>
            Bloom effect strength. Value 0 disabled is, while higher values increase the effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettings.Threshold">
            <summary>
            Minimum pixel brightness value to start blowing. Values below the threshold are skipped.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettings.BlurSigma">
            <summary>
            This affects the fall-off of the bloom. It's the standard deviation (sigma) used in the Gaussian blur formula when calculating the kernel of the bloom.
            </summary>
        </member>
        <member name="F:FlaxEngine.BloomSettings.Limit">
            <summary>
            Bloom effect brightness limit. Pixels with higher luminance will be capped to this brightness level.
            </summary>
        </member>
        <member name="T:FlaxEngine.ToneMappingSettingsOverride">
            <summary>
            The structure members override flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingSettingsOverride.None">
            <summary>
            None properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingSettingsOverride.WhiteTemperature">
            <summary>
            Overrides <see cref="F:FlaxEngine.ToneMappingSettings.WhiteTemperature"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingSettingsOverride.WhiteTint">
            <summary>
            Overrides <see cref="F:FlaxEngine.ToneMappingSettings.WhiteTint"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingSettingsOverride.Mode">
            <summary>
            Overrides <see cref="F:FlaxEngine.ToneMappingSettings.Mode"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingSettingsOverride.All">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="T:FlaxEngine.ToneMappingSettings">
            <summary>
            Contains settings for Tone Mapping effect rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingSettings.OverrideFlags">
            <summary>
            The flags for overriden properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingSettings.WhiteTemperature">
            <summary>
            Adjusts the white balance in relation to the temperature of the light in the scene. When the light temperature and this one match the light will appear white. When a value is used that is higher than the light in the scene it will yield a "warm" or yellow color, and, conversely, if the value is lower, it would yield a "cool" or blue color. The default value is `6500`.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingSettings.WhiteTint">
            <summary>
            Adjusts the white balance temperature tint for the scene by adjusting the cyan and magenta color ranges. Ideally, this setting should be used once you've adjusted the white balance temperature to get accurate colors. Under some light temperatures, the colors may appear to be more yellow or blue. This can be used to balance the resulting color to look more natural. The default value is `0`.
            </summary>
        </member>
        <member name="F:FlaxEngine.ToneMappingSettings.Mode">
            <summary>
            The tone mapping mode to use for the color grading process.
            </summary>
        </member>
        <member name="T:FlaxEngine.ColorGradingSettingsOverride">
            <summary>
            The structure members override flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.None">
            <summary>
            None properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorSaturation">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorSaturation"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorContrast">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorContrast"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorGamma">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorGamma"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorGain">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorGain"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorOffset">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorOffset"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorSaturationShadows">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorSaturationShadows"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorContrastShadows">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorContrastShadows"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorGammaShadows">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorGammaShadows"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorGainShadows">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorGainShadows"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorOffsetShadows">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorOffsetShadows"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorSaturationMidtones">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorSaturationMidtones"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorContrastMidtones">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorContrastMidtones"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorGammaMidtones">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorGammaMidtones"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorGainMidtones">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorGainMidtones"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorOffsetMidtones">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorOffsetMidtones"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorSaturationHighlights">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorSaturationHighlights"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorContrastHighlights">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorContrastHighlights"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorGammaHighlights">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorGammaHighlights"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorGainHighlights">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorGainHighlights"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ColorOffsetHighlights">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ColorOffsetHighlights"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.ShadowsMax">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.ShadowsMax"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.HighlightsMin">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.HighlightsMin"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.LutTexture">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.LutTexture"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.LutWeight">
            <summary>
            Overrides <see cref="F:FlaxEngine.ColorGradingSettings.LutWeight"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettingsOverride.All">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="T:FlaxEngine.ColorGradingSettings">
            <summary>
            Contains settings for Color Grading effect rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.OverrideFlags">
            <summary>
            The flags for overriden properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorSaturation">
            <summary>
            Gets or sets the color saturation (applies globally to the whole image). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorContrast">
            <summary>
            Gets or sets the color contrast (applies globally to the whole image). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorGamma">
            <summary>
            Gets or sets the color gamma (applies globally to the whole image). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorGain">
            <summary>
            Gets or sets the color gain (applies globally to the whole image). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorOffset">
            <summary>
            Gets or sets the color offset (applies globally to the whole image). Default is 0.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorSaturationShadows">
            <summary>
            Gets or sets the color saturation (applies to shadows only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorContrastShadows">
            <summary>
            Gets or sets the color contrast (applies to shadows only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorGammaShadows">
            <summary>
            Gets or sets the color gamma (applies to shadows only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorGainShadows">
            <summary>
            Gets or sets the color gain (applies to shadows only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorOffsetShadows">
            <summary>
            Gets or sets the color offset (applies to shadows only). Default is 0.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorSaturationMidtones">
            <summary>
            Gets or sets the color saturation (applies to midtones only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorContrastMidtones">
            <summary>
            Gets or sets the color contrast (applies to midtones only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorGammaMidtones">
            <summary>
            Gets or sets the color gamma (applies to midtones only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorGainMidtones">
            <summary>
            Gets or sets the color gain (applies to midtones only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorOffsetMidtones">
            <summary>
            Gets or sets the color offset (applies to midtones only). Default is 0.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorSaturationHighlights">
            <summary>
            Gets or sets the color saturation (applies to highlights only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorContrastHighlights">
            <summary>
            Gets or sets the color contrast (applies to highlights only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorGammaHighlights">
            <summary>
            Gets or sets the color gamma (applies to highlights only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorGainHighlights">
            <summary>
            Gets or sets the color gain (applies to highlights only). Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ColorOffsetHighlights">
            <summary>
            Gets or sets the color offset (applies to highlights only). Default is 0.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.ShadowsMax">
            <summary>
            The shadows maximum value. Default is 0.09.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.HighlightsMin">
            <summary>
            The highlights minimum value. Default is 0.5.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.LutTexture">
            <summary>
            The Lookup Table (LUT) used to perform color correction.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorGradingSettings.LutWeight">
            <summary>
            The LUT blending weight (normalized to range 0-1). Default is 1.0.
            </summary>
        </member>
        <member name="T:FlaxEngine.EyeAdaptationSettingsOverride">
            <summary>
            The structure members override flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettingsOverride.None">
            <summary>
            None properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettingsOverride.Mode">
            <summary>
            Overrides <see cref="F:FlaxEngine.EyeAdaptationSettings.Mode"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettingsOverride.SpeedUp">
            <summary>
            Overrides <see cref="F:FlaxEngine.EyeAdaptationSettings.SpeedUp"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettingsOverride.SpeedDown">
            <summary>
            Overrides <see cref="F:FlaxEngine.EyeAdaptationSettings.SpeedDown"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettingsOverride.PreExposure">
            <summary>
            Overrides <see cref="F:FlaxEngine.EyeAdaptationSettings.PreExposure"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettingsOverride.PostExposure">
            <summary>
            Overrides <see cref="F:FlaxEngine.EyeAdaptationSettings.PostExposure"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettingsOverride.MinBrightness">
            <summary>
            Overrides <see cref="F:FlaxEngine.EyeAdaptationSettings.MinBrightness"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettingsOverride.MaxBrightness">
            <summary>
            Overrides <see cref="F:FlaxEngine.EyeAdaptationSettings.MaxBrightness"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettingsOverride.HistogramLowPercent">
            <summary>
            Overrides <see cref="F:FlaxEngine.EyeAdaptationSettings.HistogramLowPercent"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettingsOverride.HistogramHighPercent">
            <summary>
            Overrides <see cref="F:FlaxEngine.EyeAdaptationSettings.HistogramHighPercent"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettingsOverride.All">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="T:FlaxEngine.EyeAdaptationSettings">
            <summary>
            Contains settings for Eye Adaptation effect rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettings.OverrideFlags">
            <summary>
            The flags for overriden properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettings.Mode">
            <summary>
            The effect rendering mode used for the exposure processing.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettings.SpeedUp">
            <summary>
            The speed at which the exposure changes when the scene brightness moves from a dark area to a bright area (brightness goes up).
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettings.SpeedDown">
            <summary>
            The speed at which the exposure changes when the scene brightness moves from a bright area to a dark area (brightness goes down).
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettings.PreExposure">
            <summary>
            The pre-exposure value applied to the scene color before performing post-processing (such as bloom, lens flares, etc.).
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettings.PostExposure">
            <summary>
            The post-exposure value applied to the scene color after performing post-processing (such as bloom, lens flares, etc.) but before color grading and tone mapping.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettings.MinBrightness">
            <summary>
            The minimum brightness for the auto exposure which limits the lower brightness the eye can adapt within.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettings.MaxBrightness">
            <summary>
            The maximum brightness for the auto exposure which limits the upper brightness the eye can adapt within.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettings.HistogramLowPercent">
            <summary>
            The lower bound for the luminance histogram of the scene color. Value is in percent and limits the pixels below this brightness. Use values from range 60-80. Used only in AutomaticHistogram mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.EyeAdaptationSettings.HistogramHighPercent">
            <summary>
            The upper bound for the luminance histogram of the scene color. Value is in percent and limits the pixels above this brightness. Use values from range 80-95. Used only in AutomaticHistogram mode.
            </summary>
        </member>
        <member name="T:FlaxEngine.CameraArtifactsSettingsOverride">
            <summary>
            The structure members override flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettingsOverride.None">
            <summary>
            None properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettingsOverride.VignetteIntensity">
            <summary>
            Overrides <see cref="F:FlaxEngine.CameraArtifactsSettings.VignetteIntensity"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettingsOverride.VignetteColor">
            <summary>
            Overrides <see cref="F:FlaxEngine.CameraArtifactsSettings.VignetteColor"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettingsOverride.VignetteShapeFactor">
            <summary>
            Overrides <see cref="F:FlaxEngine.CameraArtifactsSettings.VignetteShapeFactor"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettingsOverride.GrainAmount">
            <summary>
            Overrides <see cref="F:FlaxEngine.CameraArtifactsSettings.GrainAmount"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettingsOverride.GrainParticleSize">
            <summary>
            Overrides <see cref="F:FlaxEngine.CameraArtifactsSettings.GrainParticleSize"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettingsOverride.GrainSpeed">
            <summary>
            Overrides <see cref="F:FlaxEngine.CameraArtifactsSettings.GrainSpeed"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettingsOverride.ChromaticDistortion">
            <summary>
            Overrides <see cref="F:FlaxEngine.CameraArtifactsSettings.ChromaticDistortion"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettingsOverride.ScreenFadeColor">
            <summary>
            Overrides <see cref="F:FlaxEngine.CameraArtifactsSettings.ScreenFadeColor"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettingsOverride.All">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="T:FlaxEngine.CameraArtifactsSettings">
            <summary>
            Contains settings for Camera Artifacts effect rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettings.OverrideFlags">
            <summary>
            The flags for overriden properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettings.VignetteIntensity">
            <summary>
            Strength of the vignette effect. Value 0 hides it. The default value is 0.8.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettings.VignetteColor">
            <summary>
            Color of the vignette.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettings.VignetteShapeFactor">
            <summary>
            Controls shape of the vignette. Values near 0 produce rectangle shape. Higher values result in round shape. The default value is 0.125.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettings.GrainAmount">
            <summary>
            Intensity of the grain filter. Value 0 hides it. The default value is 0.005.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettings.GrainParticleSize">
            <summary>
            Size of the grain particles. The default value is 1.6.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettings.GrainSpeed">
            <summary>
            Speed of the grain particles animation.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettings.ChromaticDistortion">
            <summary>
            Controls chromatic aberration effect strength. Value 0 hides it.
            </summary>
        </member>
        <member name="F:FlaxEngine.CameraArtifactsSettings.ScreenFadeColor">
            <summary>
            Screen tint color (alpha channel defines the blending factor).
            </summary>
        </member>
        <member name="T:FlaxEngine.LensFlaresSettingsOverride">
            <summary>
            The structure members override flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.None">
            <summary>
            None properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.Intensity">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.Intensity"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.Ghosts">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.Ghosts"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.HaloWidth">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.HaloWidth"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.HaloIntensity">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.HaloIntensity"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.GhostDispersal">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.GhostDispersal"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.Distortion">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.Distortion"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.ThresholdBias">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.ThresholdBias"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.ThresholdScale">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.ThresholdScale"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.LensDirt">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.LensDirt"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.LensDirtIntensity">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.LensDirtIntensity"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.LensColor">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.LensColor"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.LensStar">
            <summary>
            Overrides <see cref="F:FlaxEngine.LensFlaresSettings.LensStar"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettingsOverride.All">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="T:FlaxEngine.LensFlaresSettings">
            <summary>
            Contains settings for Lens Flares effect rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.OverrideFlags">
            <summary>
            The flags for overriden properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.Intensity">
            <summary>
            Strength of the effect. Value 0 disabled it.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.Ghosts">
            <summary>
            Amount of lens flares ghosts.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.HaloWidth">
            <summary>
            Lens flares halo width.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.HaloIntensity">
            <summary>
            Lens flares halo intensity.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.GhostDispersal">
            <summary>
            Ghost samples dispersal parameter.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.Distortion">
            <summary>
            Lens flares color distortion parameter.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.ThresholdBias">
            <summary>
            Input image brightness threshold. Added to input pixels.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.ThresholdScale">
            <summary>
            Input image brightness threshold scale. Used to multiply input pixels.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.LensDirt">
            <summary>
            Fullscreen lens dirt texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.LensDirtIntensity">
            <summary>
            Fullscreen lens dirt intensity parameter. Allows to tune dirt visibility.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.LensColor">
            <summary>
            Custom lens color texture (1D) used for lens color spectrum.
            </summary>
        </member>
        <member name="F:FlaxEngine.LensFlaresSettings.LensStar">
            <summary>
            Custom lens star texture sampled by lens flares.
            </summary>
        </member>
        <member name="T:FlaxEngine.DepthOfFieldSettingsOverride">
            <summary>
            The structure members override flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.None">
            <summary>
            None properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.Enabled">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.Enabled"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.BlurStrength">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.BlurStrength"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.FocalDistance">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.FocalDistance"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.FocalRegion">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.FocalRegion"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.NearTransitionRange">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.NearTransitionRange"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.FarTransitionRange">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.FarTransitionRange"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.DepthLimit">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.DepthLimit"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.BokehEnabled">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.BokehEnabled"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.BokehSize">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.BokehSize"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.BokehShape">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.BokehShape"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.BokehShapeCustom">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.BokehShapeCustom"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.BokehBrightnessThreshold">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.BokehBrightnessThreshold"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.BokehBlurThreshold">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.BokehBlurThreshold"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.BokehFalloff">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.BokehFalloff"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.BokehDepthCutoff">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.BokehDepthCutoff"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.BokehBrightness">
            <summary>
            Overrides <see cref="F:FlaxEngine.DepthOfFieldSettings.BokehBrightness"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettingsOverride.All">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="T:FlaxEngine.DepthOfFieldSettings">
            <summary>
            Contains settings for Depth Of Field effect rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.OverrideFlags">
            <summary>
            The flags for overriden properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.Enabled">
            <summary>
            If checked, depth of field effect will be visible.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.BlurStrength">
            <summary>
            The blur intensity in the out-of-focus areas. Allows reducing blur amount by scaling down the Gaussian Blur radius. Normalized to range 0-1.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.FocalDistance">
            <summary>
            The distance in World Units from the camera that acts as the center of the region where the scene is perfectly in focus and no blurring occurs.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.FocalRegion">
            <summary>
            The distance in World Units beyond the focal distance where the scene is perfectly in focus and no blurring occurs.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.NearTransitionRange">
            <summary>
            The distance in World Units from the focal region on the side nearer to the camera over which the scene transitions from focused to blurred.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.FarTransitionRange">
            <summary>
            The distance in World Units from the focal region on the side farther from the camera over which the scene transitions from focused to blurred.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.DepthLimit">
            <summary>
            The distance in World Units which describes border after that there is no blur (useful to disable DoF on sky). Use 0 to disable that feature.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.BokehEnabled">
            <summary>
            If checked, bokeh shapes will be rendered.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.BokehSize">
            <summary>
            Controls size of the bokeh shapes.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.BokehBrightness">
            <summary>
            Controls brightness of the bokeh shapes. Can be used to fade them or make more intense.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.BokehShape">
            <summary>
            Defines bokeh shapes type.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.BokehShapeCustom">
            <summary>
            If BokehShape is set to Custom, then this texture will be used for the bokeh shapes. For best performance, use small, compressed, grayscale textures (for instance 32px).
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.BokehBrightnessThreshold">
            <summary>
            The minimum pixel brightness to create bokeh. Pixels with lower brightness will be skipped.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.BokehBlurThreshold">
            <summary>
            Depth of Field bokeh shapes blur threshold.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.BokehFalloff">
            <summary>
            Controls bokeh shapes brightness falloff. Higher values reduce bokeh visibility.
            </summary>
        </member>
        <member name="F:FlaxEngine.DepthOfFieldSettings.BokehDepthCutoff">
            <summary>
            Controls bokeh shape generation for depth discontinuities.
            </summary>
        </member>
        <member name="T:FlaxEngine.MotionBlurSettingsOverride">
            <summary>
            The structure members override flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.MotionBlurSettingsOverride.None">
            <summary>
            None properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.MotionBlurSettingsOverride.Enabled">
            <summary>
            Overrides <see cref="F:FlaxEngine.MotionBlurSettings.Enabled"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.MotionBlurSettingsOverride.Scale">
            <summary>
            Overrides <see cref="F:FlaxEngine.MotionBlurSettings.Scale"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.MotionBlurSettingsOverride.SampleCount">
            <summary>
            Overrides <see cref="F:FlaxEngine.MotionBlurSettings.SampleCount"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.MotionBlurSettingsOverride.MotionVectorsResolution">
            <summary>
            Overrides <see cref="F:FlaxEngine.MotionBlurSettings.MotionVectorsResolution"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.MotionBlurSettingsOverride.All">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="T:FlaxEngine.MotionBlurSettings">
            <summary>
            Contains settings for Motion Blur effect rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.MotionBlurSettings.OverrideFlags">
            <summary>
            The flags for overriden properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.MotionBlurSettings.Enabled">
            <summary>
            If checked, motion blur effect will be rendered.
            </summary>
        </member>
        <member name="F:FlaxEngine.MotionBlurSettings.Scale">
            <summary>
            The blur effect strength. Value 0 disabled is, while higher values increase the effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.MotionBlurSettings.SampleCount">
            <summary>
            The amount of sample points used during motion blur rendering. It affects quality and performance.
            </summary>
        </member>
        <member name="F:FlaxEngine.MotionBlurSettings.MotionVectorsResolution">
            <summary>
            The motion vectors texture resolution. Motion blur uses per-pixel motion vectors buffer that contains objects movement information. Use lower resolution to improve performance.
            </summary>
        </member>
        <member name="T:FlaxEngine.ScreenSpaceReflectionsSettingsOverride">
            <summary>
            The structure members override flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.None">
            <summary>
            None properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.Intensity">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.Intensity"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.DepthResolution">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.DepthResolution"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.RayTracePassResolution">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.RayTracePassResolution"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.BRDFBias">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.BRDFBias"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.RoughnessThreshold">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.RoughnessThreshold"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.WorldAntiSelfOcclusionBias">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.WorldAntiSelfOcclusionBias"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.ResolvePassResolution">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.ResolvePassResolution"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.ResolveSamples">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.ResolveSamples"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.EdgeFadeFactor">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.EdgeFadeFactor"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.UseColorBufferMips">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.UseColorBufferMips"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.TemporalEffect">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.TemporalEffect"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.TemporalScale">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.TemporalScale"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.TemporalResponse">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.TemporalResponse"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.FadeOutDistance">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.FadeOutDistance"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.FadeDistance">
            <summary>
            Overrides <see cref="F:FlaxEngine.ScreenSpaceReflectionsSettings.FadeDistance"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettingsOverride.All">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="T:FlaxEngine.ScreenSpaceReflectionsSettings">
            <summary>
            Contains settings for Screen Space Reflections effect rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.OverrideFlags">
            <summary>
            The flags for overriden properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.Intensity">
            <summary>
            The effect intensity (normalized to range [0;1]). Use 0 to disable it.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.DepthResolution">
            <summary>
            The depth buffer downscale option to optimize raycast performance. Full gives better quality, but half improves performance. The default value is half.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.RayTracePassResolution">
            <summary>
            The raycast resolution. Full gives better quality, but half improves performance. The default value is half.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.BRDFBias">
            <summary>
            The reflection spread parameter. This value controls source roughness effect on reflections blur. Smaller values produce wider reflections spread but also introduce more noise. Higher values provide more mirror-like reflections. Default value is 0.82.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.RoughnessThreshold">
            <summary>
            The maximum amount of roughness a material must have to reflect the scene. For example, if this value is set to 0.4, only materials with a roughness value of 0.4 or below reflect the scene. The default value is 0.45.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.WorldAntiSelfOcclusionBias">
            <summary>
            The offset of the raycast origin. Lower values produce more correct reflection placement, but produce more artifacts. We recommend values of 0.3 or lower. The default value is 0.1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.ResolvePassResolution">
            <summary>
            The raycast resolution. Full gives better quality, but half improves performance. The default value is half.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.ResolveSamples">
            <summary>
            The number of rays used to resolve the reflection color. Higher values provide better quality but reduce effect performance. Default value is 4. Use 1 for the highest speed.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.EdgeFadeFactor">
            <summary>
            The point at which the far edges of the reflection begin to fade. Has no effect on performance. The default value is 0.1.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.FadeOutDistance">
            <summary>
            The effect fade out end distance from camera (in world units).
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.FadeDistance">
            <summary>
            The effect fade distance (in world units). Defines the size of the effect fade from fully visible to fully invisible at FadeOutDistance.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.UseColorBufferMips">
            <summary>
            "The input color buffer downscale mode that uses blurred mipmaps when resolving the reflection color. Produces more realistic results by blurring distant parts of reflections in rough (low-gloss) materials. It also improves performance on most platforms but uses more memory.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.TemporalEffect">
            <summary>
            If checked, enables the temporal pass. Reduces noise, but produces an animated "jittering" effect that's sometimes noticeable. If disabled, the properties below have no effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.TemporalScale">
            <summary>
            The intensity of the temporal effect. Lower values produce reflections faster, but more noise. The default value is 8.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenSpaceReflectionsSettings.TemporalResponse">
            <summary>
            Defines how quickly reflections blend between the reflection in the current frame and the history buffer. Lower values produce reflections faster, but with more jittering. If the camera in your game doesn't move much, we recommend values closer to 1. The default value is 0.8.
            </summary>
        </member>
        <member name="T:FlaxEngine.AntiAliasingSettingsOverride">
            <summary>
            The structure members override flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettingsOverride.None">
            <summary>
            None properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettingsOverride.Mode">
            <summary>
            Overrides <see cref="F:FlaxEngine.AntiAliasingSettings.Mode"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettingsOverride.TAA_JitterSpread">
            <summary>
            Overrides <see cref="F:FlaxEngine.AntiAliasingSettings.TAA_JitterSpread"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettingsOverride.TAA_Sharpness">
            <summary>
            Overrides <see cref="F:FlaxEngine.AntiAliasingSettings.TAA_Sharpness"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettingsOverride.TAA_StationaryBlending">
            <summary>
            Overrides <see cref="F:FlaxEngine.AntiAliasingSettings.TAA_StationaryBlending"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettingsOverride.TAA_MotionBlending">
            <summary>
            Overrides <see cref="F:FlaxEngine.AntiAliasingSettings.TAA_MotionBlending"/> property.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettingsOverride.All">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="T:FlaxEngine.AntiAliasingSettings">
            <summary>
            Contains settings for Anti Aliasing effect rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettings.OverrideFlags">
            <summary>
            The flags for overriden properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettings.Mode">
            <summary>
            The anti-aliasing effect mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettings.TAA_JitterSpread">
            <summary>
            The diameter (in texels) inside which jitter samples are spread. Smaller values result in crisper but more aliased output, while larger values result in more stable but blurrier output.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettings.TAA_Sharpness">
            <summary>
            Controls the amount of sharpening applied to the color buffer. TAA can induce a slight loss of details in high frequency regions. Sharpening alleviates this issue. High values may introduce dark-border artifacts.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettings.TAA_StationaryBlending">
            <summary>
            The blend coefficient for stationary fragments. Controls the percentage of history sample blended into final color for fragments with minimal active motion.
            </summary>
        </member>
        <member name="F:FlaxEngine.AntiAliasingSettings.TAA_MotionBlending">
            <summary>
            The blending coefficient for moving fragments. Controls the percentage of history sample blended into the final color for fragments with significant active motion.
            </summary>
        </member>
        <member name="T:FlaxEngine.PostFxMaterialsSettings">
            <summary>
            Contains settings for custom PostFx materials rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostFxMaterialsSettings.Materials">
            <summary>
            The post-process materials collection for rendering (fixed capacity).
            </summary>
        </member>
        <member name="T:FlaxEngine.PostProcessSettings">
            <summary>
            Contains settings for rendering advanced visual effects and post effects.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.AmbientOcclusion">
            <summary>
            The ambient occlusion effect settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.Bloom">
            <summary>
            The bloom effect settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.ToneMapping">
            <summary>
            The tone mapping effect settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.ColorGrading">
            <summary>
            The color grading effect settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.EyeAdaptation">
            <summary>
            The eye adaptation effect settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.CameraArtifacts">
            <summary>
            The camera artifacts effect settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.LensFlares">
            <summary>
            The lens flares effect settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.DepthOfField">
            <summary>
            The depth of field effect settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.MotionBlur">
            <summary>
            The motion blur effect settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.ScreenSpaceReflections">
            <summary>
            The screen space reflections effect settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.AntiAliasing">
            <summary>
            The anti-aliasing effect settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PostProcessSettings.PostFxMaterials">
            <summary>
            The PostFx materials rendering settings.
            </summary>
        </member>
        <member name="T:FlaxEngine.RenderBuffers">
            <summary>
            The scene rendering buffers container.
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderBuffers.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.RenderBuffers"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.RenderBuffers.DepthBuffer">
            <summary>
            Gets the depth buffer render target allocated within this render buffers collection (read only).
            </summary>
        </member>
        <member name="P:FlaxEngine.RenderBuffers.MotionVectors">
            <summary>
            Gets the motion vectors render target allocated within this render buffers collection (read only).
            </summary>
            <remarks>
            Texture ca be null or not initialized if motion blur is disabled or not yet rendered.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RenderBuffers.Width">
            <summary>
            Gets the buffers width (in pixels).
            </summary>
        </member>
        <member name="P:FlaxEngine.RenderBuffers.Height">
            <summary>
            Gets the buffers height (in pixels).
            </summary>
        </member>
        <member name="P:FlaxEngine.RenderBuffers.Size">
            <summary>
            Gets the buffers width and height (in pixels).
            </summary>
        </member>
        <member name="P:FlaxEngine.RenderBuffers.AspectRatio">
            <summary>
            Gets the buffers aspect ratio.
            </summary>
        </member>
        <member name="P:FlaxEngine.RenderBuffers.Viewport">
            <summary>
            Gets the buffers rendering viewport.
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderBuffers.Init(System.Int32,System.Int32)">
            <summary>
            Allocates the buffers.
            </summary>
            <param name="width">The surface width (in pixels).</param>
            <param name="height">The surface height (in pixels).</param>
            <returns>True if cannot allocate buffers, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.RenderBuffers.Release">
            <summary>
            Release the buffers data.
            </summary>
        </member>
        <member name="T:FlaxEngine.RenderTargetPool">
            <summary>
            Utility for pooling render target resources with reusing and sharing resources during rendering.
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderTargetPool.Get(FlaxEngine.GPUTextureDescription@)">
            <summary>
            Gets a temporary render target.
            </summary>
            <param name="desc">The texture description.</param>
            <returns>The allocated render target or reused one.</returns>
        </member>
        <member name="M:FlaxEngine.RenderTargetPool.Release(FlaxEngine.GPUTexture)">
            <summary>
            Releases a temporary render target.
            </summary>
            <param name="rt">The reference to temporary target to release.</param>
        </member>
        <member name="T:FlaxEngine.RenderTask">
            <summary>
            Allows to perform custom rendering using graphics pipeline.
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.RenderTask"/>.
            </summary>
        </member>
        <member name="E:FlaxEngine.RenderTask.Render">
            <summary>
            Action fired on task rendering.
            </summary>
        </member>
        <member name="E:FlaxEngine.RenderTask.Begin">
            <summary>
            Action fired on task rendering begin.
            </summary>
        </member>
        <member name="E:FlaxEngine.RenderTask.End">
            <summary>
            Action fired on task rendering end.
            </summary>
        </member>
        <member name="E:FlaxEngine.RenderTask.Present">
            <summary>
            Action fired just after frame present.
            </summary>
        </member>
        <member name="P:FlaxEngine.RenderTask.Enabled">
            <summary>
            Gets or sets a value indicating whether task is enabled.
            </summary>
        </member>
        <member name="P:FlaxEngine.RenderTask.Order">
            <summary>
            The order of the task. Used for tasks rendering order. Lower first, higher later.
            </summary>
        </member>
        <member name="P:FlaxEngine.RenderTask.FrameCount">
            <summary>
            The amount of frames rendered by this task. It is auto incremented on task drawing.
            </summary>
        </member>
        <member name="P:FlaxEngine.RenderTask.LastUsedFrame">
            <summary>
            The index of the frame when this task was last time rendered.
            </summary>
        </member>
        <member name="P:FlaxEngine.RenderTask.CanDraw">
            <summary>
            Determines whether this task can be rendered.
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderTask.OnDraw">
            <summary>
            Called by graphics device to draw this task. Can be used to invoke task rendering nested inside another task - use on own risk!
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderTask.Resize(System.Int32,System.Int32)">
            <summary>
            Changes the buffers and output size. Does nothing if size won't change. Called by window or user to resize rendering buffers.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>True if cannot resize the buffers.</returns>
        </member>
        <member name="F:FlaxEngine.RenderTask.Tag">
            <summary>
            The custom tag object value linked to the rendering task.
            </summary>
        </member>
        <member name="T:FlaxEngine.ActorsSources">
            <summary>
            Defines actors to draw sources.
            </summary>
        </member>
        <member name="F:FlaxEngine.ActorsSources.None">
            <summary>
            The actors won't be rendered.
            </summary>
        </member>
        <member name="F:FlaxEngine.ActorsSources.Scenes">
            <summary>
            The actors from the loaded scenes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ActorsSources.CustomActors">
            <summary>
            The actors from the custom collection.
            </summary>
        </member>
        <member name="F:FlaxEngine.ActorsSources.ScenesAndCustomActors">
            <summary>
            The actors from the loaded scenes and custom collection.
            </summary>
        </member>
        <member name="T:FlaxEngine.SceneRenderTask">
            <summary>
            Render task which draws scene actors into the output buffer.
            </summary>
            <seealso cref="T:FlaxEngine.RenderTask" />
        </member>
        <member name="M:FlaxEngine.SceneRenderTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SceneRenderTask"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.SceneRenderTask.CollectDrawCallsDelegate">
            <summary>The delegate for event CollectDrawCalls.</summary>
        </member>
        <member name="E:FlaxEngine.SceneRenderTask.CollectDrawCalls">
            <summary>
            The action called on view rendering to collect draw calls. It allows to extend rendering pipeline and draw custom geometry non-existing in the scene or custom actors set.
            </summary>
        </member>
        <member name="T:FlaxEngine.SceneRenderTask.PreRenderDelegate">
            <summary>The delegate for event PreRender.</summary>
        </member>
        <member name="E:FlaxEngine.SceneRenderTask.PreRender">
            <summary>
            The action called after scene rendering. Can be used to perform custom pre-rendering or to modify the render view.
            </summary>
        </member>
        <member name="T:FlaxEngine.SceneRenderTask.PostRenderDelegate">
            <summary>The delegate for event PostRender.</summary>
        </member>
        <member name="E:FlaxEngine.SceneRenderTask.PostRender">
            <summary>
            The action called after scene rendering. Can be used to render additional visual elements to the output.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneRenderTask.Output">
            <summary>
            The output texture (can be null if using rendering to window swap chain). Can be used to redirect the default scene rendering output to a texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneRenderTask.Buffers">
            <summary>
            The scene rendering buffers. Created and managed by the task.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneRenderTask.Camera">
            <summary>
            The scene rendering camera. Can be used to override the rendering view properties based on the current camera setup.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneRenderTask.View">
            <summary>
            The render view description.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneRenderTask.ActorsSource">
            <summary>
            The actors source to use (configures what objects to render).
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneRenderTask.RenderingPercentage">
            <summary>
            The scale of the rendering resolution relative to the output dimensions. If lower than 1 the scene and postprocessing will be rendered at a lower resolution and upscaled to the output backbuffer.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneRenderTask.Viewport">
            <summary>
            Gets the rendering render task viewport (before upsampling).
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneRenderTask.OutputViewport">
            <summary>
            Gets the rendering output viewport (after upsampling).
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneRenderTask.OutputView">
            <summary>
            Gets the rendering output view.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneRenderTask.CameraCut">
            <summary>
            Marks the next rendered frame as camera cut. Used to clear the temporal effects history and prevent visual artifacts blended from the previous frames.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneRenderTask.AddCustomActor(FlaxEngine.Actor)">
            <summary>
            Adds the custom actor to the rendering.
            </summary>
            <param name="actor">The actor.</param>
        </member>
        <member name="M:FlaxEngine.SceneRenderTask.RemoveCustomActor(FlaxEngine.Actor)">
            <summary>
            Removes the custom actor from the rendering.
            </summary>
            <param name="actor">The actor.</param>
        </member>
        <member name="M:FlaxEngine.SceneRenderTask.ClearCustomActors">
            <summary>
            Removes all the custom actors from the rendering.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneRenderTask.ViewFlags">
            <summary>
            Gets or sets the view flags (via <see cref="P:FlaxEngine.SceneRenderTask.View"/> property).
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneRenderTask.ViewMode">
            <summary>
            Gets or sets the view mode (via <see cref="P:FlaxEngine.SceneRenderTask.View"/> property).
            </summary>
        </member>
        <member name="F:FlaxEngine.SceneRenderTask.GlobalCustomPostFx">
            <summary>
            The global custom post processing effects applied to all <see cref="T:FlaxEngine.SceneRenderTask"/> (applied to tasks that have <see cref="F:FlaxEngine.SceneRenderTask.AllowGlobalCustomPostFx"/> turned on).
            </summary>
        </member>
        <member name="F:FlaxEngine.SceneRenderTask.CustomPostFx">
            <summary>
            The custom post processing effects.
            </summary>
        </member>
        <member name="F:FlaxEngine.SceneRenderTask.AllowGlobalCustomPostFx">
            <summary>
            True if allow using global custom PostFx when rendering this task.
            </summary>
        </member>
        <member name="T:FlaxEngine.MainRenderTask">
            <summary>
            The main game rendering task used by the engine.
            </summary>
            <remarks>
            For Main Render Task its <see cref="P:FlaxEngine.SceneRenderTask.Output"/> may be null because game can be rendered directly to the native window backbuffer.
            This allows to increase game rendering performance (reduced memory usage and data transfer).
            User should use post effects pipeline to modify the final frame.
            </remarks>
            <seealso cref="T:FlaxEngine.SceneRenderTask" />
        </member>
        <member name="M:FlaxEngine.MainRenderTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.MainRenderTask"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.MainRenderTask.Instance">
            <summary>
            Gets the main game rendering task. Use it to plug custom rendering logic for your game.
            </summary>
        </member>
        <member name="T:FlaxEngine.RenderContext">
            <summary>
            The high-level renderer context. Used to collect the draw calls for the scene rendering. Can be used to perform a custom rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderContext.Buffers">
            <summary>
            The render buffers.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderContext.List">
            <summary>
            The render list.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderContext.View">
            <summary>
            The render view.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderContext.LodProxyView">
            <summary>
            The proxy render view used to synchronize objects level of detail during rendering (eg. during shadow maps rendering passes). It's optional.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderContext.Task">
            <summary>
            The scene rendering task that is a source of renderable objects (optional).
            </summary>
        </member>
        <member name="T:FlaxEngine.RenderTools">
            <summary>
            Set of utilities for rendering.
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderTools.ComputeModelLOD(FlaxEngine.Model,FlaxEngine.Vector3@,System.Single,FlaxEngine.RenderContext@)">
            <summary>
            Computes the model LOD index to use during rendering.
            </summary>
            <param name="model">The model.</param>
            <param name="origin">The bounds origin.</param>
            <param name="radius">The bounds radius.</param>
            <param name="renderContext">The rendering context.</param>
            <returns>The zero-based LOD index. Returns -1 if model should not be rendered.</returns>
        </member>
        <member name="M:FlaxEngine.RenderTools.ComputeSkinnedModelLOD(FlaxEngine.SkinnedModel,FlaxEngine.Vector3@,System.Single,FlaxEngine.RenderContext@)">
            <summary>
            Computes the skinned model LOD index to use during rendering.
            </summary>
            <param name="model">The skinned model.</param>
            <param name="origin">The bounds origin.</param>
            <param name="radius">The bounds radius.</param>
            <param name="renderContext">The rendering context.</param>
            <returns>The zero-based LOD index. Returns -1 if model should not be rendered.</returns>
        </member>
        <member name="T:FlaxEngine.RenderView">
            <summary>
            Rendering view description that defines how to render the objects (camera placement, rendering properties, etc.).
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.Position">
            <summary>
            The position of the view.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.Far">
            <summary>
            The far plane.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.Direction">
            <summary>
            The direction of the view.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.Near">
            <summary>
            The near plane.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.View">
            <summary>
            The view matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.Projection">
            <summary>
            The projection matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.NonJitteredProjection">
            <summary>
            The projection matrix with no camera offset (no jittering).
            For many temporal image effects, the camera that is currently rendering needs to be slightly offset from the default projection (that is, the camera is ‘jittered’).
            If you use motion vectors and camera jittering together, use this property to keep the motion vectors stable between frames.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.IV">
            <summary>
            The inverted view matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.IP">
            <summary>
            The inverted projection matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.IVP">
            <summary>
            The inverted projection view matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.Frustum">
            <summary>
            The view frustum.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.CullingFrustum">
            <summary>
            The view frustum used for culling (can be different than Frustum in some cases e.g. cascaded shadow map rendering).
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.Pass">
            <summary>
            The draw passes mask for the current view rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.IsOfflinePass">
            <summary>
            Flag used by static, offline rendering passes (eg. reflections rendering, lightmap rendering etc.)
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.StaticFlagsMask">
            <summary>
            The static flags mask used to hide objects that don't have a given static flags. Eg. use StaticFlags::Lightmap to render only objects that can use lightmap.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.Flags">
            <summary>
            The view flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.Mode">
            <summary>
            The view mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.MaxShadowsQuality">
            <summary>
            Maximum allowed shadows quality for this view
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.ModelLODBias">
            <summary>
            The model LOD bias. Default is 0. Applied to all the objects in the render view.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.ModelLODDistanceFactor">
            <summary>
            The model LOD distance scale factor. Default is 1. Applied to all the objects in the render view. Higher values increase LODs quality.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.ShadowModelLODBias">
            <summary>
            The model LOD bias. Default is 0. Applied to all the objects in the shadow maps render views. Can be used to improve shadows rendering performance or increase quality.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.ShadowModelLODDistanceFactor">
            <summary>
            The model LOD distance scale factor. Default is 1. Applied to all the objects in the shadow maps render views. Higher values increase LODs quality. Can be used to improve shadows rendering performance or increase quality.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.TaaFrameIndex">
            <summary>
            The Temporal Anti-Aliasing jitter frame index.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.RenderLayersMask">
            <summary>
            The rendering mask for layers. Used to exclude objects from rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.ViewInfo">
            <summary>
            The view information vector with packed components to reconstruct linear depth and view position from the hardware depth buffer. Cached before rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.ScreenSize">
            <summary>
            The screen size packed (x - width, y - height, zw - inv width, w - inv height). Cached before rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.TemporalAAJitter">
            <summary>
            The temporal AA jitter packed (xy - this frame jitter, zw - previous frame jitter). Cached before rendering. Zero if TAA is disabled. The value added to projection matrix (in clip space).
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.PrevView">
            <summary>
            The previous frame view matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.PrevProjection">
            <summary>
            The previous frame projection matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.PrevViewProjection">
            <summary>
            The previous frame view * projection matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderView.ModelLODDistanceFactorSqrt">
            <summary>
            Square of <see cref="F:FlaxEngine.RenderView.ModelLODDistanceFactor"/>. Cached by rendering backend.
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderView.Init">
            <summary>
            Initializes this view with default options.
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderView.UpdateCachedData">
            <summary>
            Updates the cached data for the view (inverse matrices, etc.).
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderView.SetUp(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Initializes render view data.
            </summary>
            <param name="view">The view.</param>
            <param name="projection">The projection.</param>
        </member>
        <member name="M:FlaxEngine.RenderView.SetProjector(System.Single,System.Single,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single)">
            <summary>
            Set up view for projector rendering.
            </summary>
            <param name="nearPlane">Near plane</param>
            <param name="farPlane">Far plane</param>
            <param name="position">Camera's position</param>
            <param name="direction">Camera's direction vector</param>
            <param name="up">Camera's up vector</param>
            <param name="angle">Camera's FOV angle (in degrees)</param>
        </member>
        <member name="M:FlaxEngine.RenderView.CopyFrom(FlaxEngine.Camera)">
            <summary>
            Copies render view data from the camera.
            </summary>
            <param name="camera">The camera.</param>
        </member>
        <member name="M:FlaxEngine.RenderView.CopyFrom(FlaxEngine.Camera,FlaxEngine.Viewport@)">
            <summary>
            Copies render view data from the camera.
            </summary>
            <param name="camera">The camera.</param>
            <param name="customViewport">The custom viewport to use for view/projeection matrices override.</param>
        </member>
        <member name="T:FlaxEngine.GPUShader">
            <summary>
            The GPU resource with shader programs that can run on the GPU and are able to perform rendering calculation using textures, vertices and other resources.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUShader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GPUShader"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUShader.GetVS(System.String,System.Int32)">
            <summary>
            Gets the vertex shader.
            </summary>
            <param name="name">The shader program name.</param>
            <param name="permutationIndex">The shader permutation index.</param>
            <returns>The shader object.</returns>
        </member>
        <member name="M:FlaxEngine.GPUShader.GetHS(System.String,System.Int32)">
            <summary>
            Gets the hull shader.
            </summary>
            <param name="name">The shader program name.</param>
            <param name="permutationIndex">The shader permutation index.</param>
            <returns>The shader object.</returns>
        </member>
        <member name="M:FlaxEngine.GPUShader.GetDS(System.String,System.Int32)">
            <summary>
            Gets domain shader.
            </summary>
            <param name="name">The shader program name.</param>
            <param name="permutationIndex">The shader permutation index.</param>
            <returns>The shader object.</returns>
        </member>
        <member name="M:FlaxEngine.GPUShader.GetGS(System.String,System.Int32)">
            <summary>
            Gets the geometry shader.
            </summary>
            <param name="name">The shader program name.</param>
            <param name="permutationIndex">The shader permutation index.</param>
            <returns>The shader object.</returns>
        </member>
        <member name="M:FlaxEngine.GPUShader.GetPS(System.String,System.Int32)">
            <summary>
            Gets the pixel shader.
            </summary>
            <param name="name">The shader program name.</param>
            <param name="permutationIndex">The shader permutation index.</param>
            <returns>The shader object.</returns>
        </member>
        <member name="M:FlaxEngine.GPUShader.GetCS(System.String,System.Int32)">
            <summary>
            Gets the compute shader.
            </summary>
            <param name="name">The shader program name.</param>
            <param name="permutationIndex">The shader permutation index.</param>
            <returns>The shader object.</returns>
        </member>
        <member name="M:FlaxEngine.GPUShader.GetCB(System.Int32)">
            <summary>
            Gets the constant buffer.
            </summary>
            <param name="slot">The buffer slot index.</param>
            <returns>The Constant Buffer object.</returns>
        </member>
        <member name="T:FlaxEngine.GPUSampler">
            <summary>
            GPU texture sampler object.
            </summary>
            <seealso cref="T:FlaxEngine.GPUResource" />
        </member>
        <member name="M:FlaxEngine.GPUSampler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GPUSampler"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUSampler.Description">
            <summary>
            Gets sampler description structure.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUSampler.Init(FlaxEngine.GPUSamplerDescription@)">
            <summary>
            Creates new sampler.
            </summary>
            <param name="desc">The sampler description.</param>
            <returns>True if cannot create sampler, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.GPUSamplerFilter">
            <summary>
            GPU sampler filter modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerFilter.Point">
            <summary>
            Filter using the nearest found pixel. Texture appears pixelated.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerFilter.Bilinear">
            <summary>
            Filter using the linear average of the nearby pixels. Texture appears blurry.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerFilter.Trilinear">
            <summary>
            Filter using the linear average of the nearby pixels and nearby mipmaps. Texture appears blurry.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerFilter.Anisotropic">
            <summary>
            Filter using the anisotropic filtering that improves quality when viewing textures at a steep angles. Texture appears sharp at extreme viewing angles.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerFilter.MAX">
            <summary>
            The count of items in the GPUSamplerFilter enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUSamplerAddressMode">
            <summary>
            GPU sampler address modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerAddressMode.Wrap">
            <summary>
            Texture coordinates wrap back to the valid range.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerAddressMode.Clamp">
            <summary>
            Texture coordinates are clamped within the valid range.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerAddressMode.Mirror">
            <summary>
            Texture coordinates flip every time the size of the valid range is passed.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerAddressMode.Border">
            <summary>
            Texture coordinates outside of the valid range will return a separately set border color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerAddressMode.MAX">
            <summary>
            The count of items in the GPUSamplerAddressMode enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUSamplerCompareFunction">
            <summary>
            GPU sampler comparision function types.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerCompareFunction.Never">
            <summary>
            Never pass the comparison.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerCompareFunction.Less">
            <summary>
            If the source data is less than the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerCompareFunction.MAX">
            <summary>
            The count of items in the GPUSamplerCompareFunction enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUSamplerBorderColor">
            <summary>
            GPU sampler border color types.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerBorderColor.TransparentBlack">
            <summary>
            Indicates black, with the alpha component as fully transparent.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerBorderColor.OpaqueBlack">
            <summary>
            Indicates black, with the alpha component as fully opaque.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerBorderColor.OpaqueWhite">
            <summary>
            Indicates white, with the alpha component as fully opaque.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerBorderColor.MAX">
            <summary>
            The count of items in the GPUSamplerBorderColor enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUSamplerDescription">
            <summary>
            A common description for all samplers.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerDescription.Filter">
            <summary>
            The filtering method to use when sampling a texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerDescription.AddressU">
            <summary>
            The addressing mode for outside [0..1] range for U coordinate.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerDescription.AddressV">
            <summary>
            The addressing mode for outside [0..1] range for V coordinate.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerDescription.AddressW">
            <summary>
            The addressing mode for outside [0..1] range for W coordinate.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerDescription.MipBias">
            <summary>
            The mip bias to be added to mipmap LOD calculation.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerDescription.MinMipLevel">
            <summary>
            The minimum mip map level that will be used, where 0 is the highest resolution mip level.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerDescription.MaxMipLevel">
            <summary>
            The maximum mip map level that will be used, where 0 is the highest resolution mip level. To have no upper limit on LOD set this to a large value such as MAX_float.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerDescription.MaxAnisotropy">
            <summary>
            The maximum number of samples that can be used to improve the quality of sample footprints that are anisotropic.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerDescription.BorderColor">
            <summary>
            The border color to use if Border is specified for AddressU, AddressV, or AddressW.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUSamplerDescription.ComparisonFunction">
            <summary>
            A function that compares sampled data against existing sampled data.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUSamplerDescription.Clear">
            <summary>
            Clears description.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUSamplerDescription.New(FlaxEngine.GPUSamplerFilter,FlaxEngine.GPUSamplerAddressMode)">
            <summary>
            Creates a new <see cref="T:FlaxEngine.GPUSamplerDescription" /> with default settings.
            </summary>
            <param name="filter">The filtering method.</param>
            <param name="addressMode">The addressing mode.</param>
            <returns>A new instance of <see cref="T:FlaxEngine.GPUSamplerDescription" /> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUSamplerDescription.Equals(FlaxEngine.GPUSamplerDescription)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GPUSamplerDescription.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GPUSamplerDescription.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GPUTextureView">
            <summary>
            Defines a view for the <see cref="T:FlaxEngine.GPUTexture"/> surface, full resource or any of the sub-parts. Can be used to define a single subresource of the texture, volume texture or texture array. Used to render to the texture and/or use textures in the shaders.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUTextureView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GPUTextureView"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureView.Parent">
            <summary>
            Gets parent GPU resource owning that view.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureView.Format">
            <summary>
            Gets the view format.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureView.MSAA">
            <summary>
            Gets view MSAA level.
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUTexture">
            <summary>
            The GPU texture resource object. This class is able to create 2D/3D textures, volume textures and render targets.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GPUTexture"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.HasResidentMip">
            <summary>
            Gets a value indicating whether this texture has any resided mip (data already uploaded to the GPU).
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.IsAllocated">
            <summary>
            Gets a value indicating whether this texture has been allocated.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.Width">
            <summary>
            Gets texture width (in texels).
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.Height">
            <summary>
            Gets texture height (in texels).
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.Depth">
            <summary>
            Gets texture depth (in texels).
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.ArraySize">
            <summary>
            Gets number of textures in the array.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.MultiSampleLevel">
            <summary>
            Gets multi-sampling parameters for the texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.MipLevels">
            <summary>
            Gets number of mipmap levels in the texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.ResidentMipLevels">
            <summary>
            Gets or sets the number of resident mipmap levels in the texture (already uploaded to the GPU).
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.HighestResidentMipIndex">
            <summary>
            Gets the index of the highest resident mip map (may be equal to MipLevels if no mip has been uploaded). Note: mip=0 is the highest (top quality).
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.Format">
            <summary>
            Gets texture data format.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.Flags">
            <summary>
            Gets flags of the texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.Dimensions">
            <summary>
            Gets texture dimensions.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.Description">
            <summary>
            Gets texture description structure.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.Size">
            <summary>
            Gets the texture total size in pixels.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.Size3">
            <summary>
            Gets the texture total size in pixels (with depth).
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.IsPowerOfTwo">
            <summary>
            Returns true if texture has size that is power of two.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTexture.NativePtr">
            <summary>
            Gets the native pointer to the underlying resource. It's a low-level platform-specific handle.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUTexture.GetMipSize(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the texture mip map dimensions.
            </summary>
            <param name="mipLevelIndex">Mip level index (zero-based where 0 is top texture surface).</param>
            <param name="mipWidth">The calculated mip level width (in pixels).</param>
            <param name="mipHeight">The calculated mip level height (in pixels).</param>
        </member>
        <member name="M:FlaxEngine.GPUTexture.GetMipSize(System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the texture mip map dimensions.
            </summary>
            <param name="mipLevelIndex">Mip level index (zero-based where 0 is top texture surface).</param>
            <param name="mipWidth">The calculated mip level width (in pixels).</param>
            <param name="mipHeight">The calculated mip level height (in pixels).</param>
            <param name="mipDepth">The calculated mip level depth (in pixels).</param>
        </member>
        <member name="M:FlaxEngine.GPUTexture.View">
            <summary>
            Gets the view to the first surface (only for 2D textures).
            </summary>
            <returns>The view to the main texture surface.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTexture.View(System.Int32)">
            <summary>
            Gets the view to the surface at index in an array.
            </summary>
            <remarks>
            To use per depth/array slice view you need to specify the <see cref="F:FlaxEngine.GPUTextureFlags.PerSliceViews"/> when creating the resource.
            </remarks>
            <param name="arrayOrDepthIndex">The index of the surface in an array (or depth slice index).</param>
            <returns>The view to the surface at index in an array.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTexture.View(System.Int32,System.Int32)">
            <summary>
            Gets the view to the mip map surface at index in an array.
            </summary>
            <remarks>
            To use per mip map view you need to specify the <see cref="F:FlaxEngine.GPUTextureFlags.PerMipViews"/> when creating the resource.
            </remarks>
            <param name="arrayOrDepthIndex">The index of the surface in an array (or depth slice index).</param>
            <param name="mipMapIndex">Index of the mip level.</param>
            <returns>The view to the surface at index in an array.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTexture.ViewArray">
            <summary>
            Gets the view to the array of surfaces
            </summary>
            <remarks>
            To use array texture view you need to create render target as an array.
            </remarks>
            <returns>The view to the array of surfaces.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTexture.ViewVolume">
            <summary>
            Gets the view to the volume texture (3D).
            </summary>
            <remarks>
            To use volume texture view you need to create render target as a volume resource (3D texture with Depth > 1).
            </remarks>
            <returns>The view to the volume texture.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTexture.ViewReadOnlyDepth">
            <summary>
            Gets the view to the texture as read-only depth/stencil buffer. Valid only if graphics device supports it and the texture uses depth/stencil.
            </summary>
            <returns>The view to the depth-stencil resource descriptor as read-only depth.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTexture.Init(FlaxEngine.GPUTextureDescription@)">
            <summary>
            Initializes a texture resource (allocates the GPU memory and performs the resource setup).
            </summary>
            <param name="desc">The texture description.</param>
            <returns>True if cannot create texture, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTexture.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the texture. It must be created first.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>True if fails, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTexture.Resize(System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes the texture. It must be created first.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <returns>True if fails, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.GPUTextureFlags">
            <summary>
            GPU texture usage flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureFlags.None">
            <summary>
            No texture flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureFlags.ShaderResource">
            <summary>
            Create a texture that can be bound as a shader resource.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureFlags.RenderTarget">
            <summary>
            Create a texture that can be bound as a render target.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureFlags.UnorderedAccess">
            <summary>
            Create a texture can be bound as an unordered access buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureFlags.DepthStencil">
            <summary>
            Create a texture can be bound as a depth stencil buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureFlags.PerMipViews">
            <summary>
            Create texture views per texture mip map (valid only for Texture2D with ShaderResource or RenderTarget flag).
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureFlags.PerSliceViews">
            <summary>
            Create texture views per texture slice map (valid only for Texture3D with ShaderResource or RenderTarget flag).
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureFlags.ReadOnlyDepthView">
            <summary>
            Create read-only view for depth-stencil buffer. Valid only if texture uses depth-stencil and the graphics device supports it.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureFlags.BackBuffer">
            <summary>
            Create a texture that can be used as a native window swap chain backbuffer surface.
            </summary>
        </member>
        <member name="T:FlaxEngine.TextureDimensions">
            <summary>
            Defines the dimension of a texture object.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureDimensions.Texture">
            <summary>
            The texture (2d).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureDimensions.VolumeTexture">
            <summary>
            The volume texture (3d texture).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureDimensions.CubeTexture">
            <summary>
            The cube texture (2d texture array of 6 items).
            </summary>
        </member>
        <member name="T:FlaxEngine.GPUTextureDescription">
            <summary>
            A common description for all GPU textures.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureDescription.Dimensions">
            <summary>
            The dimensions of the texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureDescription.Width">
            <summary>
            Texture width (in texels).
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureDescription.Height">
            <summary>
            Texture height (in texels).
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureDescription.Depth">
            <summary>
            Texture depth (in texels) for Volume Textures.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureDescription.ArraySize">
            <summary>
            Number of textures in array for Texture Arrays.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureDescription.MipLevels">
            <summary>
            The maximum number of mipmap levels in the texture. Use 1 for a multisampled texture; or 0 to generate a full set of subtextures.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureDescription.Format">
            <summary>
            Texture format (see <strong><see cref="T:FlaxEngine.PixelFormat"/></strong>).
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureDescription.MultiSampleLevel">
            <summary>
            Structure that specifies multisampling parameters for the texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureDescription.Flags">
            <summary>
            Flags (see <strong><see cref="T:FlaxEngine.GPUTextureFlags"/></strong>) for binding to pipeline stages. The flags can be combined by a logical OR.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureDescription.Usage">
            <summary>
            Value that identifies how the texture is to be read from and written to. The most common value is <see cref="F:FlaxEngine.GPUResourceUsage.Default"/>; see <strong><see cref="T:FlaxEngine.GPUResourceUsage"/></strong> for all possible values.
            </summary>
        </member>
        <member name="F:FlaxEngine.GPUTextureDescription.DefaultClearColor">
            <summary>
            Default clear color for render targets
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureDescription.IsRenderTarget">
            <summary>
            Gets a value indicating whether this instance is a render target.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureDescription.IsDepthStencil">
            <summary>
            Gets a value indicating whether this instance is a depth stencil.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureDescription.IsShaderResource">
            <summary>
            Gets a value indicating whether this instance is a shader resource.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureDescription.IsUnorderedAccess">
            <summary>
            Gets a value indicating whether this instance is a unordered access.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureDescription.HasPerMipViews">
            <summary>
            Gets a value indicating whether this instance has per mip level handles.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureDescription.HasPerSliceViews">
            <summary>
            Gets a value indicating whether this instance has per slice views.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureDescription.IsMultiSample">
            <summary>
            Gets a value indicating whether this instance is a multi sample texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureDescription.IsCubeMap">
            <summary>
            Gets a value indicating whether this instance is a cubemap texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureDescription.IsVolume">
            <summary>
            Gets a value indicating whether this instance is a volume texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.GPUTextureDescription.IsArray">
            <summary>
            Gets a value indicating whether this instance is an array texture.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.Clear">
            <summary>
            Clears description.
            </summary>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.New1D(System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags,System.Int32)">
            <summary>
            Creates a new 1D <see cref="T:FlaxEngine.GPUTextureDescription" /> with a single mipmap.
            </summary>
            <param name="width">The width.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>A new instance of 1D <see cref="T:FlaxEngine.GPUTextureDescription" /> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.New1D(System.Int32,System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags,System.Int32)">
            <summary>
            Creates a new 1D <see cref="T:FlaxEngine.GPUTextureDescription" />.
            </summary>
            <param name="width">The width.</param>
            <param name="mipCount">Number of mipmaps for the texture. Default is 1. Use 0 to allocate full mip chain.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>A new instance of 1D <see cref="T:FlaxEngine.GPUTextureDescription" /> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.New1D(System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags,System.Int32,System.Int32)">
            <summary>
            Creates a new 1D <see cref="T:FlaxEngine.GPUTextureDescription" />.
            </summary>
            <param name="width">The width.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="mipCount">Number of mipmaps for the texture. Default is 1. Use 0 to allocate full mip chain.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>A new instance of 1D <see cref="T:FlaxEngine.GPUTextureDescription" /> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.New2D(System.Int32,System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags,System.Int32)">
            <summary>
            Creates a new <see cref="T:FlaxEngine.GPUTextureDescription" /> with a single mipmap.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>A new instance of <see cref="T:FlaxEngine.GPUTextureDescription" /> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.New2D(System.Int32,System.Int32,System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags,System.Int32,FlaxEngine.MSAALevel)">
            <summary>
            Creates a new <see cref="T:FlaxEngine.GPUTextureDescription" />.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="mipCount">Number of mipmaps for the texture. Default is 1. Use 0 to allocate full mip chain.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="msaaLevel">The MSAA Level.</param>
            <returns>A new instance of <see cref="T:FlaxEngine.GPUTextureDescription" /> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.New2D(System.Int32,System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags,System.Int32,System.Int32,FlaxEngine.MSAALevel)">
            <summary>
            Creates a new <see cref="T:FlaxEngine.GPUTextureDescription" />.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="mipCount">Number of mipmaps for the texture. Default is 1. Use 0 to allocate full mip chain.</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <param name="msaaLevel">The MSAA Level.</param>
            <returns>A new instance of <see cref="T:FlaxEngine.GPUTextureDescription" /> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.New3D(FlaxEngine.Vector3,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags)">
            <summary>
            Creates a new <see cref="T:FlaxEngine.GPUTextureDescription" /> with a single mipmap.
            </summary>
            <param name="size">The size (width, height and depth).</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <returns>A new instance of <see cref="T:FlaxEngine.GPUTextureDescription" /> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.New3D(System.Int32,System.Int32,System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags)">
            <summary>
            Creates a new <see cref="T:FlaxEngine.GPUTextureDescription" /> with a single mipmap.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <returns>A new instance of <see cref="T:FlaxEngine.GPUTextureDescription" /> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.New3D(System.Int32,System.Int32,System.Int32,System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags)">
            <summary>
            Creates a new <see cref="T:FlaxEngine.GPUTextureDescription" />.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="mipCount">Number of mipmaps for the texture. Default is 1. Use 0 to allocate full mip chain.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <returns>A new instance of <see cref="T:FlaxEngine.GPUTextureDescription" /> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.New3D(System.Int32,System.Int32,System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags,System.Int32)">
            <summary>
            Creates a new <see cref="T:FlaxEngine.GPUTextureDescription" />.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="depth">The depth.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">true if the texture needs to support unordered read write.</param>
            <param name="mipCount">Number of mipmaps for the texture. Default is 1. Use 0 to allocate full mip chain.</param>
            <returns>A new instance of <see cref="T:FlaxEngine.GPUTextureDescription" /> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.NewCube(System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags)">
            <summary>
            Creates a new Cube <see cref="T:FlaxEngine.GPUTextureDescription" />.
            </summary>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">The texture flags.</param>
            <returns>A new instance of <see cref="T:FlaxEngine.GPUTextureDescription" /> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.NewCube(System.Int32,System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags)">
            <summary>
            Creates a new Cube <see cref="T:FlaxEngine.GPUTextureDescription"/>.
            </summary>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="mipCount">Number of mipmaps for the texture. Default is 1. Use 0 to allocate full mip chain.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">The texture flags.</param>
            <returns>A new instance of <see cref="T:FlaxEngine.GPUTextureDescription"/> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.NewCube(System.Int32,FlaxEngine.PixelFormat,FlaxEngine.GPUTextureFlags,System.Int32)">
            <summary>
            Creates a new Cube <see cref="T:FlaxEngine.GPUTextureDescription"/>.
            </summary>
            <param name="size">The size (in pixels) of the top-level faces of the cube texture.</param>
            <param name="format">Describes the format to use.</param>
            <param name="textureFlags">The texture flags.</param>
            <param name="mipCount">Number of mipmaps for the texture. Default is 1. Use 0 to allocate full mip chain.</param>
            <returns>A new instance of <see cref="T:FlaxEngine.GPUTextureDescription"/> class.</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.ToStagingUpload">
            <summary>
            Gets the staging description for this instance.
            </summary>
            <returns>A staging texture description</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.ToStagingReadback">
            <summary>
            Gets the staging description for this instance.
            </summary>
            <returns>A staging texture description</returns>
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.ToString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GPUTextureDescription.Equals(FlaxEngine.GPUTextureDescription)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.TextureBase">
            <summary>
            Base class for <see cref="P:FlaxEngine.TextureBase.Texture"/>, <see cref="T:FlaxEngine.SpriteAtlas"/>, <see cref="T:FlaxEngine.IESProfile"/> and other assets that can contain texture data.
            </summary>
            <seealso cref="T:FlaxEngine.BinaryAsset" />
        </member>
        <member name="M:FlaxEngine.TextureBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.TextureBase"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.Texture">
            <summary>
            Gets GPU texture object allocated by the asset.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.Format">
            <summary>
            Gets the texture data format.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.Width">
            <summary>
            Gets the total width of the texture. Actual resident size may be different due to dynamic content streaming. Returns 0 if texture is not loaded.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.Height">
            <summary>
            Gets the total height of the texture. Actual resident size may be different due to dynamic content streaming. Returns 0 if texture is not loaded.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.Size">
            <summary>
            Gets the total size of the texture. Actual resident size may be different due to dynamic content streaming. Returns Vector2.Zero if texture is not loaded.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.ArraySize">
            <summary>
            Gets the total array size of the texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.MipLevels">
            <summary>
            Gets the total mip levels count of the texture. Actual resident mipmaps count may be different due to dynamic content streaming.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.ResidentMipLevels">
            <summary>
            Gets the current mip levels count of the texture that are on GPU ready to use.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.CurrentMemoryUsage">
            <summary>
            Gets the amount of the memory used by this resource. Exact value may differ due to memory alignment and resource allocation policy.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.TotalMemoryUsage">
            <summary>
            Gets the total memory usage that texture may have in use (if loaded to the maximum quality). Exact value may differ due to memory alignment and resource allocation policy.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.TextureGroup">
            <summary>
            Gets or sets the index of the texture group used by this texture.
            </summary>
        </member>
        <member name="M:FlaxEngine.TextureBase.GetMipData(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the mip data.
            </summary>
            <param name="mipIndex">The mip index (zero-based).</param>
            <param name="rowPitch">The data row pitch (in bytes).</param>
            <param name="slicePitch">The data slice pitch (in bytes).</param>
            <returns>The mip-map data or empty if failed to get it.</returns>
        </member>
        <member name="M:FlaxEngine.TextureBase.GetPixels(FlaxEngine.Color32[]@,System.Int32,System.Int32)">
            <summary>
            Gets the texture pixels as Color32 array.
            </summary>
            <remarks>Supported only for 'basic' texture formats (uncompressed, single plane).</remarks>
            <param name="pixels">The result texture pixels array.</param>
            <param name="mipIndex">The mip index (zero-based).</param>
            <param name="arrayIndex">The array or depth slice index (zero-based).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.TextureBase.GetPixels(FlaxEngine.Color[]@,System.Int32,System.Int32)">
            <summary>
            Gets the texture pixels as Color array.
            </summary>
            <remarks>Supported only for 'basic' texture formats (uncompressed, single plane).</remarks>
            <param name="pixels">The result texture pixels array.</param>
            <param name="mipIndex">The mip index (zero-based).</param>
            <param name="arrayIndex">The array or depth slice index (zero-based).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.TextureBase.SetPixels(FlaxEngine.Color32[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the texture pixels as Color32 array (asset must be virtual and already initialized).
            </summary>
            <remarks>Supported only for 'basic' texture formats (uncompressed, single plane).</remarks>
            <param name="pixels">The texture pixels array.</param>
            <param name="mipIndex">The mip index (zero-based).</param>
            <param name="arrayIndex">The array or depth slice index (zero-based).</param>
            <param name="generateMips">Enables automatic mip-maps generation (fast point filter) based on the current mip (will generate lower mips).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.TextureBase.SetPixels(FlaxEngine.Color[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the texture pixels as Color array (asset must be virtual and already initialized).
            </summary>
            <remarks>Supported only for 'basic' texture formats (uncompressed, single plane).</remarks>
            <param name="pixels">The texture pixels array.</param>
            <param name="mipIndex">The mip index (zero-based).</param>
            <param name="arrayIndex">The array or depth slice index (zero-based).</param>
            <param name="generateMips">Enables automatic mip-maps generation (fast point filter) based on the current mip (will generate lower mips).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="F:FlaxEngine.TextureBase.MaxTextureSize">
            <summary>
            The maximum size for the texture resources (supported by engine, the target platform can be lower capabilities).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.MaxMipLevels">
            <summary>
            The maximum amount of the mip levels for the texture resources (supported by engine, the target platform can be lower capabilities).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.MaxArraySize">
            <summary>
            The maximum array size for the texture resources (supported by engine, the target platform can be lower capabilities).
            </summary>
        </member>
        <member name="T:FlaxEngine.TextureBase.InitData">
            <summary>
            The texture data initialization container.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.Format">
            <summary>
            The format of the pixels.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.Width">
            <summary>
            The width (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.Height">
            <summary>
            The height (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.ArraySize">
            <summary>
            The array size (slices count).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.GenerateMips">
            <summary>
            If checked, the engine will generate automatic-mips based on the latest provided mip.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.GenerateMipsLinear">
            <summary>
            If checked, the generated mips will use linear filter, otherwise it will use point filter. Linear filter is supported only for formats compatible with Color32.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.Mips">
            <summary>
            The mips levels data.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextureBase.InitData.IsValid">
            <summary>
            Returns true if init data is valid.
            </summary>
        </member>
        <member name="T:FlaxEngine.TextureBase.InitData.MipData">
            <summary>
            The mip data container.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.MipData.Data">
            <summary>
            The texture data. Use <see cref="F:FlaxEngine.TextureBase.InitData.MipData.RowPitch"/> and <see cref="F:FlaxEngine.TextureBase.InitData.MipData.SlicePitch"/> to define the storage format.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.MipData.RowPitch">
            <summary>
            The data container image row pitch (in bytes).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureBase.InitData.MipData.SlicePitch">
            <summary>
            The data container image slice pitch (in bytes).
            </summary>
        </member>
        <member name="M:FlaxEngine.TextureBase.Init(FlaxEngine.TextureBase.InitData@)">
            <summary>
            Initializes the texture storage container with the given data. Valid only for virtual assets. Can be used in both Editor and at runtime in a build game.
            It does not perform any data streaming or uploading to the GPU. Only the texture resource is being initialized and the data is copied to be streamed later.
            </summary>
            <remarks>
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            </remarks>
            <param name="initData">The texture init data.</param>
        </member>
        <member name="T:FlaxEngine.CursorLockMode">
            <summary>
            Hardware mouse cursor behavior.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorLockMode.None">
            <summary>
            The default mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorLockMode.Locked">
            <summary>
            Cursor position is locked to the center of the game window.
            </summary>
        </member>
        <member name="T:FlaxEngine.MouseButton">
            <summary>
            Mouse buttons types.
            </summary>
        </member>
        <member name="F:FlaxEngine.MouseButton.None">
            <summary>
            No button.
            </summary>
        </member>
        <member name="F:FlaxEngine.MouseButton.Left">
            <summary>
            Left button.
            </summary>
        </member>
        <member name="F:FlaxEngine.MouseButton.Middle">
            <summary>
            Middle button.
            </summary>
        </member>
        <member name="F:FlaxEngine.MouseButton.Right">
            <summary>
            Right button.
            </summary>
        </member>
        <member name="F:FlaxEngine.MouseButton.Extended1">
            <summary>
            Extended button 1 (or XButton1).
            </summary>
        </member>
        <member name="F:FlaxEngine.MouseButton.Extended2">
            <summary>
            Extended button 2 (or XButton2).
            </summary>
        </member>
        <member name="F:FlaxEngine.MouseButton.MAX">
            <summary>
            The count of items in the MouseButton enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.GamepadAxis">
            <summary>
            Axis for gamepad.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadAxis.None">
            <summary>
            No axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadAxis.LeftStickX">
            <summary>
            The X-Axis of the left thumb stick.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadAxis.LeftStickY">
            <summary>
            The Y-Axis of the left thumb stick.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadAxis.RightStickX">
            <summary>
            The X-Axis of the right thumb stick.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadAxis.RightStickY">
            <summary>
            The Y-Axis of the right thumb stick.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadAxis.LeftTrigger">
            <summary>
            The left trigger.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadAxis.RightTrigger">
            <summary>
            The right trigger.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadAxis.MAX">
            <summary>
            The count of items in the GamepadAxis enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.GamepadButton">
            <summary>
            Buttons for gamepad.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.None">
            <summary>
            No buttons.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.DPadUp">
            <summary>
            PadUp button (DPad / Directional Pad).
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.DPadDown">
            <summary>
            PadDown button (DPad / Directional Pad).
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.DPadLeft">
            <summary>
            PadLeft button (DPad / Directional Pad).
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.DPadRight">
            <summary>
            PadRight button (DPad / Directional Pad).
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.Start">
            <summary>
            Start button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.Back">
            <summary>
            Back button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.LeftThumb">
            <summary>
            Left thumbstick button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.RightThumb">
            <summary>
            Right thumbstick button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.LeftShoulder">
            <summary>
            Left shoulder button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.RightShoulder">
            <summary>
            Right shoulder button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.LeftTrigger">
            <summary>
            Left trigger button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.RightTrigger">
            <summary>
            Right trigger button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.A">
            <summary>
            A (face button down).
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.B">
            <summary>
            B (face button right).
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.X">
            <summary>
            X (face button left).
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.Y">
            <summary>
            Y (face button up).
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.LeftStickUp">
            <summary>
            The left stick up.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.LeftStickDown">
            <summary>
            The left stick down.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.LeftStickLeft">
            <summary>
            The left stick left.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.LeftStickRight">
            <summary>
            The left stick right.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.RightStickUp">
            <summary>
            The right stick up.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.RightStickDown">
            <summary>
            The right stick down.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.RightStickLeft">
            <summary>
            The right stick left.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.RightStickRight">
            <summary>
            The right stick right.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadButton.MAX">
            <summary>
            The count of items in the GamepadButton enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.InputActionMode">
            <summary>
            The input action event trigger modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputActionMode.Pressing">
            <summary>
            User is pressing the key/button.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputActionMode.Press">
            <summary>
            User pressed the key/button (but wasn't pressing it in the previous frame).
            </summary>
        </member>
        <member name="F:FlaxEngine.InputActionMode.Release">
            <summary>
            User released the key/button (was pressing it in the previous frame).
            </summary>
        </member>
        <member name="T:FlaxEngine.InputGamepadIndex">
            <summary>
            The input gamepad index.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputGamepadIndex.All">
            <summary>
            All detected gamepads.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputGamepadIndex.Gamepad0">
            <summary>
            The gamepad no. 0.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputGamepadIndex.Gamepad1">
            <summary>
            The gamepad no. 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputGamepadIndex.Gamepad2">
            <summary>
            The gamepad no. 2.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputGamepadIndex.Gamepad3">
            <summary>
            The gamepad no. 3.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputGamepadIndex.Gamepad4">
            <summary>
            The gamepad no. 4.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputGamepadIndex.Gamepad5">
            <summary>
            The gamepad no. 5.
            </summary>
        </member>
        <member name="T:FlaxEngine.InputAxisType">
            <summary>
            The input axes types.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.MouseX">
            <summary>
            The mouse X-Axis (mouse delta position scaled by the sensitivity).
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.MouseY">
            <summary>
            The mouse Y-Axis (mouse delta position scaled by the sensitivity).
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.MouseWheel">
            <summary>
            The mouse wheel (mouse wheel delta scaled by the sensitivity).
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.GamepadLeftStickX">
            <summary>
            The gamepad X-Axis of the left thumb stick.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.GamepadLeftStickY">
            <summary>
            The gamepad Y-Axis of the left thumb stick.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.GamepadRightStickX">
            <summary>
            The gamepad X-Axis of the right thumb stick.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.GamepadRightStickY">
            <summary>
            The gamepad Y-Axis of the right thumb stick.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.GamepadLeftTrigger">
            <summary>
            The gamepad left trigger.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.GamepadRightTrigger">
            <summary>
            The gamepad right trigger.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxisType.KeyboardOnly">
            <summary>
            The keyboard only mode. For key inputs.
            </summary>
        </member>
        <member name="T:FlaxEngine.GamepadVibrationState">
            <summary>
            General identifiers for potential force feedback channels. These will be mapped according to the platform specific implementation.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadVibrationState.LeftLarge">
            <summary>
            The left large motor vibration.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadVibrationState.LeftSmall">
            <summary>
            The left small motor vibration.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadVibrationState.RightLarge">
            <summary>
            The right large motor vibration.
            </summary>
        </member>
        <member name="F:FlaxEngine.GamepadVibrationState.RightSmall">
            <summary>
            The right small motor vibration.
            </summary>
        </member>
        <member name="T:FlaxEngine.Gamepad">
            <summary>
            Represents a single hardware gamepad device. Used by the Input to report raw gamepad input events.
            </summary>
        </member>
        <member name="M:FlaxEngine.Gamepad.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Gamepad"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Gamepad.ProductID">
            <summary>
            Gets the gamepad device type identifier.
            </summary>
        </member>
        <member name="M:FlaxEngine.Gamepad.GetAxis(FlaxEngine.GamepadAxis)">
            <summary>
            Gets the gamepad axis value.
            </summary>
            <param name="axis">Gamepad axis to check</param>
            <returns>Axis value.</returns>
        </member>
        <member name="M:FlaxEngine.Gamepad.GetButton(FlaxEngine.GamepadButton)">
            <summary>
            Gets the gamepad button state (true if being pressed during the current frame).
            </summary>
            <param name="button">Gamepad button to check</param>
            <returns>True if user holds down the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Gamepad.GetButtonDown(FlaxEngine.GamepadButton)">
            <summary>
            Gets the gamepad button down state (true if was pressed during the current frame).
            </summary>
            <param name="button">Gamepad button to check</param>
            <returns>True if user starts pressing down the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Gamepad.GetButtonUp(FlaxEngine.GamepadButton)">
            <summary>
            Gets the gamepad button up state (true if was released during the current frame).
            </summary>
            <param name="button">Gamepad button to check</param>
            <returns>True if user releases the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Gamepad.SetVibration(FlaxEngine.GamepadVibrationState)">
            <summary>
            Sets the state of the gamepad vibration. Ignored if controller does not support this.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:FlaxEngine.Gamepad.SetColor(FlaxEngine.Color)">
            <summary>
            Sets the color of the gamepad light. Ignored if controller does not support this.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:FlaxEngine.Gamepad.ResetColor">
            <summary>
            Resets the color of the gamepad light to the default. Ignored if controller does not support this.
            </summary>
        </member>
        <member name="T:FlaxEngine.Input">
            <summary>
            The user input handling service.
            </summary>
        </member>
        <member name="E:FlaxEngine.Input.GamepadsChanged">
            <summary>
            Action called when gamepads collection gets changed (during input update).
            </summary>
        </member>
        <member name="E:FlaxEngine.Input.ActionTriggered">
            <summary>
            Event fired when virtual input action is triggered. Called before scripts update. See <see cref="P:FlaxEngine.Input.ActionMappings"/> to edit configuration.
            </summary>
            <seealso cref="T:FlaxEngine.InputEvent"/>
        </member>
        <member name="P:FlaxEngine.Input.Mouse">
            <summary>
            Gets the mouse (null if platform does not support mouse or it is not connected).
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.Keyboard">
            <summary>
            Gets the keyboard (null if platform does not support keyboard or it is not connected).
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.Gamepads">
            <summary>
            Gets the gamepads.
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.ActionMappings">
            <summary>
            Maps a discrete button or key press events to a "friendly name" that will later be bound to event-driven behavior. The end effect is that pressing (and/or releasing) a key, mouse button, or keypad button.
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.AxisMappings">
            <summary>
            Maps keyboard, controller, or mouse inputs to a "friendly name" that will later be bound to continuous game behavior, such as movement. The inputs mapped in AxisMappings are continuously polled, even if they are just reporting that their input value.
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.GamepadsCount">
            <summary>
            Gets the gamepads count.
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.InputText">
            <summary>
            Gets the text entered during the current frame (Unicode).
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.MousePosition">
            <summary>
            Gets or sets the mouse position in game window coordinates.
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.MouseScreenPosition">
            <summary>
            Gets or sets the mouse position in screen-space coordinates.
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.MousePositionDelta">
            <summary>
            Gets the mouse position change during the last frame.
            </summary>
        </member>
        <member name="P:FlaxEngine.Input.MouseScrollDelta">
            <summary>
            Gets the mouse wheel change during the last frame.
            </summary>
        </member>
        <member name="M:FlaxEngine.Input.GetGamepad(System.Int32)">
            <summary>
            Gets the gamepads count.
            </summary>
            <param name="index">The gamepad index.</param>
            <returns>The gamepad device or null if index is invalid.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetKey(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets the key state (true if key is being pressed during this frame).
            </summary>
            <param name="key">Key ID to check</param>
            <returns>True while the user holds down the key identified by id</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetKeyDown(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets the key 'down' state (true if key was pressed in this frame).
            </summary>
            <param name="key">Key ID to check</param>
            <returns>True during the frame the user starts pressing down the key</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetKeyUp(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets the key 'up' state (true if key was released in this frame).
            </summary>
            <param name="key">Key ID to check</param>
            <returns>True during the frame the user releases the key</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetMouseButton(FlaxEngine.MouseButton)">
            <summary>
            Gets the mouse button state.
            </summary>
            <param name="button">Mouse button to check</param>
            <returns>True while the user holds down the button</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetMouseButtonDown(FlaxEngine.MouseButton)">
            <summary>
            Gets the mouse button down state.
            </summary>
            <param name="button">Mouse button to check</param>
            <returns>True during the frame the user starts pressing down the button</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetMouseButtonUp(FlaxEngine.MouseButton)">
            <summary>
            Gets the mouse button up state.
            </summary>
            <param name="button">Mouse button to check</param>
            <returns>True during the frame the user releases the button</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetGamepadAxis(System.Int32,FlaxEngine.GamepadAxis)">
            <summary>
            Gets the gamepad axis value.
            </summary>
            <param name="gamepadIndex">The gamepad index</param>
            <param name="axis">Gamepad axis to check</param>
            <returns>Axis value.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetGamepadButton(System.Int32,FlaxEngine.GamepadButton)">
            <summary>
            Gets the gamepad button state (true if being pressed during the current frame).
            </summary>
            <param name="gamepadIndex">The gamepad index</param>
            <param name="button">Gamepad button to check</param>
            <returns>True if user holds down the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetGamepadButtonDown(System.Int32,FlaxEngine.GamepadButton)">
            <summary>
            Gets the gamepad button down state (true if was pressed during the current frame).
            </summary>
            <param name="gamepadIndex">The gamepad index</param>
            <param name="button">Gamepad button to check</param>
            <returns>True if user starts pressing down the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetGamepadButtonUp(System.Int32,FlaxEngine.GamepadButton)">
            <summary>
            Gets the gamepad button up state (true if was released during the current frame).
            </summary>
            <param name="gamepadIndex">The gamepad index</param>
            <param name="button">Gamepad button to check</param>
            <returns>True if user releases the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetGamepadAxis(FlaxEngine.InputGamepadIndex,FlaxEngine.GamepadAxis)">
            <summary>
            Gets the gamepad axis value.
            </summary>
            <param name="gamepad">The gamepad</param>
            <param name="axis">Gamepad axis to check</param>
            <returns>Axis value.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetGamepadButton(FlaxEngine.InputGamepadIndex,FlaxEngine.GamepadButton)">
            <summary>
            Gets the gamepad button state (true if being pressed during the current frame).
            </summary>
            <param name="gamepad">The gamepad</param>
            <param name="button">Gamepad button to check</param>
            <returns>True if user holds down the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetGamepadButtonDown(FlaxEngine.InputGamepadIndex,FlaxEngine.GamepadButton)">
            <summary>
            Gets the gamepad button down state (true if was pressed during the current frame).
            </summary>
            <param name="gamepad">The gamepad</param>
            <param name="button">Gamepad button to check</param>
            <returns>True if user starts pressing down the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetGamepadButtonUp(FlaxEngine.InputGamepadIndex,FlaxEngine.GamepadButton)">
            <summary>
            Gets the gamepad button up state (true if was released during the current frame).
            </summary>
            <param name="gamepad">The gamepad</param>
            <param name="button">Gamepad button to check</param>
            <returns>True if user releases the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Input.GetAction(System.String)">
            <summary>
            Gets the value of the virtual action identified by name. Use <see cref="P:FlaxEngine.Input.ActionMappings"/> to get the current config.
            </summary>
            <param name="name">The action name.</param>
            <returns>True if action has been triggered in the current frame (e.g. button pressed), otherwise false.</returns>
            <seealso cref="P:FlaxEngine.Input.ActionMappings"/>
        </member>
        <member name="M:FlaxEngine.Input.GetAxis(System.String)">
            <summary>
            Gets the value of the virtual axis identified by name. Use <see cref="P:FlaxEngine.Input.AxisMappings"/> to get the current config.
            </summary>
            <param name="name">The action name.</param>
            <returns>The current axis value (e.g for gamepads it's in the range -1..1). Value is smoothed to reduce artifacts.</returns>
            <seealso cref="P:FlaxEngine.Input.AxisMappings"/>
        </member>
        <member name="M:FlaxEngine.Input.GetAxisRaw(System.String)">
            <summary>
            Gets the raw value of the virtual axis identified by name with no smoothing filtering applied. Use <see cref="P:FlaxEngine.Input.AxisMappings"/> to get the current config.
            </summary>
            <param name="name">The action name.</param>
            <returns>The current axis value (e.g for gamepads it's in the range -1..1). No smoothing applied.</returns>
            <seealso cref="P:FlaxEngine.Input.AxisMappings"/>
        </member>
        <member name="T:FlaxEngine.InputDevice">
            <summary>
            Base class for all input device objects.
            </summary>
        </member>
        <member name="M:FlaxEngine.InputDevice.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.InputDevice"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.InputDevice.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:FlaxEngine.Keyboard">
            <summary>
            Represents a single hardware keyboard device. Used by the Input to report raw keyboard input events.
            </summary>
        </member>
        <member name="M:FlaxEngine.Keyboard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Keyboard"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Keyboard.InputText">
            <summary>
            Gets the text entered during the current frame.
            </summary>
        </member>
        <member name="P:FlaxEngine.Keyboard.IsAnyKeyDown">
            <summary>
            Checks if any keyboard key is currently pressed.
            </summary>
        </member>
        <member name="M:FlaxEngine.Keyboard.GetKey(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets keyboard key state.
            </summary>
            <param name="key">Key ID to check.</param>
            <returns>True if user holds down the key identified by id, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Keyboard.GetKeyDown(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets keyboard key down state.
            </summary>
            <param name="key">Key ID to check</param>
            <returns>True if user starts pressing down the key, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Keyboard.GetKeyUp(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets keyboard key up state.
            </summary>
            <param name="key">Key ID to check</param>
            <returns>True if user releases the key, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.KeyboardKeys">
            <summary>
            Enumeration for key codes.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.None">
            <summary>
            The 'none' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Backspace">
            <summary>
            BACKSPACE key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Tab">
            <summary>
            TAB key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Clear">
            <summary>
            CLEAR key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Return">
            <summary>
            ENTER key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Shift">
            <summary>
            Any SHIFT key, right or left
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Control">
            <summary>
            Any CTRL key, right or left
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Alt">
            <summary>
            Any ALT key, right or left
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Pause">
            <summary>
            PAUSE key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Capital">
            <summary>
            CAPS LOCK key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Kana">
            <summary>
            IME Kana mode
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Hangul">
            <summary>
            IME Hangul mode
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Junja">
            <summary>
            IME Junja mode
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Final">
            <summary>
            IME final mode
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Hanja">
            <summary>
            IME Hanja mode
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Kanji">
            <summary>
            IME Kanji mode
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Escape">
            <summary>
            ESC key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Convert">
            <summary>
            IME convert
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Nonconvert">
            <summary>
            IME nonconvert
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Accept">
            <summary>
            IME accept
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Modechange">
            <summary>
            IME mode change request
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Spacebar">
            <summary>
            SPACEBAR key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.PageUp">
            <summary>
            PAGE UP key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.PageDown">
            <summary>
            PAGE DOWN key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.End">
            <summary>
            END key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Home">
            <summary>
            HOME key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.ArrowLeft">
            <summary>
            LEFT ARROW key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.ArrowUp">
            <summary>
            UP ARROW key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.ArrowRight">
            <summary>
            RIGHT ARROW key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.ArrowDown">
            <summary>
            DOWN ARROW key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Select">
            <summary>
            SELECT key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Print">
            <summary>
            PRINT key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Execute">
            <summary>
            EXECUTE key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.PrintScreen">
            <summary>
            PRINT SCREEN key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Insert">
            <summary>
            INSERT key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Delete">
            <summary>
            DELETE key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Help">
            <summary>
            HELP key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Alpha0">
            <summary>
            The '0' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Alpha1">
            <summary>
            The '1' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Alpha2">
            <summary>
            The '2' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Alpha3">
            <summary>
            The '3' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Alpha4">
            <summary>
            The '4' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Alpha5">
            <summary>
            The '5' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Alpha6">
            <summary>
            The '6' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Alpha7">
            <summary>
            The '7' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Alpha8">
            <summary>
            The '8' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Alpha9">
            <summary>
            The '9' key on the top of the alphanumeric keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.A">
            <summary>
            A key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.B">
            <summary>
            B key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.C">
            <summary>
            C key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.D">
            <summary>
            D key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.E">
            <summary>
            E key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F">
            <summary>
            F key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.G">
            <summary>
            G key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.H">
            <summary>
            H key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.I">
            <summary>
            I key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.J">
            <summary>
            J key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.K">
            <summary>
            K key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.L">
            <summary>
            L key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.M">
            <summary>
            M key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.N">
            <summary>
            N key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.O">
            <summary>
            O key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.P">
            <summary>
            P key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Q">
            <summary>
            Q key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.R">
            <summary>
            R key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.S">
            <summary>
            S key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.T">
            <summary>
            T key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.U">
            <summary>
            U key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.V">
            <summary>
            V key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.W">
            <summary>
            W key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.X">
            <summary>
            X key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Y">
            <summary>
            Y key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Z">
            <summary>
            Z key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.LeftWindows">
            <summary>
            Left Windows key (Natural keyboard)
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.RightWindows">
            <summary>
            Right Windows key (Natural keyboard)
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Applications">
            <summary>
            Applications key (Natural keyboard)
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Sleep">
            <summary>
            Computer Sleep key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Numpad0">
            <summary>
            Numeric keypad 0 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Numpad1">
            <summary>
            Numeric keypad 1 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Numpad2">
            <summary>
            Numeric keypad 2 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Numpad3">
            <summary>
            Numeric keypad 3 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Numpad4">
            <summary>
            Numeric keypad 4 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Numpad5">
            <summary>
            Numeric keypad 5 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Numpad6">
            <summary>
            Numeric keypad 6 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Numpad7">
            <summary>
            Numeric keypad 7 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Numpad8">
            <summary>
            Numeric keypad 8 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Numpad9">
            <summary>
            Numeric keypad 9 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.NumpadMultiply">
            <summary>
            Numeric keypad Multiply key '*'
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.NumpadAdd">
            <summary>
            Numeric keypad Add key '+'
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.NumpadSeparator">
            <summary>
            Numeric Separator key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.NumpadSubtract">
            <summary>
            Numeric keypad Subtract key '-'
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.NumpadDecimal">
            <summary>
            Numeric keypad Decimal key ','
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.NumpadDivide">
            <summary>
            Numeric keypad Divide key '/'
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F1">
            <summary>
            F1 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F2">
            <summary>
            F2 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F3">
            <summary>
            F3 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F4">
            <summary>
            F4 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F5">
            <summary>
            F5 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F6">
            <summary>
            F6 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F7">
            <summary>
            F7 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F8">
            <summary>
            F8 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F9">
            <summary>
            F9 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F10">
            <summary>
            F10 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F11">
            <summary>
            F11 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F12">
            <summary>
            F12 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F13">
            <summary>
            F13 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F14">
            <summary>
            F14 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F15">
            <summary>
            F15 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F16">
            <summary>
            F16 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F17">
            <summary>
            F17 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F18">
            <summary>
            F18 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F19">
            <summary>
            F19 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F20">
            <summary>
            F20 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F21">
            <summary>
            F21 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F22">
            <summary>
            F22 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F23">
            <summary>
            F23 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.F24">
            <summary>
            F24 function key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Numlock">
            <summary>
            Numeric keypad NUM LOCK key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Scroll">
            <summary>
            SCROLL LOCK key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.LeftMenu">
            <summary>
            Left MENU key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.RightMenu">
            <summary>
            Right MENU key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.BrowserBack">
            <summary>
            Browser Back key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.BrowserForward">
            <summary>
            Browser Forward key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.BrowserRefresh">
            <summary>
            Browser Refresh key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.BrowserStop">
            <summary>
            Browser Stop key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.BrowserSearch">
            <summary>
            Browser Search key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.BrowserFavorites">
            <summary>
            Browser Favorites key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.BrowserHome">
            <summary>
            Browser Start and Home key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.VolumeMute">
            <summary>
            Volume Mute key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.VolumeDown">
            <summary>
            Volume Down key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.VolumeUp">
            <summary>
            Volume Up key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.MediaNextTrack">
            <summary>
            Next Track key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.MediaPrevTrack">
            <summary>
            Previous Track key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.MediaStop">
            <summary>
            Stop Media key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.MediaPlayPause">
            <summary>
            Play/Pause Media key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.LaunchMail">
            <summary>
            Start Mail key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.LaunchMediaSelect">
            <summary>
            Select Media key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.LaunchApp1">
            <summary>
            Start Application 1 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.LaunchApp2">
            <summary>
            Start Application 2 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Colon">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard the ';:' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Plus">
            <summary>
            For any country/region the '+' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Comma">
            <summary>
            For any country/region the ',' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Minus">
            <summary>
            For any country/region the '-' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Period">
            <summary>
            For any country/region the '.' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Slash">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard the '/?' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.BackQuote">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard the '`~' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.LeftBracket">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard the '[{' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Backslash">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard the '\|' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.RightBracket">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard the ']}' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Quote">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard the
            'single-quote/double-quote' key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Oem8">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Oem102">
            <summary>
            Either the angle bracket key or the backslash key on the RT 102-key keyboard
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Processkey">
            <summary>
            IME PROCESS key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Packet">
            <summary>
            Used to pass Unicode characters as if they were keystrokes. The PACKET key is the low word of a 32-bit Virtual Key
            value used for non-keyboard input methods.
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Attn">
            <summary>
            Attn key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Crsel">
            <summary>
            CrSel key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Exsel">
            <summary>
            ExSel key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Ereof">
            <summary>
            Erase EOF key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Play">
            <summary>
            Play key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Zoom">
            <summary>
            Zoom key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.Pa1">
            <summary>
            PA1 key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.OemClear">
            <summary>
            Clear key
            </summary>
        </member>
        <member name="F:FlaxEngine.KeyboardKeys.MAX">
            <summary>
            The count of items in the KeyboardKeys enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.Mouse">
            <summary>
            Represents a single hardware mouse device. Used by the Input to report raw mouse input events.
            </summary>
            <remarks>
            The mouse device position is in screen-space (not game client window space).
            </remarks>
        </member>
        <member name="M:FlaxEngine.Mouse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Mouse"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mouse.Position">
            <summary>
            Gets the position of the mouse in the screen-space coordinates.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mouse.PositionDelta">
            <summary>
            Gets the delta position of the mouse in the screen-space coordinates.
            </summary>
        </member>
        <member name="P:FlaxEngine.Mouse.ScrollDelta">
            <summary>
            Gets the mouse wheel change during the last frame.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mouse.GetButton(FlaxEngine.MouseButton)">
            <summary>
            Gets the mouse button state (true if being pressed during the current frame).
            </summary>
            <param name="button">Mouse button to check</param>
            <returns>True if user holds down the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Mouse.GetButtonDown(FlaxEngine.MouseButton)">
            <summary>
            Gets the mouse button down state (true if was pressed during the current frame).
            </summary>
            <param name="button">Mouse button to check</param>
            <returns>True if user starts pressing down the button, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Mouse.GetButtonUp(FlaxEngine.MouseButton)">
            <summary>
            Gets the mouse button up state (true if was released during the current frame).
            </summary>
            <param name="button">Mouse button to check</param>
            <returns>True if user releases the button, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.ActionConfig">
            <summary>
            Maps keyboard, controller, or mouse inputs to a "friendly name" that will later be bound to continuous game behavior, such as movement. The inputs mapped in AxisMappings are continuously polled, even if they are just reporting that their input value.
            </summary>
        </member>
        <member name="F:FlaxEngine.ActionConfig.Name">
            <summary>
            The action "friendly name" used to access it from code.
            </summary>
        </member>
        <member name="F:FlaxEngine.ActionConfig.Mode">
            <summary>
            The trigger mode. Allows to specify when input event should be fired.
            </summary>
        </member>
        <member name="F:FlaxEngine.ActionConfig.Key">
            <summary>
            The keyboard key to map for this action. Use <see cref="F:FlaxEngine.KeyboardKeys.None"/> to ignore it.
            </summary>
        </member>
        <member name="F:FlaxEngine.ActionConfig.MouseButton">
            <summary>
            The mouse button to map for this action. Use <see cref="F:FlaxEngine.MouseButton.None"/> to ignore it.
            </summary>
        </member>
        <member name="F:FlaxEngine.ActionConfig.GamepadButton">
            <summary>
            The gamepad button to map for this action. Use <see cref="F:FlaxEngine.GamepadButton.None"/> to ignore it.
            </summary>
        </member>
        <member name="F:FlaxEngine.ActionConfig.Gamepad">
            <summary>
            Which gamepad should be used.
            </summary>
        </member>
        <member name="T:FlaxEngine.AxisConfig">
            <summary>
            Maps keyboard, controller, or mouse inputs to a "friendly name" that will later be bound to continuous game behavior, such as movement. The inputs mapped in AxisMappings are continuously polled, even if they are just reporting that their input value.
            </summary>
        </member>
        <member name="F:FlaxEngine.AxisConfig.Name">
            <summary>
            The axis "friendly name" used to access it from code.
            </summary>
        </member>
        <member name="F:FlaxEngine.AxisConfig.Axis">
            <summary>
            The axis type (mouse, gamepad, etc.).
            </summary>
        </member>
        <member name="F:FlaxEngine.AxisConfig.Gamepad">
            <summary>
            Which gamepad should be used.
            </summary>
        </member>
        <member name="F:FlaxEngine.AxisConfig.PositiveButton">
            <summary>
            The button to be pressed for movement in positive direction. Use <see cref="F:FlaxEngine.KeyboardKeys.None"/> to ignore it.
            </summary>
        </member>
        <member name="F:FlaxEngine.AxisConfig.NegativeButton">
            <summary>
            The button to be pressed for movement in negative direction. Use <see cref="F:FlaxEngine.KeyboardKeys.None"/> to ignore it.
            </summary>
        </member>
        <member name="F:FlaxEngine.AxisConfig.DeadZone">
            <summary>
            Any positive or negative values that are less than this number will register as zero. Useful for gamepads to specify the deadzone.
            </summary>
        </member>
        <member name="F:FlaxEngine.AxisConfig.Sensitivity">
            <summary>
            For keyboard input, a larger value will result in faster response time (in units/s). A lower value will be more smooth. For Mouse delta the value will scale the actual mouse delta.
            </summary>
        </member>
        <member name="F:FlaxEngine.AxisConfig.Gravity">
            <summary>
            For keyboard input describes how fast will the input recenter. Speed (in units/s) that output value will rest to neutral value if not when device at rest.
            </summary>
        </member>
        <member name="F:FlaxEngine.AxisConfig.Scale">
            <summary>
            Additional scale parameter applied to the axis value. Allows to invert it or modify the range.
            </summary>
        </member>
        <member name="F:FlaxEngine.AxisConfig.Snap">
            <summary>
            If enabled, the axis value will be immediately reset to zero after it receives opposite inputs. For keyboard input only.
            </summary>
        </member>
        <member name="T:FlaxEngine.Actor">
            <summary>
            Base class for all actor objects on the scene.
            </summary>
        </member>
        <member name="M:FlaxEngine.Actor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Actor"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Children">
            <summary>
            List with all child actors attached to the actor (readonly). All items are valid (not null).
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Scripts">
            <summary>
            List with all scripts attached to the actor (readonly). All items are valid (not null).
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.HideFlags">
            <summary>
            The hide flags.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Layer">
            <summary>
            Gets or sets the object layer (index). Can be used for selective rendering or ignoring raycasts.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.LayerName">
            <summary>
            Gets the name of the layer.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Tag">
            <summary>
            Gets the name of the tag.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Name">
            <summary>
            Gets the actor name.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Scene">
            <summary>
            Gets the scene object which contains this actor.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.ChildrenCount">
            <summary>
            Gets amount of child actors.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.ScriptsCount">
            <summary>
            Gets amount of scripts.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.IsActive">
            <summary>
            Gets or sets value indicating if actor is active in the scene.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.IsActiveInHierarchy">
            <summary>
            Gets value indicating if actor is active in the scene graph. It must be active as well as that of all it's parents.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.StaticFlags">
            <summary>
            Gets or sets the actor static fags.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Transform">
            <summary>
            Gets or sets the actor's world transformation.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Position">
            <summary>
            Gets or sets the actor's world transform position.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Orientation">
            <summary>
            Gets or sets actor orientation in 3D space
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Scale">
            <summary>
            Gets or sets actor scale in 3D space.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Rotation">
            <summary>
            Gets or sets actor rotation matrix.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.PerInstanceRandom">
            <summary>
            Gets the random per-instance value (normalized to range 0-1).
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Direction">
            <summary>
            Gets or sets actor direction vector (forward vector).
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.LocalTransform">
            <summary>
            Gets or sets local transform of the actor in parent actor space.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.LocalPosition">
            <summary>
            Gets or sets local position of the actor in parent actor space.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.LocalOrientation">
            <summary>
            Gets or sets local rotation of the actor in parent actor space.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.LocalScale">
            <summary>
            Gets or sets local scale vector of the actor in parent actor space.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Sphere">
            <summary>
            Gets actor bounding sphere that defines 3D space intersecting with the actor (for determination of the visibility for actor).
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.Box">
            <summary>
            Gets actor bounding box that defines 3D space intersecting with the actor (for determination of the visibility for actor).
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.BoxWithChildren">
            <summary>
            Gets actor bounding box of the actor including all child actors (children included in recursive way)
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.HasContentLoaded">
            <summary>
            Returns true if actor has loaded content.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.IsPrefabRoot">
            <summary>
            Gets a value indicating whether this actor is a prefab instance root object.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.PhysicsScene">
            <summary>
            Set the physics world the controller is part of.
            </summary>
        </member>
        <member name="M:FlaxEngine.Actor.HasTag">
            <summary>
            Determines whether this actor has tag assigned.
            </summary>
        </member>
        <member name="M:FlaxEngine.Actor.HasTag(System.String)">
            <summary>
            Determines whether this actor has given tag assigned.
            </summary>
            <param name="tag">The tag to check.</param>
        </member>
        <member name="M:FlaxEngine.Actor.SetParent(FlaxEngine.Actor,System.Boolean,System.Boolean)">
            <summary>
            Sets a actor parent.
            </summary>
            <param name="value">New parent</param>
            <param name="worldPositionsStays">Should actor world positions remain the same after parent change?</param>
            <param name="canBreakPrefabLink">True if can break prefab link on changing the parent.</param>
        </member>
        <member name="M:FlaxEngine.Actor.GetChild(System.Int32)">
            <summary>
            Gets the child actor at the given index.
            </summary>
            <param name="index">The child actor index.</param>
            <returns>The child actor (always valid).</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetChild(System.String)">
            <summary>
            Gets the child actor with the given name.
            </summary>
            <param name="name">The child actor name.</param>
            <returns>The child actor or null.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetChild(System.Type)">
            <summary>
            Gets the child actor of the given type.
            </summary>
            <param name="type">Type of the actor to search for. Includes any actors derived from the type.</param>
            <returns>The child actor or null.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetChildren(System.Type)">
            <summary>
            Gets the child actors of the given type.
            </summary>
            <param name="type">Type of the actor to search for. Includes any actors derived from the type.</param>
            <returns>The child actors.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetScript(System.Int32)">
            <summary>
            Gets the script at the given index.
            </summary>
            <param name="index">The script index.</param>
            <returns>The script (always valid).</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetScript(System.Type)">
            <summary>
            Gets the script of the given type from this actor.
            </summary>
            <param name="type">Type of the script to search for. Includes any scripts derived from the type.</param>
            <returns>The script or null.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetScripts(System.Type)">
            <summary>
            Gets the scripts of the given type from this actor.
            </summary>
            <param name="type">Type of the script to search for. Includes any scripts derived from the type.</param>
            <returns>The scripts.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.AddMovement(FlaxEngine.Vector3)">
            <summary>
            Moves the actor (also can rotate it) in world space.
            </summary>
            <param name="translation">The translation vector.</param>
        </member>
        <member name="M:FlaxEngine.Actor.AddMovement(FlaxEngine.Vector3,FlaxEngine.Quaternion)">
            <summary>
            Moves the actor (also can rotate it) in world space.
            </summary>
            <param name="translation">The translation vector.</param>
            <param name="rotation">The rotation quaternion.</param>
        </member>
        <member name="M:FlaxEngine.Actor.GetWorldToLocalMatrix(FlaxEngine.Matrix@)">
            <summary>
            Gets the matrix that transforms a point from the world space to local space of the actor.
            </summary>
            <param name="worldToLocal">The world to local matrix.</param>
        </member>
        <member name="M:FlaxEngine.Actor.GetLocalToWorldMatrix(FlaxEngine.Matrix@)">
            <summary>
            Gets the matrix that transforms a point from the local space of the actor to world space.
            </summary>
            <param name="localToWorld">The world to local matrix.</param>
        </member>
        <member name="M:FlaxEngine.Actor.FindActor(System.String)">
            <summary>
            Tries to find the actor with the given name in this actor hierarchy (checks this actor and all children hierarchy).
            </summary>
            <param name="name">The name of the actor.</param>
            <returns>Actor instance if found, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.FindActor(System.Type)">
            <summary>
            Tries to find the actor of the given type in this actor hierarchy (checks this actor and all children hierarchy).
            </summary>
            <param name="type">Type of the actor to search for. Includes any actors derived from the type.</param>
            <returns>Actor instance if found, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.FindScript(System.Type)">
            <summary>
            Tries to find the script of the given type in this actor hierarchy (checks this actor and all children hierarchy).
            </summary>
            <param name="type">Type of the actor to search for. Includes any actors derived from the type.</param>
            <returns>Script instance if found, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.HasActorInHierarchy(FlaxEngine.Actor)">
            <summary>
            Try to find actor in hierarchy structure.
            </summary>
            <param name="a">The actor to find.</param>
            <returns>Found actor or null.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.HasActorInChildren(FlaxEngine.Actor)">
            <summary>
            Try to find actor in child actors structure.
            </summary>
            <param name="a">The actor to find.</param>
            <returns>Found actor or null.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.IntersectsItself(FlaxEngine.Ray,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a Ray.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection (if any valid).</param>
            <param name="normal">When the method completes, contains the intersection surface normal vector (if any valid).</param>
            <returns>True whether the two objects intersected, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.Intersects(FlaxEngine.Ray,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object or any it's child and a ray.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection (if any valid).</param>
            <param name="normal">When the method completes, contains the intersection surface normal vector (if any valid).</param>
            <returns>The target hit actor that is the closest to the ray.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.LookAt(FlaxEngine.Vector3)">
            <summary>
            Rotates actor to orient it towards the specified world position.
            </summary>
            <param name="worldPos">The world position to orient towards.</param>
        </member>
        <member name="M:FlaxEngine.Actor.LookAt(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Rotates actor to orient it towards the specified world position with upwards direction.
            </summary>
            <param name="worldPos">The world position to orient towards.</param>
            <param name="worldUp">The up direction that Constrains y axis orientation to a plane this vector lies on. This rule might be broken if forward and up direction are nearly parallel.</param>
        </member>
        <member name="M:FlaxEngine.Actor.LookingAt(FlaxEngine.Vector3)">
            <summary>
            Gets rotation of the actor oriented towards the specified world position.
            </summary>
            <param name="worldPos">The world position to orient towards.</param>
        </member>
        <member name="M:FlaxEngine.Actor.LookingAt(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Gets rotation of the actor oriented towards the specified world position with upwards direction.
            </summary>
            <param name="worldPos">The world position to orient towards.</param>
            <param name="worldUp">The up direction that Constrains y axis orientation to a plane this vector lies on. This rule might be broken if forward and up direction are nearly parallel.</param>
        </member>
        <member name="M:FlaxEngine.Actor.ToBytes(FlaxEngine.Actor[])">
            <summary>
            Performs actors serialization to the raw bytes.
            </summary>
            <param name="actors">The actors to serialize.</param>
            <returns>The output data, empty if failed.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.FromBytes(System.Byte[])">
            <summary>
            Performs actors deserialization from the raw bytes.
            </summary>
            <param name="data">The input data.</param>
            <returns>The output actors.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.FromBytes(System.Byte[],System.Collections.Generic.Dictionary{System.Guid,System.Guid})">
            <summary>
            Performs actors deserialization from the raw bytes.
            </summary>
            <param name="data">The input data.</param>
            <param name="idsMapping">The serialized objects Ids mapping. Can be used to convert the spawned objects ids and references to them.</param>
            <returns>The output actors.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.TryGetSerializedObjectsIds(System.Byte[])">
            <summary>
            Tries the get serialized objects ids from the raw bytes.
            </summary>
            <param name="data">The data.</param>
            <returns>The output array of serialized object ids.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.ToJson">
            <summary>
            Serializes the actor object to the Json string. Serialized are only this actor properties but no child actors nor scripts. Serializes references to the other objects in a proper way using IDs.
            </summary>
            <returns>The Json container with serialized actor data.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.FromJson(System.String)">
            <summary>
            Deserializes the actor object to the Json string. Deserialized are only this actor properties but no child actors nor scripts.
            </summary>
            <param name="json">The serialized actor data (state).</param>
        </member>
        <member name="M:FlaxEngine.Actor.OnBeginPlay">
            <summary>
            Called when adding object to the game.
            </summary>
        </member>
        <member name="M:FlaxEngine.Actor.OnEndPlay">
            <summary>
            Called when removing object from the game.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.IsStatic">
            <summary>
            Returns true if object is fully static on the scene, otherwise false.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.IsTransformStatic">
            <summary>
            Returns true if object has static transform.
            </summary>
        </member>
        <member name="M:FlaxEngine.Actor.AddStaticFlags(FlaxEngine.StaticFlags)">
            <summary>
            Adds the actor static flags.
            </summary>
            <param name="flags">The flags to add.</param>
        </member>
        <member name="M:FlaxEngine.Actor.RemoveStaticFlags(FlaxEngine.StaticFlags)">
            <summary>
            Removes the actor static flags.
            </summary>
            <param name="flags">The flags to remove.</param>
        </member>
        <member name="M:FlaxEngine.Actor.SetStaticFlag(FlaxEngine.StaticFlags,System.Boolean)">
            <summary>
            Sets a single static flag to the desire value.
            </summary>
            <param name="flag">The flag to change.</param>
            <param name="value">The target value of the flag.</param>
        </member>
        <member name="M:FlaxEngine.Actor.HasStaticFlag(FlaxEngine.StaticFlags)">
            <summary>
            Returns true if object has given flag(s) set.
            </summary>
            <param name="flag">The flag(s) to check.</param>
            <returns>True if has flag(s) set, otherwise false.</returns>
        </member>
        <member name="P:FlaxEngine.Actor.EulerAngles">
            <summary>
            The rotation as Euler angles in degrees.
            </summary>
            <remarks>
            The x, y, and z angles represent a rotation z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).
            Angles order (xyz): pitch, yaw and roll.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Actor.LocalEulerAngles">
            <summary>
            The local rotation as Euler angles in degrees.
            </summary>
            <remarks>
            The x, y, and z angles represent a rotation z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).
            Angles order (xyz): pitch, yaw and roll.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Actor.HasChildren">
            <summary>
            Returns true if actor has any children
            </summary>
        </member>
        <member name="M:FlaxEngine.Actor.ResetLocalTransform">
            <summary>
            Resets actor local transform.
            </summary>
        </member>
        <member name="M:FlaxEngine.Actor.AddChild(System.Type)">
            <summary>
            Creates a new child actor of the given type.
            </summary>
            <param name="type">Type of the actor.</param>
            <returns>The child actor.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.AddChild``1">
            <summary>
            Creates a new child actor of the given type.
            </summary>
            <typeparam name="T">Type of the actor to search for. Includes any actors derived from the type.</typeparam>
            <returns>The child actor.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetChild``1">
            <summary>
            Finds the child actor of the given type.
            </summary>
            <typeparam name="T">Type of the actor to search for. Includes any actors derived from the type.</typeparam>
            <returns>The child actor or null if failed to find.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.TryGetChild``1(``0@)">
            <summary>
            Tries to the child actor of the given type.
            </summary>
            <typeparam name="T">Type of the actor to search for. Includes any actors derived from the type.</typeparam>
            <param name="actor">The returned actor, valid only if method returns true.</param>
            <returns>True if found an child actor of that type or false if failed to find.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetOrAddChild``1">
            <summary>
            Finds the child actor of the given type or creates a new one.
            </summary>
            <typeparam name="T">Type of the actor to search for. Includes any actors derived from the type.</typeparam>
            <returns>The child actor.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.AddScript(System.Type)">
            <summary>
            Creates a new script of a specific type and adds it to the actor.
            </summary>
            <param name="type">Type of the script to create.</param>
            <returns>The created script instance, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.AddScript``1">
            <summary>
            Creates a new script of a specific type and adds it to the actor.
            </summary>
            <typeparam name="T">Type of the script to search for. Includes any scripts derived from the type.</typeparam>
            <returns>The created script instance, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetScript``1">
            <summary>
            Finds the script of the given type from this actor.
            </summary>
            <typeparam name="T">Type of the script to search for. Includes any scripts derived from the type.</typeparam>
            <returns>The script or null if failed to find.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.TryGetScript``1(``0@)">
            <summary>
            Tries to find the script of the given type from this actor.
            </summary>
            <typeparam name="T">Type of the script to search for. Includes any scripts derived from the type.</typeparam>
            <param name="script">The returned script, valid only if method returns true.</param>
            <returns>True if found a script of that type or false if failed to find.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.FindScript``1">
            <summary>
            Tries to find the script of the given type in this actor hierarchy (checks this actor and all children hierarchy).
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <returns>Script instance if found, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.FindActor``1">
            <summary>
            Tries to find the actor of the given type in this actor hierarchy (checks this actor and all children hierarchy).
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <returns>Actor instance if found, null otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetChildren``1">
            <summary>
            Searches for all actors of a specific type in this actor children list.
            </summary>
            <typeparam name="T">Type of the actor to search for. Includes any actors derived from the type.</typeparam>
            <returns>All actors matching the specified type</returns>
        </member>
        <member name="M:FlaxEngine.Actor.GetScripts``1">
            <summary>
            Searches for all scripts of a specific type from this actor.
            </summary>
            <typeparam name="T">Type of the scripts to search for. Includes any scripts derived from the type.</typeparam>
            <returns>All scripts matching the specified type.</returns>
        </member>
        <member name="M:FlaxEngine.Actor.DestroyChildren(System.Single)">
            <summary>
            Destroys the children. Calls Object.Destroy on every child actor and unlink them for the parent.
            </summary>
            <param name="timeLeft">The time left to destroy object (in seconds).</param>
        </member>
        <member name="P:FlaxEngine.Actor.WorldToLocalMatrix">
            <summary>
            Gets the matrix that transforms a point from the world space to local space of the actor.
            </summary>
        </member>
        <member name="P:FlaxEngine.Actor.LocalToWorldMatrix">
            <summary>
            Gets the matrix that transforms a point from the local space of the actor to world space.
            </summary>
        </member>
        <member name="M:FlaxEngine.Actor.RotateAround(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single)">
            <summary>
            Rotates the actor around axis passing through point in world-space by angle (in degrees).
            </summary>
            <remarks>Modifies both the position and the rotation of the actor (scale remains the same).</remarks>
            <param name="point">The point (world-space).</param>
            <param name="axis">The axis (normalized).</param>
            <param name="angle">The angle (in degrees).</param>
        </member>
        <member name="M:FlaxEngine.Actor.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.AnimatedModel">
            <summary>
            Performs an animation and renders a skinned model.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AnimatedModel"/>.
            </summary>
        </member>
        <member name="E:FlaxEngine.AnimatedModel.AnimationUpdated">
            <summary>
            Called after animation gets updated (new skeleton pose).
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.SkinnedModel">
            <summary>
            The skinned model asset used for rendering.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.AnimationGraph">
            <summary>
            The animation graph asset used for the skinned mesh skeleton bones evaluation (controls the animation).
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.PerBoneMotionBlur">
            <summary>
            If true, use per-bone motion blur on this skeletal model. It requires additional rendering, can be disabled to save performance.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.UseTimeScale">
            <summary>
            If true, animation speed will be affected by the global time scale parameter.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.UpdateWhenOffscreen">
            <summary>
            If true, the animation will be updated even when an actor cannot be seen by any camera. Otherwise, the animations themselves will also stop running when the actor is off-screen.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.UpdateSpeed">
            <summary>
            The animation update delta time scale. Can be used to speed up animation playback or create slow motion effect.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.UpdateMode">
            <summary>
            The animation update mode. Can be used to optimize the performance.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.BoundsScale">
            <summary>
            The master scale parameter for the actor bounding box. Helps reducing mesh flickering effect on screen edges.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.CustomBounds">
            <summary>
            The custom bounds(in actor local space). If set to empty bounds then source skinned model bind pose bounds will be used.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.LODBias">
            <summary>
            The model Level Of Detail bias value. Allows to increase or decrease rendered model quality.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.ForcedLOD">
            <summary>
            Gets the model forced Level Of Detail index. Allows to bind the given model LOD to show. Value -1 disables this feature.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.DrawModes">
            <summary>
            The draw passes to use for rendering this object.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.ShadowsMode">
            <summary>
            The shadows casting mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.RootMotionTarget">
            <summary>
            The animation root motion apply target. If not specified the animated model will apply it itself.
            </summary>
        </member>
        <member name="P:FlaxEngine.AnimatedModel.Parameters">
            <summary>
            Gets the anim graph instance parameters collection.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.ResetAnimation">
            <summary>
            Resets the animation state (clears the instance state data but preserves the instance parameters values).
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.UpdateAnimation">
            <summary>
            Performs the full animation update. The actual update will be performed during gameplay tick.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.SetupSkinningData">
            <summary>
            Validates and creates a proper skinning data.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.PreInitSkinningData">
            <summary>
            Creates and setups the skinning data (writes the identity bones transformations).
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.GetCurrentPose(FlaxEngine.Matrix[]@,System.Boolean)">
            <summary>
            Gets the per-node final transformations (skeleton pose).
            </summary>
            <param name="nodesTransformation">The output per-node final transformation matrices.</param>
            <param name="worldSpace">True if convert matrices into world-space, otherwise returned values will be in local-space of the actor.</param>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.SetCurrentPose(FlaxEngine.Matrix[],System.Boolean)">
            <summary>
            Sets the per-node final transformations (skeleton pose).
            </summary>
            <param name="nodesTransformation">The per-node final transformation matrices.</param>
            <param name="worldSpace">True if convert matrices from world-space, otherwise values are in local-space of the actor.</param>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.GetNodeTransformation(System.Int32,FlaxEngine.Matrix@,System.Boolean)">
            <summary>
            Gets the node final transformation.
            </summary>
            <param name="nodeIndex">The index of the skinned model skeleton node.</param>
            <param name="nodeTransformation">The output final node transformation matrix.</param>
            <param name="worldSpace">True if convert matrices into world-space, otherwise returned values will be in local-space of the actor.</param>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.GetNodeTransformation(System.String,FlaxEngine.Matrix@,System.Boolean)">
            <summary>
            Gets the node final transformation.
            </summary>
            <param name="nodeName">The name of the skinned model skeleton node.</param>
            <param name="nodeTransformation">The output final node transformation matrix.</param>
            <param name="worldSpace">True if convert matrices into world-space, otherwise returned values will be in local-space of the actor.</param>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.FindClosestNode(FlaxEngine.Vector3,System.Boolean)">
            <summary>
            Finds the closest node to a given location.
            </summary>
            <param name="location">The text location (in local-space of the actor or world-space depending on <paramref name="worldSpace"/>).</param>
            <param name="worldSpace">True if convert input location is in world-space, otherwise it's in local-space of the actor.</param>
            <returns>The zero-based index of the found node. Returns -1 if skeleton is missing.</returns>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.SetMasterPoseModel(FlaxEngine.AnimatedModel)">
            <summary>
            Sets the master pose model that will be used to copy the skeleton nodes animation. Useful for modular characters.
            </summary>
            <param name="masterPose">The master pose actor to use.</param>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.GetParameter(System.String)">
            <summary>
            Gets the anim graph instance parameter by name.
            </summary>
            <param name="name">The parameter name.</param>
            <returns>The parameters.</returns>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.GetParameterValue(System.String)">
            <summary>
            Gets the anim graph instance parameter value.
            </summary>
            <param name="name">The parameter name.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.SetParameterValue(System.String,System.Object)">
            <summary>
            Sets the anim graph instance parameter value.
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.GetParameterValue(System.Guid)">
            <summary>
            Gets the anim graph instance parameter value.
            </summary>
            <param name="id">The parameter id.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.SetParameterValue(System.Guid,System.Object)">
            <summary>
            Sets the anim graph instance parameter value.
            </summary>
            <param name="id">The parameter id.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.GetBlendShapeWeight(System.String)">
            <summary>
            Gets the weight of the blend shape.
            </summary>
            <param name="name">The blend shape name.</param>
            <returns>The normalized weight of the blend shape (in range -1:1).</returns>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.SetBlendShapeWeight(System.String,System.Single)">
            <summary>
            Sets the weight of the blend shape.
            </summary>
            <param name="name">The blend shape name.</param>
            <param name="value">The normalized weight of the blend shape (in range -1:1).</param>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.ClearBlendShapeWeights">
            <summary>
            Clears the weights of the blend shapes (disabled any used blend shapes).
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.PlaySlotAnimation(System.String,FlaxEngine.Animation,System.Single,System.Single,System.Single)">
            <summary>
            Plays the animation on the slot in Anim Graph.
            </summary>
            <param name="slotName">The name of the slot.</param>
            <param name="anim">The animation to play.</param>
            <param name="speed">The playback speed.</param>
            <param name="blendInTime">The animation blending in time (in seconds). Cam be used to smooth the slot animation playback with the input pose when starting the animation.</param>
            <param name="blendOutTime">The animation blending out time (in seconds). Cam be used to smooth the slot animation playback with the input pose when ending animation.</param>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.StopSlotAnimation">
            <summary>
            Stops all the animations playback on the all slots in Anim Graph.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.StopSlotAnimation(System.String,FlaxEngine.Animation)">
            <summary>
            Stops the animation playback on the slot in Anim Graph.
            </summary>
            <param name="slotName">The name of the slot.</param>
            <param name="anim">The animation to stop.</param>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.PauseSlotAnimation">
            <summary>
            Pauses all the animations playback on the all slots in Anim Graph.
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.PauseSlotAnimation(System.String,FlaxEngine.Animation)">
            <summary>
            Pauses the animation playback on the slot in Anim Graph.
            </summary>
            <param name="slotName">The name of the slot.</param>
            <param name="anim">The animation to pause.</param>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.IsPlayingSlotAnimation">
            <summary>
            Checks if the any animation playback is active on the any slot in Anim Graph (not paused).
            </summary>
        </member>
        <member name="M:FlaxEngine.AnimatedModel.IsPlayingSlotAnimation(System.String,FlaxEngine.Animation)">
            <summary>
            Checks if the animation playback is active on the slot in Anim Graph (not paused).
            </summary>
            <param name="slotName">The name of the slot.</param>
            <param name="anim">The animation to check.</param>
        </member>
        <member name="T:FlaxEngine.AnimatedModel.AnimationUpdateMode">
            <summary>
            Describes the animation graph updates frequency for the animated model.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimatedModel.AnimationUpdateMode.Auto">
            <summary>
            The automatic updates will be used (based on platform capabilities, distance to the player, etc.).
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimatedModel.AnimationUpdateMode.EveryUpdate">
            <summary>
            Animation will be updated every game update.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimatedModel.AnimationUpdateMode.EverySecondUpdate">
            <summary>
            Animation will be updated every second game update.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimatedModel.AnimationUpdateMode.EveryFourthUpdate">
            <summary>
            Animation will be updated every fourth game update.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimatedModel.AnimationUpdateMode.Manual">
            <summary>
            Animation can be updated manually by the user scripts.
            </summary>
        </member>
        <member name="F:FlaxEngine.AnimatedModel.AnimationUpdateMode.Never">
            <summary>
            Animation won't be updated at all.
            </summary>
        </member>
        <member name="T:FlaxEngine.BoneSocket">
            <summary>
            Actor that links to the animated model skeleton node transformation.
            </summary>
        </member>
        <member name="M:FlaxEngine.BoneSocket.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.BoneSocket"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoneSocket.Node">
            <summary>
            Gets the target node name to link to it.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoneSocket.UseScale">
            <summary>
            Gets or sets the value indicating whenever use the target node scale. Otherwise won't override the actor scale.
            </summary>
        </member>
        <member name="M:FlaxEngine.BoneSocket.UpdateTransformation">
            <summary>
            Updates the actor transformation based on a skeleton node.
            </summary>
        </member>
        <member name="T:FlaxEngine.BrushSurface">
            <summary>
            Represents a part of the CSG brush actor. Contains information about single surface.
            </summary>
        </member>
        <member name="F:FlaxEngine.BrushSurface.Brush">
            <summary>
            The parent brush.
            </summary>
        </member>
        <member name="F:FlaxEngine.BrushSurface.Index">
            <summary>
            The surface index in the parent brush surfaces list.
            </summary>
        </member>
        <member name="F:FlaxEngine.BrushSurface.Material">
            <summary>
            The material used to render the brush surface.
            </summary>
        </member>
        <member name="F:FlaxEngine.BrushSurface.TexCoordScale">
            <summary>
            The surface texture coordinates scale.
            </summary>
        </member>
        <member name="F:FlaxEngine.BrushSurface.TexCoordOffset">
            <summary>
            The surface texture coordinates offset.
            </summary>
        </member>
        <member name="F:FlaxEngine.BrushSurface.TexCoordRotation">
            <summary>
            The surface texture coordinates rotation angle (in degrees).
            </summary>
        </member>
        <member name="F:FlaxEngine.BrushSurface.ScaleInLightmap">
            <summary>
            The scale in lightmap (per surface).
            </summary>
        </member>
        <member name="T:FlaxEngine.BoxBrush">
            <summary>
            Performs CSG box brush operation that adds or removes geometry.
            </summary>
        </member>
        <member name="M:FlaxEngine.BoxBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.BoxBrush"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoxBrush.ScaleInLightmap">
            <summary>
            Brush surfaces scale in lightmap
            </summary>
        </member>
        <member name="P:FlaxEngine.BoxBrush.Surfaces">
            <summary>
            Gets or sets the brush proxies per surface.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoxBrush.Mode">
            <summary>
            Gets or sets the CSG brush mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoxBrush.Center">
            <summary>
            Gets or sets the brush center (in local space).
            </summary>
        </member>
        <member name="P:FlaxEngine.BoxBrush.Size">
            <summary>
            Gets or sets the brush size.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoxBrush.OrientedBox">
            <summary>
            Gets the volume bounding box (oriented).
            </summary>
        </member>
        <member name="M:FlaxEngine.BoxBrush.SetMaterial(System.Int32,FlaxEngine.MaterialBase)">
            <summary>
            Sets the brush surface material.
            </summary>
            <param name="surfaceIndex">The brush surface index.</param>
            <param name="material">The material.</param>
        </member>
        <member name="M:FlaxEngine.BoxBrush.Intersects(System.Int32,FlaxEngine.Ray@,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the brush surface and a ray.
            If collision data is available on the CPU performs exact intersection check with the geometry.
            Otherwise performs simple <see cref="T:FlaxEngine.BoundingBox"/> vs <see cref="T:FlaxEngine.Ray"/> test.
            For more efficient collisions detection and ray casting use physics.
            </summary>
            <param name="surfaceIndex">The brush surface index.</param>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes and returns true, contains the distance of the intersection (if any valid).</param>
            <param name="normal">When the method completes, contains the intersection surface normal vector (if any valid).</param>
            <returns>True if the actor is intersected by the ray, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.BoxBrush.GetVertices(System.Int32,FlaxEngine.Vector3[]@)">
            <summary>
            Gets the brush surface triangles array (group by 3 vertices).
            </summary>
            <param name="surfaceIndex">The brush surface index.</param>
            <param name="outputData">The output vertices buffer with triangles or empty if no data loaded.</param>
        </member>
        <member name="T:FlaxEngine.BoxVolume">
            <summary>
            A base class for actors that define 3D bounding box volume.
            </summary>
        </member>
        <member name="M:FlaxEngine.BoxVolume.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.BoxVolume"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoxVolume.Size">
            <summary>
            Gets or sets the size of the volume (in local space).
            </summary>
        </member>
        <member name="P:FlaxEngine.BoxVolume.OrientedBox">
            <summary>
            Gets the volume bounding box (oriented in world space).
            </summary>
        </member>
        <member name="T:FlaxEngine.BrushMode">
            <summary>
            CSG brush mode
            </summary>
        </member>
        <member name="F:FlaxEngine.BrushMode.Additive">
            <summary>
            Brush adds
            </summary>
        </member>
        <member name="F:FlaxEngine.BrushMode.Subtractive">
            <summary>
            Brush subtracts
            </summary>
        </member>
        <member name="T:FlaxEngine.Camera">
            <summary>
            Describes the camera projection and view. Provides information about how to render scene (viewport location and direction, etc.).
            </summary>
        </member>
        <member name="M:FlaxEngine.Camera.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Camera"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.OverrideMainCamera">
            <summary>
            The overriden main camera.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.RenderLayersMask">
            <summary>
            The layers mask used for rendering using this camera. Can be used to include or exclude specific actor layers from the drawing.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.MainCamera">
            <summary>
            Gets the main camera.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.View">
            <summary>
            Gets the view matrix.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.Projection">
            <summary>
            Gets the projection matrix.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.Frustum">
            <summary>
            Gets the frustum.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.UsePerspective">
            <summary>
            Gets or sets the value indicating if camera should use perspective rendering mode, otherwise it will use orthographic projection.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.FieldOfView">
            <summary>
            Gets or sets the camera's field of view (in degrees).
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.CustomAspectRatio">
            <summary>
            Gets or sets the custom aspect ratio. 0 if not use custom value.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.NearPlane">
            <summary>
            Gets or sets camera's near plane distance.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.FarPlane">
            <summary>
            Gets or sets camera's far plane distance.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.OrthographicScale">
            <summary>
            Gets or sets the orthographic projection scale.
            </summary>
        </member>
        <member name="P:FlaxEngine.Camera.Viewport">
            <summary>
            Gets the camera viewport.
            </summary>
        </member>
        <member name="M:FlaxEngine.Camera.ProjectPoint(FlaxEngine.Vector3,FlaxEngine.Vector2@)">
            <summary>
            Projects the point from 3D world-space to game window coordinates (in screen pixels for default viewport calculated from <see cref="P:FlaxEngine.Camera.Viewport"/>).
            </summary>
            <param name="worldSpaceLocation">The input world-space location (XYZ in world).</param>
            <param name="gameWindowSpaceLocation">The output game window coordinates (XY in screen pixels).</param>
        </member>
        <member name="M:FlaxEngine.Camera.ProjectPoint(FlaxEngine.Vector3,FlaxEngine.Vector2@,FlaxEngine.Viewport@)">
            <summary>
            Projects the point from 3D world-space to the camera viewport-space (in screen pixels for given viewport).
            </summary>
            <param name="worldSpaceLocation">The input world-space location (XYZ in world).</param>
            <param name="cameraViewportSpaceLocation">The output camera viewport-space location (XY in screen pixels).</param>
            <param name="viewport">The viewport.</param>
        </member>
        <member name="M:FlaxEngine.Camera.ConvertMouseToRay(FlaxEngine.Vector2)">
            <summary>
            Converts the mouse position to 3D ray.
            </summary>
            <param name="mousePosition">The mouse position.</param>
            <returns>Mouse ray</returns>
        </member>
        <member name="M:FlaxEngine.Camera.ConvertMouseToRay(FlaxEngine.Vector2,FlaxEngine.Viewport@)">
            <summary>
            Converts the mouse position to 3D ray.
            </summary>
            <param name="mousePosition">The mouse position.</param>
            <param name="viewport">The viewport.</param>
            <returns>Mouse ray</returns>
        </member>
        <member name="M:FlaxEngine.Camera.GetMatrices(FlaxEngine.Matrix@,FlaxEngine.Matrix@)">
            <summary>
            Calculates the view and the projection matrices for the camera.
            </summary>
            <param name="view">The result camera view matrix.</param>
            <param name="projection">The result camera projection matrix.</param>
        </member>
        <member name="M:FlaxEngine.Camera.GetMatrices(FlaxEngine.Matrix@,FlaxEngine.Matrix@,FlaxEngine.Viewport@)">
            <summary>
            Calculates the view and the projection matrices for the camera. Support using custom viewport.
            </summary>
            <param name="view">The result camera view matrix.</param>
            <param name="projection">The result camera projection matrix.</param>
            <param name="viewport">The custom output viewport. Use null to skip it.</param>
        </member>
        <member name="T:FlaxEngine.Decal">
            <summary>
            Actor that draws the can be used to draw a custom decals on top of the other objects.
            </summary>
        </member>
        <member name="M:FlaxEngine.Decal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Decal"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Decal.Material">
            <summary>
            The decal material. Must have domain mode to Decal type.
            </summary>
        </member>
        <member name="P:FlaxEngine.Decal.SortOrder">
            <summary>
            The decal rendering order. The higher values are render later (on top).
            </summary>
        </member>
        <member name="P:FlaxEngine.Decal.DrawMinScreenSize">
            <summary>
            The minimum screen size for the decal drawing. If the decal size on the screen is smaller than this value then decal will be culled. Set it to higher value to make culling more aggressive.
            </summary>
        </member>
        <member name="P:FlaxEngine.Decal.Size">
            <summary>
            Gets or sets the decal bounds size (in local space).
            </summary>
        </member>
        <member name="M:FlaxEngine.Decal.CreateAndSetVirtualMaterialInstance">
            <summary>
            Utility to crate a new virtual Material Instance asset, set its parent to the currently applied material, and assign it to the decal. Can be used to modify the decal material parameters from code.
            </summary>
            <returns>The created virtual material instance.</returns>
        </member>
        <member name="T:FlaxEngine.DirectionalLight">
            <summary>
            Directional light emits light from direction in space.
            </summary>
        </member>
        <member name="M:FlaxEngine.DirectionalLight.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.DirectionalLight"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.DirectionalLight.CascadeCount">
            <summary>
            The number of cascades used for slicing the range of depth covered by the light. Values are 1, 2 or 4 cascades; a typical scene uses 4 cascades.
            </summary>
        </member>
        <member name="T:FlaxEngine.EmptyActor">
            <summary>
            The empty actor that is useful to create hierarchy and/or hold scripts. See <see cref="T:FlaxEngine.Script"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.EmptyActor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.EmptyActor"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.EnvironmentProbe">
            <summary>
            Environment Probe can capture space around the objects to provide reflections.
            </summary>
        </member>
        <member name="M:FlaxEngine.EnvironmentProbe.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.EnvironmentProbe"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.Brightness">
            <summary>
            The reflections brightness.
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.AutoUpdate">
            <summary>
            Value indicating if probe should be updated automatically on change.
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.CaptureNearPlane">
            <summary>
            The probe capture camera near plane distance.
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.Radius">
            <summary>
            Gets or sets the probe radius.
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.ScaledRadius">
            <summary>
            Gets probe scaled radius.
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.HasProbe">
            <summary>
            Returns true if env probe has cube texture assigned.
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.HasProbeLoaded">
            <summary>
            Returns true if env probe has cube texture assigned.
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.Probe">
            <summary>
            Gets the probe texture used during rendering (baked or custom one).
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.IsUsingCustomProbe">
            <summary>
            True if probe is using custom cube texture (not baked).
            </summary>
        </member>
        <member name="P:FlaxEngine.EnvironmentProbe.CustomProbe">
            <summary>
            Gets or sets the custom probe (null if using baked one or none).
            </summary>
        </member>
        <member name="M:FlaxEngine.EnvironmentProbe.Bake(System.Single)">
            <summary>
            Bakes that probe. It won't be performed now but on async graphics rendering task.
            </summary>
            <param name="timeout">The timeout in seconds left to bake it (aka startup time).</param>
        </member>
        <member name="T:FlaxEngine.ExponentialHeightFog">
            <summary>
            Used to create fogging effects such as clouds but with a density that is related to the height of the fog.
            </summary>
        </member>
        <member name="M:FlaxEngine.ExponentialHeightFog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.ExponentialHeightFog"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.FogDensity">
            <summary>
            The fog density factor.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.FogHeightFalloff">
            <summary>
            The fog height density factor that controls how the density increases as height decreases. The smaller values produce more visible transition larger.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.FogInscatteringColor">
            <summary>
            Color of the fog.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.FogMaxOpacity">
            <summary>
            Maximum opacity of the fog.
            A value of 1 means the fog can become fully opaque at a distance and replace scene color completely.
            A value of 0 means the fog color will not be factored in at all.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.StartDistance">
            <summary>
            Distance from the camera that the fog will start, in world units.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.FogCutoffDistance">
            <summary>
            Scene elements past this distance will not have fog applied. This is useful for excluding skyboxes which already have fog baked in.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.DirectionalInscatteringLight">
            <summary>
            Directional light used for Directional Inscattering.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.DirectionalInscatteringExponent">
            <summary>
            Controls the size of the directional inscattering cone, which is used to approximate inscattering from a directional light.
            Note: there must be a directional light enabled for DirectionalInscattering to be used. Range: 2-64.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.DirectionalInscatteringStartDistance">
            <summary>
            Controls the start distance from the viewer of the directional inscattering, which is used to approximate inscattering from a directional light.
            Note: there must be a directional light enabled for DirectionalInscattering to be used.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.DirectionalInscatteringColor">
            <summary>
            Controls the color of the directional inscattering, which is used to approximate inscattering from a directional light.
            Note: there must be a directional light enabled for DirectionalInscattering to be used.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.VolumetricFogEnable">
            <summary>
            Whether to enable Volumetric fog. Graphics quality settings control the resolution of the fog simulation.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.VolumetricFogScatteringDistribution">
            <summary>
            Controls the scattering phase function - how much incoming light scatters in various directions.
            A distribution value of 0 scatters equally in all directions, while 0.9 scatters predominantly in the light direction.
            In order to have visible volumetric fog light shafts from the side, the distribution will need to be closer to 0. Range: -0.9-0.9.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.VolumetricFogAlbedo">
            <summary>
            The height fog particle reflectiveness used by volumetric fog.
            Water particles in air have an albedo near white, while dust has slightly darker value.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.VolumetricFogEmissive">
            <summary>
            Light emitted by height fog. This is a density so more light is emitted the further you are looking through the fog.
            In most cases using a Skylight is a better choice, however, it may be useful in certain scenarios.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.VolumetricFogExtinctionScale">
            <summary>
            Scales the height fog particle extinction amount used by volumetric fog.
            Values larger than 1 cause fog particles everywhere absorb more light. Range: 0.1-10.
            </summary>
        </member>
        <member name="P:FlaxEngine.ExponentialHeightFog.VolumetricFogDistance">
            <summary>
            Distance over which volumetric fog should be computed. Larger values extend the effect into the distance but expose under-sampling artifacts in details.
            </summary>
        </member>
        <member name="T:FlaxEngine.Light">
            <summary>
            Base class for all light types.
            </summary>
        </member>
        <member name="M:FlaxEngine.Light.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Light"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Light.Color">
            <summary>
            Color of the light
            </summary>
        </member>
        <member name="P:FlaxEngine.Light.Brightness">
            <summary>
            Brightness of the light
            </summary>
        </member>
        <member name="P:FlaxEngine.Light.ViewDistance">
            <summary>
            Controls light visibility range. The distance at which the light be completely faded. Use value 0 to always draw light.
            </summary>
        </member>
        <member name="P:FlaxEngine.Light.IndirectLightingIntensity">
            <summary>
            Controls how much this light will contribute indirect lighting. When set to 0, there is no GI from the light. The default value is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Light.VolumetricScatteringIntensity">
            <summary>
            Controls how much this light will contribute to the Volumetric Fog. When set to 0, there is no contribution.
            </summary>
        </member>
        <member name="P:FlaxEngine.Light.CastVolumetricShadow">
            <summary>
            Toggles whether or not to cast a volumetric shadow for lights contributing to Volumetric Fog. Also shadows casting by this light should be enabled in order to make it cast volumetric fog shadow.
            </summary>
        </member>
        <member name="T:FlaxEngine.LightWithShadow">
            <summary>
            Base class for all light types that can cast dynamic or static shadow. Contains more shared properties for point/spot/directional lights.
            </summary>
        </member>
        <member name="M:FlaxEngine.LightWithShadow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.LightWithShadow"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.MinRoughness">
            <summary>
            The minimum roughness value used to clamp material surface roughness during shading pixel.
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.ShadowsDistance">
            <summary>
            The light shadows casting distance from view.
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.ShadowsFadeDistance">
            <summary>
            The light shadows fade off distance
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.ShadowsSharpness">
            <summary>
            The light shadows edges sharpness
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.ShadowsStrength">
            <summary>
            Dynamic shadows blending strength. Default is 1 for fully opaque shadows, value 0 disables shadows.
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.ShadowsDepthBias">
            <summary>
            The depth bias used for shadow map comparison.
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.ShadowsNormalOffsetScale">
            <summary>
            A factor specifying the offset to add to the calculated shadow map depth with respect to the surface normal.
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.ContactShadowsLength">
            <summary>
            The length of the rays for contact shadows computed via the screen-space tracing. Set this to values higher than 0 to enable screen-space shadows rendering for this light. This improves the shadowing details. Actual ray distance is based on the pixel distance from the camera.
            </summary>
        </member>
        <member name="P:FlaxEngine.LightWithShadow.ShadowsMode">
            <summary>
            Shadows casting mode by this visual element
            </summary>
        </member>
        <member name="T:FlaxEngine.ModelInstanceActor">
            <summary>
            Base class for actor types that use ModelInstanceEntries for mesh rendering.
            </summary>
            <seealso cref="T:FlaxEngine.Actor" />
        </member>
        <member name="M:FlaxEngine.ModelInstanceActor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.ModelInstanceActor"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.ModelInstanceActor.Entries">
            <summary>
            Gets or sets the model entries collection. Each entry contains data how to render meshes using this entry (transformation, material, shadows casting, etc.).
            </summary>
        </member>
        <member name="M:FlaxEngine.ModelInstanceActor.SetMaterial(System.Int32,FlaxEngine.MaterialBase)">
            <summary>
            Sets the material to the entry slot. Can be used to override the material of the meshes using this slot.
            </summary>
            <param name="entryIndex">The material slot entry index.</param>
            <param name="material">The material to set.</param>
        </member>
        <member name="M:FlaxEngine.ModelInstanceActor.CreateAndSetVirtualMaterialInstance(System.Int32)">
            <summary>
            Utility to crate a new virtual Material Instance asset, set its parent to the currently applied material, and assign it to the entry. Can be used to modify the material parameters from code.
            </summary>
            <param name="entryIndex">The material slot entry index.</param>
            <returns>The created virtual material instance.</returns>
        </member>
        <member name="M:FlaxEngine.ModelInstanceActor.IntersectsEntry(System.Int32,FlaxEngine.Ray@,System.Single@,FlaxEngine.Vector3@)">
            <summary>
            Determines if there is an intersection between the model actor mesh entry and a ray.
            If mesh data is available on the CPU performs exact intersection check with the geometry.
            Otherwise performs simple <see cref="T:FlaxEngine.BoundingBox"/> vs <see cref="T:FlaxEngine.Ray"/> test.
            For more efficient collisions detection and ray casting use physics.
            </summary>
            <param name="entryIndex">The material slot entry index to test.</param>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes and returns true, contains the distance of the intersection (if any valid).</param>
            <param name="normal">When the method completes, contains the intersection surface normal vector (if any valid).</param>
            <returns>True if the actor is intersected by the ray, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.ModelInstanceActor.IntersectsEntry(FlaxEngine.Ray@,System.Single@,FlaxEngine.Vector3@,System.Int32@)">
            <summary>
            Determines if there is an intersection between the model actor mesh entry and a ray.
            If mesh data is available on the CPU performs exact intersection check with the geometry.
            Otherwise performs simple <see cref="T:FlaxEngine.BoundingBox"/> vs <see cref="T:FlaxEngine.Ray"/> test.
            For more efficient collisions detection and ray casting use physics.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes and returns true, contains the distance of the intersection (if any valid).</param>
            <param name="normal">When the method completes, contains the intersection surface normal vector (if any valid).</param>
            <param name="entryIndex">When the method completes, contains the intersection entry index (if any valid).</param>
            <returns>True if the actor is intersected by the ray, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.PointLight">
            <summary>
            Point light emits light from point in all directions.
            </summary>
        </member>
        <member name="M:FlaxEngine.PointLight.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.PointLight"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.SourceRadius">
            <summary>
            Light source bulb radius
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.SourceLength">
            <summary>
            Light source bulb length
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.FallOffExponent">
            <summary>
            Controls the radial falloff of light when UseInverseSquaredFalloff is disabled.
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.UseInverseSquaredFalloff">
            <summary>
            Whether to use physically based inverse squared distance falloff, where Radius is only clamping the light's contribution.
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.IESTexture">
            <summary>
            IES texture (light profiles from real world measured data)
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.UseIESBrightness">
            <summary>
            Enable/disable using light brightness from IES profile
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.IESBrightnessScale">
            <summary>
            Global scale for IES brightness contribution
            </summary>
        </member>
        <member name="P:FlaxEngine.PointLight.Radius">
            <summary>
            Gets or sets light radius
            </summary>
        </member>
        <member name="T:FlaxEngine.PostFxVolume">
            <summary>
            A special type of volume that blends custom set of post process settings into the rendering.
            </summary>
        </member>
        <member name="M:FlaxEngine.PostFxVolume.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.PostFxVolume"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.AmbientOcclusion">
            <summary>
            The ambient occlusion effect settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.Bloom">
            <summary>
            The bloom effect settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.ToneMapping">
            <summary>
            The tone mapping effect settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.ColorGrading">
            <summary>
            The color grading effect settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.EyeAdaptation">
            <summary>
            The eye adaptation effect settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.CameraArtifacts">
            <summary>
            The camera artifacts effect settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.LensFlares">
            <summary>
            The lens flares effect settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.DepthOfField">
            <summary>
            The depth of field effect settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.MotionBlur">
            <summary>
            The motion blur effect settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.ScreenSpaceReflections">
            <summary>
            The screen space reflections effect settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.AntiAliasing">
            <summary>
            The anti-aliasing effect settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.PostFxMaterials">
            <summary>
            The PostFx materials rendering settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.Priority">
            <summary>
            Gets or sets the order in which multiple volumes are blended together.
            The volume with the highest priority takes precedence over all other overlapping volumes.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.BlendRadius">
            <summary>
            Gets or sets the distance inside the volume at which blending with the volume's settings occurs.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.BlendWeight">
            <summary>
            Gets or sets the amount of influence the volume's properties have. 0 is no effect; 1 is full effect.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostFxVolume.IsBounded">
            <summary>
            Gets or sets the value indicating whether the bounds of the volume are taken into account.
            If false, the volume affects the entire world, regardless of its bounds.
            If true, the volume only has an effect within its bounds.
            </summary>
        </member>
        <member name="M:FlaxEngine.PostFxVolume.AddPostFxMaterial(FlaxEngine.MaterialBase)">
            <summary>
            Adds the post fx material to the settings.
            </summary>
            <param name="material">The material.</param>
        </member>
        <member name="M:FlaxEngine.PostFxVolume.RemovePostFxMaterial(FlaxEngine.MaterialBase)">
            <summary>
            Removes the post fx material from the settings.
            </summary>
            <param name="material">The material.</param>
        </member>
        <member name="T:FlaxEngine.Ragdoll">
            <summary>
            Actor that synchronizes Animated Model skeleton pose with physical bones bodies simulated with physics. Child rigidbodies are used for per-bone simulation - rigidbodies names must match skeleton bone name and should be ordered based on importance in the skeleton tree (parents first).
            </summary>
        </member>
        <member name="M:FlaxEngine.Ragdoll.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Ragdoll"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Ragdoll.BonesWeight">
            <summary>
            The default bones weight where 0 means fully animated bone and 1 means fully simulate bones. Can be used to control all bones simulation mode but is overriden by per-bone BonesWeights.
            </summary>
        </member>
        <member name="P:FlaxEngine.Ragdoll.BonesWeights">
            <summary>
            The per-bone weights for ragdoll simulation. Key is bone name, value is the blend weight where 0 means fully animated bone and 1 means fully simulated bone. Can be used to control per-bone simulation.
            </summary>
        </member>
        <member name="P:FlaxEngine.Ragdoll.PositionSolverIterations">
            <summary>
            The minimum number of position iterations the physics solver should perform for bodies in this ragdoll. Higher values improve stability but affect performance.
            </summary>
            <seealso cref="M:FlaxEngine.RigidBody.SetSolverIterationCounts(System.Int32,System.Int32)"/>
        </member>
        <member name="P:FlaxEngine.Ragdoll.VelocitySolverIterations">
            <summary>
            The minimum number of velocity iterations the physics solver should perform for bodies in this ragdoll. Higher values improve stability but affect performance.
            </summary>
            <seealso cref="M:FlaxEngine.RigidBody.SetSolverIterationCounts(System.Int32,System.Int32)"/>
        </member>
        <member name="P:FlaxEngine.Ragdoll.MaxDepenetrationVelocity">
            <summary>
            The maximum depenetration velocity when ragdoll's rigidbody moving out of penetrating state. Using this property can smooth objects moving out of colliding state and prevent unstable motion.
            </summary>
            <seealso cref="P:FlaxEngine.RigidBody.MaxDepenetrationVelocity"/>
        </member>
        <member name="P:FlaxEngine.Ragdoll.TotalMass">
            <summary>
            Calculates the total mass of all ragdoll bodies.
            </summary>
        </member>
        <member name="M:FlaxEngine.Ragdoll.SetLinearVelocity(FlaxEngine.Vector3)">
            <summary>
            Sets the linear velocity of all rigidbodies in the ragdoll.
            </summary>
        </member>
        <member name="M:FlaxEngine.Ragdoll.SetAngularVelocity(FlaxEngine.Vector3)">
            <summary>
            Sets the angular velocity of all rigidbodies in the ragdoll (in radians per second).
            </summary>
        </member>
        <member name="T:FlaxEngine.Sky">
            <summary>
            Sky actor renders atmosphere around the scene with fog and sky.
            </summary>
        </member>
        <member name="M:FlaxEngine.Sky.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Sky"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Sky.SunLight">
            <summary>
            Directional light that is used to simulate the sun.
            </summary>
        </member>
        <member name="P:FlaxEngine.Sky.SunDiscScale">
            <summary>
            The sun disc scale.
            </summary>
        </member>
        <member name="P:FlaxEngine.Sky.SunPower">
            <summary>
            The sun power.
            </summary>
        </member>
        <member name="T:FlaxEngine.Skybox">
            <summary>
            Skybox actor renders sky using custom cube texture or material.
            </summary>
        </member>
        <member name="M:FlaxEngine.Skybox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Skybox"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Skybox.CubeTexture">
            <summary>
            The cube texture to draw.
            </summary>
        </member>
        <member name="P:FlaxEngine.Skybox.PanoramicTexture">
            <summary>
            The panoramic texture to draw. It should have a resolution ratio close to 2:1.
            </summary>
        </member>
        <member name="P:FlaxEngine.Skybox.CustomMaterial">
            <summary>
            The skybox custom material used to override default (domain set to surface).
            </summary>
        </member>
        <member name="P:FlaxEngine.Skybox.Color">
            <summary>
            The skybox texture tint color.
            </summary>
        </member>
        <member name="P:FlaxEngine.Skybox.Exposure">
            <summary>
            The skybox texture exposure value. Can be used to make skybox brighter or dimmer.
            </summary>
        </member>
        <member name="T:FlaxEngine.SkyLight">
            <summary>
            Sky light captures the distant parts of the scene and applies it as a light. Allows to add ambient light.
            </summary>
        </member>
        <member name="M:FlaxEngine.SkyLight.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SkyLight"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkyLight.AdditiveColor">
            <summary>
            Additional color to add. Source texture colors are summed with it. Can be used to apply custom ambient color.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkyLight.SkyDistanceThreshold">
            <summary>
            Distance from the light at which any geometry should be treated as part of the sky.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkyLight.Mode">
            <summary>
            The current light source mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkyLight.CustomTexture">
            <summary>
            The custom texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.SkyLight.Radius">
            <summary>
            Gets the radius.
            </summary>
        </member>
        <member name="M:FlaxEngine.SkyLight.Bake(System.Single)">
            <summary>
            Bakes that probe.
            </summary>
            <param name="timeout">The timeout in seconds left to bake it (aka startup time).</param>
        </member>
        <member name="T:FlaxEngine.SkyLight.Modes">
            <summary>
            Sky light source mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkyLight.Modes.CaptureScene">
            <summary>
            The captured scene will be used as a light source.
            </summary>
        </member>
        <member name="F:FlaxEngine.SkyLight.Modes.CustomTexture">
            <summary>
            The custom cube texture will be used as a light source.
            </summary>
        </member>
        <member name="T:FlaxEngine.Spline">
            <summary>
            Spline shape actor that defines spatial curve with utility functions for general purpose usage.
            </summary>
        </member>
        <member name="M:FlaxEngine.Spline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Spline"/>.
            </summary>
        </member>
        <member name="E:FlaxEngine.Spline.SplineUpdated">
            <summary>
            Called when spline gets updated (eg. after curve modification).
            </summary>
        </member>
        <member name="P:FlaxEngine.Spline.IsLoop">
            <summary>
            Whether to use spline as closed loop. In that case, ensure to place start and end at the same location.
            </summary>
        </member>
        <member name="P:FlaxEngine.Spline.SplinePointsCount">
            <summary>
            Gets the amount of points in the spline.
            </summary>
        </member>
        <member name="P:FlaxEngine.Spline.SplineDuration">
            <summary>
            Gets the total duration of the spline curve (time of the last point).
            </summary>
        </member>
        <member name="P:FlaxEngine.Spline.SplineLength">
            <summary>
            Gets the total length of the spline curve (distance between all the points).
            </summary>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplinePoint(System.Single)">
            <summary>
            Evaluates the spline curve at the given time and calculates the point location in 3D (world-space).
            </summary>
            <param name="time">The time value. Can be negative or larger than curve length (curve will loop or clamp).</param>
            <returns>The calculated curve point location (world-space).</returns>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplineLocalPoint(System.Single)">
            <summary>
            Evaluates the spline curve at the given time and calculates the point location in 3D (local-space).
            </summary>
            <param name="time">The time value. Can be negative or larger than curve length (curve will loop or clamp).</param>
            <returns>The calculated curve point location (local-space).</returns>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplineOrientation(System.Single)">
            <summary>
            Evaluates the spline curve at the given time and calculates the point rotation in 3D (world-space).
            </summary>
            <param name="time">The time value. Can be negative or larger than curve length (curve will loop or clamp).</param>
            <returns>The calculated curve point rotation (world-space).</returns>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplineLocalOrientation(System.Single)">
            <summary>
            Evaluates the spline curve at the given time and calculates the point rotation in 3D (local-space).
            </summary>
            <param name="time">The time value. Can be negative or larger than curve length (curve will loop or clamp).</param>
            <returns>The calculated curve point rotation (local-space).</returns>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplineScale(System.Single)">
            <summary>
            Evaluates the spline curve at the given time and calculates the point scale in 3D (world-space).
            </summary>
            <param name="time">The time value. Can be negative or larger than curve length (curve will loop or clamp).</param>
            <returns>The calculated curve point scale (world-space).</returns>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplineLocalScale(System.Single)">
            <summary>
            Evaluates the spline curve at the given time and calculates the point scale in 3D (local-space).
            </summary>
            <param name="time">The time value. Can be negative or larger than curve length (curve will loop or clamp).</param>
            <returns>The calculated curve point scale (local-space).</returns>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplineTransform(System.Single)">
            <summary>
            Evaluates the spline curve at the given time and calculates the transformation in 3D (world-space).
            </summary>
            <param name="time">The time value. Can be negative or larger than curve length (curve will loop or clamp).</param>
            <returns>The calculated curve point transformation (world-space).</returns>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplineLocalTransform(System.Single)">
            <summary>
            Evaluates the spline curve at the given time and calculates the transformation in 3D (local-space).
            </summary>
            <param name="time">The time value. Can be negative or larger than curve length (curve will loop or clamp).</param>
            <returns>The calculated curve point transformation (local-space).</returns>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplineDirection(System.Single)">
            <summary>
            Evaluates the spline curve direction (forward vector, aka position 1st derivative) at the given time in 3D (world-space).
            </summary>
            <param name="time">The time value. Can be negative or larger than curve length (curve will loop or clamp).</param>
            <returns>The calculated curve direction (world-space).</returns>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplineLocalDirection(System.Single)">
            <summary>
            Evaluates the spline curve direction (forward vector, aka position 1st derivative) at the given time in 3D (local-space).
            </summary>
            <param name="time">The time value. Can be negative or larger than curve length (curve will loop or clamp).</param>
            <returns>The calculated curve direction (local-space).</returns>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplinePoint(System.Int32)">
            <summary>
            Evaluates the spline curve at the given index (world-space).
            </summary>
            <param name="index">The curve keyframe index. Zero-based, smaller than GetSplinePointsCount().</param>
            <returns>The curve point location (world-space).</returns>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplineLocalPoint(System.Int32)">
            <summary>
            Evaluates the spline curve at the given index (local-space).
            </summary>
            <param name="index">The curve keyframe index. Zero-based, smaller than GetSplinePointsCount().</param>
            <returns>The curve point location (local-space).</returns>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplineTransform(System.Int32)">
            <summary>
            Evaluates the spline curve at the given index (world-space).
            </summary>
            <param name="index">The curve keyframe index. Zero-based, smaller than GetSplinePointsCount().</param>
            <returns>The curve point transformation (world-space).</returns>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplineLocalTransform(System.Int32)">
            <summary>
            Evaluates the spline curve at the given index (local-space).
            </summary>
            <param name="index">The curve keyframe index. Zero-based, smaller than GetSplinePointsCount().</param>
            <returns>The curve point transformation (local-space).</returns>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplineTangent(System.Int32,System.Boolean)">
            <summary>
            Gets the spline curve point tangent at the given index (world-space).
            </summary>
            <remarks>Tangents are stored relative to the curve point but this methods converts them to be in world-space.</remarks>
            <param name="index">The curve keyframe index. Zero-based, smaller than GetSplinePointsCount().</param>
            <param name="isIn">True if get arrive tangent, otherwise gets leave tangent (in or out).</param>
            <returns>The transformation of the tangent to set (world-space).</returns>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplineLocalTangent(System.Int32,System.Boolean)">
            <summary>
            Gets the spline curve point tangent at the given index (local-space).
            </summary>
            <remarks>Tangents are stored relative to the curve point but this methods converts them to be in local-space of the actor.</remarks>
            <param name="index">The curve keyframe index. Zero-based, smaller than GetSplinePointsCount().</param>
            <param name="isIn">True if get arrive tangent, otherwise gets leave tangent (in or out).</param>
            <returns>The transformation of the tangent to set (world-space).</returns>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplineTime(System.Int32)">
            <summary>
            Gets the time of the spline keyframe.
            </summary>
            <param name="index">The curve keyframe index. Zero-based, smaller than GetSplinePointsCount().</param>
            <returns>The spline time.</returns>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplineTimeClosestToPoint(FlaxEngine.Vector3)">
            <summary>
            Calculates the closest point to the given location and returns the spline time at that point.
            </summary>
            <param name="point">The point in world-space to find the spline point that is closest to it.</param>
            <returns>The spline time.</returns>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplinePointClosestToPoint(FlaxEngine.Vector3)">
            <summary>
            Calculates the closest point to the given location.
            </summary>
            <param name="point">The point in world-space to find the spline point that is closest to it.</param>
            <returns>The spline position.</returns>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplinePoints(FlaxEngine.Vector3[]@)">
            <summary>
            Gets the spline curve points list (world-space).
            </summary>
            <param name="points">The result points collection.</param>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplineLocalPoints(FlaxEngine.Vector3[]@)">
            <summary>
            Gets the spline curve points list (local-space).
            </summary>
            <param name="points">The result points collection.</param>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplinePoints(FlaxEngine.Transform[]@)">
            <summary>
            Gets the spline curve points list (world-space).
            </summary>
            <param name="points">The result points collection.</param>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplineLocalPoints(FlaxEngine.Transform[]@)">
            <summary>
            Gets the spline curve points list (local-space).
            </summary>
            <param name="points">The result points collection.</param>
        </member>
        <member name="M:FlaxEngine.Spline.ClearSpline">
            <summary>
            Clears the spline to be empty.
            </summary>
        </member>
        <member name="M:FlaxEngine.Spline.RemoveSplinePoint(System.Int32,System.Boolean)">
            <summary>
            Removes the spline curve point at the given index.
            </summary>
            <param name="index">The curve keyframe index. Zero-based, smaller than GetSplinePointsCount().</param>
            <param name="updateSpline">True if update spline after removing the point, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.Spline.SetSplinePoint(System.Int32,FlaxEngine.Vector3,System.Boolean)">
            <summary>
            Sets the spline curve at the given index (world-space).
            </summary>
            <param name="index">The curve keyframe index. Zero-based, smaller than GetSplinePointsCount().</param>
            <param name="point">The location of the point to set (world-space).</param>
            <param name="updateSpline">True if update spline after editing the point, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.Spline.SetSplineLocalPoint(System.Int32,FlaxEngine.Vector3,System.Boolean)">
            <summary>
            Sets the spline curve at the given index (local-space).
            </summary>
            <param name="index">The curve keyframe index. Zero-based, smaller than GetSplinePointsCount().</param>
            <param name="point">The location of the point to set (local-space).</param>
            <param name="updateSpline">True if update spline after editing the point, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.Spline.SetSplineTransform(System.Int32,FlaxEngine.Transform,System.Boolean)">
            <summary>
            Sets the spline curve at the given index (world-space).
            </summary>
            <param name="index">The curve keyframe index. Zero-based, smaller than GetSplinePointsCount().</param>
            <param name="point">The transformation of the point to set (world-space).</param>
            <param name="updateSpline">True if update spline after editing the point, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.Spline.SetSplineLocalTransform(System.Int32,FlaxEngine.Transform,System.Boolean)">
            <summary>
            Sets the spline curve at the given index (local-space).
            </summary>
            <param name="index">The curve keyframe index. Zero-based, smaller than GetSplinePointsCount().</param>
            <param name="point">The transformation of the point to set (local-space).</param>
            <param name="updateSpline">True if update spline after editing the point, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.Spline.SetSplineTangent(System.Int32,FlaxEngine.Transform,System.Boolean,System.Boolean)">
            <summary>
            Sets the spline curve point tangent at the given index (world-space).
            </summary>
            <remarks>Tangents are stored relative to the curve point but this methods converts them to be in world-space.</remarks>
            <param name="index">The curve keyframe index. Zero-based, smaller than GetSplinePointsCount().</param>
            <param name="point">The transformation of the tangent to set (world-space).</param>
            <param name="isIn">True if set arrive tangent, otherwise sets leave tangent (in or out).</param>
            <param name="updateSpline">True if update spline after editing the point, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.Spline.SetSplineLocalTangent(System.Int32,FlaxEngine.Transform,System.Boolean,System.Boolean)">
            <summary>
            Sets the spline curve point tangent at the given index (local-space).
            </summary>
            <remarks>Tangents are stored relative to the curve point but this methods converts them to be in local-space of the actor.</remarks>
            <param name="index">The curve keyframe index. Zero-based, smaller than GetSplinePointsCount().</param>
            <param name="point">The transformation of the tangent to set (local-space).</param>
            <param name="isIn">True if set arrive tangent, otherwise sets leave tangent (in or out).</param>
            <param name="updateSpline">True if update spline after editing the point, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.Spline.SetSplinePointTime(System.Int32,System.Single,System.Boolean)">
            <summary>
            Sets the spline curve point time at the given index (world-space).
            </summary>
            <param name="index">The curve keyframe index. Zero-based, smaller than GetSplinePointsCount().</param>
            <param name="time">The time to set.</param>
            <param name="updateSpline">True if update spline after editing the point, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.Spline.AddSplinePoint(FlaxEngine.Vector3,System.Boolean)">
            <summary>
            Adds the point to the spline curve (at the end).
            </summary>
            <param name="point">The location of the point to add to the curve (world-space).</param>
            <param name="updateSpline">True if update spline after editing the point, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.Spline.AddSplineLocalPoint(FlaxEngine.Vector3,System.Boolean)">
            <summary>
            Adds the point to the spline curve (at the end).
            </summary>
            <param name="point">The location of the point to add to the curve (local-space).</param>
            <param name="updateSpline">True if update spline after adding the point, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.Spline.AddSplinePoint(FlaxEngine.Transform,System.Boolean)">
            <summary>
            Adds the point to the spline curve (at the end).
            </summary>
            <param name="point">The transformation of the point to add to the curve (world-space).</param>
            <param name="updateSpline">True if update spline after adding the point, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.Spline.AddSplineLocalPoint(FlaxEngine.Transform,System.Boolean)">
            <summary>
            Adds the point to the spline curve (at the end).
            </summary>
            <param name="point">The transformation of the point to add to the curve (local-space).</param>
            <param name="updateSpline">True if update spline after adding the point, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.Spline.InsertSplinePoint(System.Int32,System.Single,FlaxEngine.Transform,System.Boolean)">
            <summary>
            Inserts the spline curve point at the given index (world-space).
            </summary>
            <param name="index">The curve keyframe index. Zero-based, smaller than GetSplinePointsCount().</param>
            <param name="time">The time value.</param>
            <param name="point">The location of the point to add to the curve (world-space).</param>
            <param name="updateSpline">True if update spline after removing the point, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.Spline.InsertSplineLocalPoint(System.Int32,System.Single,FlaxEngine.Transform,System.Boolean)">
            <summary>
            Inserts the spline curve point at the given index (local-space).
            </summary>
            <param name="index">The curve keyframe index. Zero-based, smaller than GetSplinePointsCount().</param>
            <param name="time">The time value.</param>
            <param name="point">The location of the point to add to the curve (local-space).</param>
            <param name="updateSpline">True if update spline after removing the point, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.Spline.SetTangentsLinear">
            <summary>
            Updates the curve tangent points to make curve linear.
            </summary>
        </member>
        <member name="M:FlaxEngine.Spline.SetTangentsSmooth">
            <summary>
            Updates the curve tangent points to make curve smooth.
            </summary>
        </member>
        <member name="M:FlaxEngine.Spline.UpdateSpline">
            <summary>
            Updates the spline after it was modified. Recreates the collision and/or any cached state that depends on the spline type.
            </summary>
        </member>
        <member name="P:FlaxEngine.Spline.SplineKeyframes">
            <summary>
            Gets or sets the spline keyframes collection.
            </summary>
        </member>
        <member name="M:FlaxEngine.Spline.GetSplineKeyframe(System.Int32)">
            <summary>
            Gets the spline keyframe.
            </summary>
            <param name="index">The spline point index.</param>
            <returns>The keyframe.</returns>
        </member>
        <member name="M:FlaxEngine.Spline.SetSplineKeyframe(System.Int32,FlaxEngine.BezierCurve{FlaxEngine.Transform}.Keyframe)">
            <summary>
            Sets the spline keyframe.
            </summary>
            <param name="index">The spline point index.</param>
            <param name="keyframe">The keyframe.</param>
        </member>
        <member name="T:FlaxEngine.SplineModel">
            <summary>
            Renders model over the spline segments.
            </summary>
        </member>
        <member name="M:FlaxEngine.SplineModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SplineModel"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SplineModel.Model">
            <summary>
            The model asset to draw.
            </summary>
        </member>
        <member name="P:FlaxEngine.SplineModel.DrawModes">
            <summary>
            The draw passes to use for rendering this object.
            </summary>
        </member>
        <member name="P:FlaxEngine.SplineModel.PreTransform">
            <summary>
            Gets or sets the transformation applied to the model geometry before placing it over the spline. Can be used to change the way model goes over the spline.
            </summary>
        </member>
        <member name="P:FlaxEngine.SplineModel.Quality">
            <summary>
            Gets or sets the spline model quality scale. Higher values improve the spline representation (better tessellation) but reduce performance.
            </summary>
        </member>
        <member name="P:FlaxEngine.SplineModel.BoundsScale">
            <summary>
            Gets or sets the model bounds scale. It is useful when using Position Offset to animate the vertices of the object outside of its bounds.
            </summary>
        </member>
        <member name="P:FlaxEngine.SplineModel.LODBias">
            <summary>
            Gets or sets the model Level Of Detail bias value. Allows to increase or decrease rendered model quality.
            </summary>
        </member>
        <member name="P:FlaxEngine.SplineModel.ForcedLOD">
            <summary>
            Gets or sets the model forced Level Of Detail index. Allows to bind the given model LOD to show. Value -1 disables this feature.
            </summary>
        </member>
        <member name="T:FlaxEngine.SpotLight">
            <summary>
            Spot light emits light from the point in a given direction.
            </summary>
        </member>
        <member name="M:FlaxEngine.SpotLight.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SpotLight"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.SourceRadius">
            <summary>
            Light source bulb radius
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.FallOffExponent">
            <summary>
            Controls the radial falloff of light when UseInverseSquaredFalloff is disabled.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.UseInverseSquaredFalloff">
            <summary>
            Whether to use physically based inverse squared distance falloff, where Radius is only clamping the light's contribution.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.IESTexture">
            <summary>
            IES texture (light profiles from real world measured data)
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.UseIESBrightness">
            <summary>
            Enable/disable using light brightness from IES profile
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.IESBrightnessScale">
            <summary>
            Global scale for IES brightness contribution
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.Radius">
            <summary>
            Gets or sets light radius
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.OuterConeAngle">
            <summary>
            Gets or sets the spot light's outer cone angle (in degrees)
            </summary>
        </member>
        <member name="P:FlaxEngine.SpotLight.InnerConeAngle">
            <summary>
            Sets the spot light's inner cone angle (in degrees)
            </summary>
        </member>
        <member name="T:FlaxEngine.StaticModel">
            <summary>
            Renders model on the screen.
            </summary>
        </member>
        <member name="M:FlaxEngine.StaticModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.StaticModel"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.StaticModel.Model">
            <summary>
            The model asset to draw.
            </summary>
        </member>
        <member name="P:FlaxEngine.StaticModel.DrawModes">
            <summary>
            The draw passes to use for rendering this object.
            </summary>
        </member>
        <member name="P:FlaxEngine.StaticModel.ScaleInLightmap">
            <summary>
            Gets or sets the model scale in lightmap (applied to all the meshes).
            </summary>
        </member>
        <member name="P:FlaxEngine.StaticModel.BoundsScale">
            <summary>
            Gets or sets the model bounds scale. It is useful when using Position Offset to animate the vertices of the object outside of its bounds. Increasing the bounds of an object will reduce performance.
            </summary>
        </member>
        <member name="P:FlaxEngine.StaticModel.LODBias">
            <summary>
            Gets or sets the model Level Of Detail bias value. Allows to increase or decrease rendered model quality.
            </summary>
        </member>
        <member name="P:FlaxEngine.StaticModel.ForcedLOD">
            <summary>
            Gets or sets the model forced Level Of Detail index. Allows to bind the given model LOD to show. Value -1 disables this feature.
            </summary>
        </member>
        <member name="P:FlaxEngine.StaticModel.HasLightmap">
            <summary>
            Determines whether this model has valid lightmap data.
            </summary>
        </member>
        <member name="P:FlaxEngine.StaticModel.HasVertexColors">
            <summary>
            Returns true if model instance is using custom painted vertex colors buffer, otherwise it will use vertex colors from the original asset.
            </summary>
        </member>
        <member name="M:FlaxEngine.StaticModel.RemoveLightmap">
            <summary>
            Removes the lightmap data from the model.
            </summary>
        </member>
        <member name="M:FlaxEngine.StaticModel.GetMaterial(System.Int32,System.Int32)">
            <summary>
            Gets the material used to render mesh at given index (overriden by model instance buffer or model default).
            </summary>
            <param name="meshIndex">The zero-based mesh index.</param>
            <param name="lodIndex">The LOD index.</param>
            <returns>Material or null if not assigned.</returns>
        </member>
        <member name="M:FlaxEngine.StaticModel.GetVertexColor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the color of the painter vertex (this model instance).
            </summary>
            <param name="lodIndex">The model LOD index.</param>
            <param name="meshIndex">The mesh index.</param>
            <param name="vertexIndex">The vertex index.</param>
            <returns>The color of the vertex.</returns>
        </member>
        <member name="M:FlaxEngine.StaticModel.SetVertexColor(System.Int32,System.Int32,System.Int32,FlaxEngine.Color32)">
            <summary>
            Sets the color of the painter vertex (this model instance).
            </summary>
            <param name="lodIndex">The model LOD index.</param>
            <param name="meshIndex">The mesh index.</param>
            <param name="vertexIndex">The vertex index.</param>
            <param name="color">The color to set.</param>
        </member>
        <member name="M:FlaxEngine.StaticModel.RemoveVertexColors">
            <summary>
            Removes the vertex colors buffer from this instance.
            </summary>
        </member>
        <member name="T:FlaxEngine.Level">
            <summary>
            The scene manager that contains the loaded scenes collection and spawns/deleted actors.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.ActorSpawned">
            <summary>
            Occurs when new actor gets spawned to the game.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.ActorDeleted">
            <summary>
            Occurs when actor is removed from the game.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.ActorParentChanged">
            <summary>
            Occurs when actor parent gets changed. Arguments: actor and previous parent actor.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.ActorOrderInParentChanged">
            <summary>
            Occurs when actor index in parent actor children gets changed.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.ActorNameChanged">
            <summary>
            Occurs when actor name gets changed.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.ActorActiveChanged">
            <summary>
            Occurs when actor active state gets modified.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.SceneSaving">
            <summary>
            Fired when scene starts saving.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.SceneSaved">
            <summary>
            Fired when scene gets saved.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.SceneSaveError">
            <summary>
            Fired when scene gets saving error.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.SceneLoading">
            <summary>
            Fired when scene starts loading.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.SceneLoaded">
            <summary>
            Fired when scene gets loaded.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.SceneLoadError">
            <summary>
            Fired when scene cannot be loaded (argument is error number).
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.SceneUnloading">
            <summary>
            Fired when scene gets unloading.
            </summary>
        </member>
        <member name="E:FlaxEngine.Level.SceneUnloaded">
            <summary>
            Fired when scene gets unloaded.
            </summary>
        </member>
        <member name="P:FlaxEngine.Level.Scenes">
            <summary>
            The loaded scenes collection.
            </summary>
        </member>
        <member name="P:FlaxEngine.Level.IsAnySceneLoaded">
            <summary>
            Checks if any scene has been loaded. Loaded scene means deserialized and added to the scenes collection.
            </summary>
        </member>
        <member name="P:FlaxEngine.Level.IsAnyActorInGame">
            <summary>
            Checks if any scene has any actor
            </summary>
        </member>
        <member name="P:FlaxEngine.Level.IsAnyActionPending">
            <summary>
            Checks if any scene action is pending
            </summary>
        </member>
        <member name="P:FlaxEngine.Level.LastSceneLoadTime">
            <summary>
            Gets the last scene load time (in UTC).
            </summary>
        </member>
        <member name="P:FlaxEngine.Level.ScenesCount">
            <summary>
            Gets the scenes count.
            </summary>
        </member>
        <member name="M:FlaxEngine.Level.GetScene(System.Int32)">
            <summary>
            Gets the scene.
            </summary>
            <param name="index">The index.</param>
            <returns>The scene object (loaded).</returns>
        </member>
        <member name="M:FlaxEngine.Level.SpawnActor(FlaxEngine.Actor)">
            <summary>
            Spawn actor on the scene
            </summary>
            <param name="actor">Actor to spawn</param>
            <returns>True if action cannot be done, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.SpawnActor(FlaxEngine.Actor,FlaxEngine.Actor)">
            <summary>
            Spawns actor on the scene.
            </summary>
            <param name="actor">The actor to spawn.</param>
            <param name="parent">The parent actor (will link spawned actor with this parent).</param>
            <returns>True if action cannot be done, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.SaveScene(FlaxEngine.Scene,System.Boolean)">
            <summary>
            Saves scene to the asset.
            </summary>
            <param name="scene">Scene to serialize.</param>
            <param name="prettyJson">True if use pretty Json format writer, otherwise will use the compact Json format writer that packs data to use less memory and perform the action faster.</param>
            <returns>True if action cannot be done, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.SaveSceneToBytes(FlaxEngine.Scene,System.Boolean)">
            <summary>
            Saves scene to the bytes.
            </summary>
            <param name="scene">Scene to serialize.</param>
            <param name="prettyJson">True if use pretty Json format writer, otherwise will use the compact Json format writer that packs data to use less memory and perform the action faster.</param>
            <returns>The result data or empty if failed.</returns>
        </member>
        <member name="M:FlaxEngine.Level.SaveSceneAsync(FlaxEngine.Scene)">
            <summary>
            Saves scene to the asset. Done in the background.
            </summary>
            <param name="scene">Scene to serialize.</param>
        </member>
        <member name="M:FlaxEngine.Level.SaveAllScenes">
            <summary>
            Saves all scenes to the assets.
            </summary>
            <returns>True if action cannot be done, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.SaveAllScenesAsync">
            <summary>
            Saves all scenes to the assets. Done in the background.
            </summary>
        </member>
        <member name="M:FlaxEngine.Level.LoadScene(System.Guid)">
            <summary>
            Loads scene from the asset.
            </summary>
            <param name="id">Scene ID</param>
            <returns>True if loading cannot be done, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.LoadSceneFromBytes(System.Byte[])">
            <summary>
            Loads scene from the bytes.
            </summary>
            <param name="data">The scene data to load.</param>
            <returns>Loaded scene object, otherwise null if cannot load data (then see log for more information).</returns>
        </member>
        <member name="M:FlaxEngine.Level.LoadSceneAsync(System.Guid)">
            <summary>
            Loads scene from the asset. Done in the background.
            </summary>
            <param name="id">Scene ID</param>
            <returns>True if loading cannot be done, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.UnloadScene(FlaxEngine.Scene)">
            <summary>
            Unloads given scene.
            </summary>
            <returns>True if action cannot be done, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.UnloadSceneAsync(FlaxEngine.Scene)">
            <summary>
            Unloads given scene. Done in the background.
            </summary>
        </member>
        <member name="M:FlaxEngine.Level.UnloadAllScenes">
            <summary>
            Unloads all scenes.
            </summary>
            <returns>True if action cannot be done, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.UnloadAllScenesAsync">
            <summary>
            Unloads all scenes. Done in the background.
            </summary>
        </member>
        <member name="M:FlaxEngine.Level.FindActor(System.Guid)">
            <summary>
            Tries to find actor with the given ID. It's very fast O(1) lookup.
            </summary>
            <param name="id">The id.</param>
            <returns>Found actor or null.</returns>
        </member>
        <member name="M:FlaxEngine.Level.FindActor(System.String)">
            <summary>
            Tries to find the actor with the given name.
            </summary>
            <param name="name">The name of the actor.</param>
            <returns>Found actor or null.</returns>
        </member>
        <member name="M:FlaxEngine.Level.FindActor(System.Type)">
            <summary>
            Tries to find the actor of the given type in all the loaded scenes.
            </summary>
            <param name="type">Type of the actor to search for. Includes any actors derived from the type.</param>
            <returns>Found actor or null.</returns>
        </member>
        <member name="M:FlaxEngine.Level.FindScript(System.Type)">
            <summary>
            Tries to find the script of the given type in all the loaded scenes.
            </summary>
            <param name="type">Type of the script to search for. Includes any scripts derived from the type.</param>
            <returns>Found script or null.</returns>
        </member>
        <member name="M:FlaxEngine.Level.GetActors(System.Type)">
            <summary>
            Finds all the actors of the given type in all the loaded scenes.
            </summary>
            <param name="type">Type of the actor to search for. Includes any actors derived from the type.</param>
            <returns>Found actors list.</returns>
        </member>
        <member name="M:FlaxEngine.Level.GetScripts(System.Type)">
            <summary>
            Finds all the scripts of the given type in all the loaded scenes.
            </summary>
            <param name="type">Type of the script to search for. Includes any scripts derived from the type.</param>
            <returns>Found scripts list.</returns>
        </member>
        <member name="M:FlaxEngine.Level.FindScene(System.Guid)">
            <summary>
            Tries to find scene with given ID.
            </summary>
            <param name="id">Scene id.</param>
            <returns>Found scene or null.</returns>
        </member>
        <member name="M:FlaxEngine.Level.GetLayerIndex(System.String)">
            <summary>
            Gets the zero-based index of the layer.
            </summary>
        </member>
        <member name="M:FlaxEngine.Level.ChangeSceneAsync(System.Guid)">
            <summary>
            Unloads all active scenes and loads the given scene (in the background).
            </summary>
            <param name="sceneAssetId">The scene asset identifier (scene to load).</param>
            <returns>True if action fails (given asset is not a scene asset, missing data, scene loading error), otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.ChangeSceneAsync(FlaxEngine.SceneReference)">
            <summary>
            Unloads all active scenes and loads the given scene (in the background).
            </summary>
            <param name="sceneAsset">The asset with the scene to load.</param>
            <returns>True if action fails (given asset is not a scene asset, missing data, scene loading error), otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.LoadScene(FlaxEngine.SceneReference)">
            <summary>
            Loads scene from the asset.
            </summary>
            <param name="sceneAsset">The asset with the scene to load.</param>
            <returns>True if action fails (given asset is not a scene asset, missing data, scene loading error), otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.LoadSceneAsync(FlaxEngine.SceneReference)">
            <summary>
            Loads scene from the asset. Done in the background.
            </summary>
            <param name="sceneAsset">The asset with the scene to load.</param>
            <returns>True if failed (given asset is not a scene asset, missing data), otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Level.FindScript``1">
            <summary>
            Tries to find script of the given type in all loaded scenes.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <returns>Found script or null.</returns>
        </member>
        <member name="M:FlaxEngine.Level.FindActor``1">
            <summary>
            Tries to find actor of the given type in all loaded scenes.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <returns>Found actor or null.</returns>
        </member>
        <member name="M:FlaxEngine.Level.FindActor``1(System.Guid@)">
            <summary>
            Tries to find actor with the given ID in all loaded scenes. It's very fast O(1) lookup.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <param name="id">The id.</param>
            <returns>Found actor or null.</returns>
        </member>
        <member name="M:FlaxEngine.Level.GetScripts``1">
            <summary>
            Finds all the scripts of the given type in all the loaded scenes.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <returns>Found scripts list.</returns>
        </member>
        <member name="M:FlaxEngine.Level.GetActors``1">
            <summary>
            Finds all the actors of the given type in all the loaded scenes.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <returns>Found actors list.</returns>
        </member>
        <member name="T:FlaxEngine.Prefab">
            <summary>
            Json asset that stores the collection of scene objects including actors and scripts. In general it can serve as any grouping of scene objects (for example a level) or be used as a form of a template instantiated and reused throughout the scene.
            </summary>
            <seealso cref="T:FlaxEngine.JsonAssetBase" />
        </member>
        <member name="M:FlaxEngine.Prefab.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Prefab"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.Prefab.GetDefaultInstance">
            <summary>
            Requests the default prefab object instance. Deserializes the prefab objects from the asset. Skips if already done.
            </summary>
            <returns>The root of the prefab object loaded from the prefab. Contains the default values. It's not added to gameplay but deserialized with postLoad and init event fired.</returns>
        </member>
        <member name="M:FlaxEngine.Prefab.GetDefaultInstance(System.Guid@)">
            <summary>
            Requests the default prefab object instance. Deserializes the prefab objects from the asset. Skips if already done.
            </summary>
            <param name="objectId">The ID of the object to get from prefab default object. It can be one of the child-actors or any script that exists in the prefab. Methods returns root if id is empty.</param>
            <returns>The object of the prefab loaded from the prefab. Contains the default values. It's not added to gameplay but deserialized with postLoad and init event fired.</returns>
        </member>
        <member name="T:FlaxEngine.PrefabManager">
            <summary>
            The prefab manager handles the prefabs creation, synchronization and serialization.
            </summary>
        </member>
        <member name="M:FlaxEngine.PrefabManager.SpawnPrefab(FlaxEngine.Prefab)">
            <summary>
            Spawns the instance of the prefab objects. Prefab will be spawned to the first loaded scene.
            </summary>
            <param name="prefab">The prefab asset.</param>
            <returns>The created actor (root) or null if failed.</returns>
        </member>
        <member name="M:FlaxEngine.PrefabManager.SpawnPrefab(FlaxEngine.Prefab,FlaxEngine.Vector3)">
            <summary>
            Spawns the instance of the prefab objects. Prefab will be spawned to the first loaded scene.
            </summary>
            <param name="prefab">The prefab asset.</param>
            <param name="position">The spawn position in the world space.</param>
            <returns>The created actor (root) or null if failed.</returns>
        </member>
        <member name="M:FlaxEngine.PrefabManager.SpawnPrefab(FlaxEngine.Prefab,FlaxEngine.Vector3,FlaxEngine.Quaternion)">
            <summary>
            Spawns the instance of the prefab objects. Prefab will be spawned to the first loaded scene.
            </summary>
            <param name="prefab">The prefab asset.</param>
            <param name="position">The spawn position in the world space.</param>
            <param name="rotation">The spawn rotation (in world space).</param>
            <returns>The created actor (root) or null if failed.</returns>
        </member>
        <member name="M:FlaxEngine.PrefabManager.SpawnPrefab(FlaxEngine.Prefab,FlaxEngine.Vector3,FlaxEngine.Quaternion,FlaxEngine.Vector3)">
            <summary>
            Spawns the instance of the prefab objects. Prefab will be spawned to the first loaded scene.
            </summary>
            <param name="prefab">The prefab asset.</param>
            <param name="position">The spawn position in the world space.</param>
            <param name="rotation">The spawn rotation (in world space).</param>
            <param name="scale">The spawn scale.</param>
            <returns>The created actor (root) or null if failed.</returns>
        </member>
        <member name="M:FlaxEngine.PrefabManager.SpawnPrefab(FlaxEngine.Prefab,FlaxEngine.Transform)">
            <summary>
            Spawns the instance of the prefab objects. Prefab will be spawned to the first loaded scene.
            </summary>
            <param name="prefab">The prefab asset.</param>
            <param name="transform">The spawn transformation in the world space.</param>
            <returns>The created actor (root) or null if failed.</returns>
        </member>
        <member name="M:FlaxEngine.PrefabManager.SpawnPrefab(FlaxEngine.Prefab,FlaxEngine.Actor)">
            <summary>
            Spawns the instance of the prefab objects. If parent actor is specified then created actors are fully initialized (OnLoad event and BeginPlay is called if parent actor is already during gameplay).
            </summary>
            <param name="prefab">The prefab asset.</param>
            <param name="parent">The parent actor to add spawned object instance. Can be null to just deserialize contents of the prefab.</param>
            <returns>The created actor (root) or null if failed.</returns>
        </member>
        <member name="T:FlaxEngine.Scene">
            <summary>
            The scene root object that contains a hierarchy of actors.
            </summary>
        </member>
        <member name="M:FlaxEngine.Scene.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Scene"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Scene.LightmapSettings">
            <summary>
            Gets or sets the lightmap settings (per scene).
            </summary>
        </member>
        <member name="M:FlaxEngine.Scene.ClearLightmaps">
            <summary>
            Removes all baked lightmap textures from the scene.
            </summary>
        </member>
        <member name="M:FlaxEngine.Scene.BuildCSG(System.Single)">
            <summary>
            Builds the CSG geometry for the given scene.
            </summary>
            <remarks>Requests are enqueued till the next game scripts update.</remarks>
            <param name="timeoutMs">The timeout to wait before building CSG (in milliseconds).</param>
        </member>
        <member name="F:FlaxEngine.Scene.AssetTypename">
            <summary>
            The scene asset typename. Type of the serialized scene asset data. Hidden class for the scene assets. Actors deserialization rules are strictly controlled under the hood by the C++ core parts. Mostly because scene asset has the same ID as scene root actor so loading both managed objects for scene asset and scene will crash (due to object ids conflict).
            </summary>
        </member>
        <member name="F:FlaxEngine.Scene.EditorPickerTypename">
            <summary>
            The scene asset typename used by the Editor asset picker control. Use it for asset reference picker filter.
            </summary>
        </member>
        <member name="T:FlaxEngine.SceneAsset">
            <summary>
            The scene asset.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneAsset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SceneAsset"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.SceneObject">
            <summary>
            Base class for objects that are parts of the scene (actors and scripts).
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SceneObject"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneObject.HasParent">
            <summary>
            Returns true if object has a parent assigned.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneObject.Parent">
            <summary>
            Gets or sets the parent actor (or null if object has no parent).
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneObject.OrderInParent">
            <summary>
            Gets or sets zero-based index in parent actor children list (scripts or child actors).
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneObject.HasPrefabLink">
            <summary>
            Gets a value indicating whether this object has a valid linkage to the prefab asset.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneObject.PrefabID">
            <summary>
            Gets the prefab asset ID. Empty if no prefab link exists.
            </summary>
        </member>
        <member name="P:FlaxEngine.SceneObject.PrefabObjectID">
            <summary>
            Gets the ID of the object within a prefab that is used for synchronization with this object. Empty if no prefab link exists.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneObject.SetParent(FlaxEngine.Actor,System.Boolean)">
            <summary>
            Sets the parent actor.
            </summary>
            <param name="value">The new parent.</param>
            <param name="canBreakPrefabLink">True if can break prefab link on changing the parent.</param>
        </member>
        <member name="M:FlaxEngine.SceneObject.LinkPrefab(System.Guid,System.Guid)">
            <summary>
            Links scene object instance to the prefab asset and prefab object. Warning! This applies to the only this object (not scripts or child actors).
            </summary>
            <param name="prefabId">The prefab asset identifier.</param>
            <param name="prefabObjectId">The prefab object identifier.</param>
        </member>
        <member name="M:FlaxEngine.SceneObject.BreakPrefabLink">
            <summary>
            Breaks the prefab linkage for this object, all its scripts, and all child actors.
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneObject.GetNamePath(System.Char)">
            <summary>
            Gets the path containing name of this object and all parent objects in tree hierarchy separated with custom separator character (/ by default). Can be used to identify this object in logs.
            </summary>
            <param name="separatorChar">The character to separate the names.</param>
            <returns>The full name path.</returns>
        </member>
        <member name="T:FlaxEngine.StaticFlags">
            <summary>
            Static flags for the actor object.
            </summary>
        </member>
        <member name="F:FlaxEngine.StaticFlags.None">
            <summary>
            Non-static object.
            </summary>
        </member>
        <member name="F:FlaxEngine.StaticFlags.ReflectionProbe">
            <summary>
            Object is considered to be static for reflection probes offline caching.
            </summary>
        </member>
        <member name="F:FlaxEngine.StaticFlags.Lightmap">
            <summary>
            Object is considered to be static for static lightmaps.
            </summary>
        </member>
        <member name="F:FlaxEngine.StaticFlags.Transform">
            <summary>
            Object is considered to have static transformation in space (no dynamic physics and any movement at runtime).
            </summary>
        </member>
        <member name="F:FlaxEngine.StaticFlags.Navigation">
            <summary>
            Object is considered to affect navigation (static occluder or walkable surface).
            </summary>
        </member>
        <member name="F:FlaxEngine.StaticFlags.FullyStatic">
            <summary>
            Objects is fully static on the scene.
            </summary>
        </member>
        <member name="F:FlaxEngine.StaticFlags.MAX">
            <summary>
            Maximum value of the enum (force to int).
            </summary>
        </member>
        <member name="T:FlaxEngine.HideFlags">
            <summary>
            Object hide state description flags. Control object appearance.
            </summary>
        </member>
        <member name="F:FlaxEngine.HideFlags.None">
            <summary>
            The default state.
            </summary>
        </member>
        <member name="F:FlaxEngine.HideFlags.HideInHierarchy">
            <summary>
            The object will not be visible in the hierarchy.
            </summary>
        </member>
        <member name="F:FlaxEngine.HideFlags.DontSave">
            <summary>
            The object will not be saved.
            </summary>
        </member>
        <member name="F:FlaxEngine.HideFlags.DontSelect">
            <summary>
            The object will not selectable in the editor viewport.
            </summary>
        </member>
        <member name="F:FlaxEngine.HideFlags.FullyHidden">
            <summary>
            The fully hidden object flags mask.
            </summary>
        </member>
        <member name="T:FlaxEngine.Localization">
            <summary>
            The language and culture localization manager.
            </summary>
        </member>
        <member name="E:FlaxEngine.Localization.LocalizationChanged">
            <summary>
            Occurs when current culture or language gets changed. Can be used to refresh UI to reflect language changes.
            </summary>
        </member>
        <member name="P:FlaxEngine.Localization.CurrentCulture">
            <summary>
            Gets or sets the current culture (date, time, currency and values formatting locale).
            </summary>
        </member>
        <member name="P:FlaxEngine.Localization.CurrentLanguage">
            <summary>
            Gets or sets the current language (text display locale).
            </summary>
        </member>
        <member name="M:FlaxEngine.Localization.SetCurrentLanguageCulture(System.Globalization.CultureInfo)">
            <summary>
            Sets both the current language (text display locale) and the current culture (date, time, currency and values formatting locale) at once.
            </summary>
        </member>
        <member name="M:FlaxEngine.Localization.GetString(System.String,System.String)">
            <summary>
            Gets the localized string for the current language by using string id lookup.
            </summary>
            <param name="id">The message identifier.</param>
            <param name="fallback">The optional fallback string value to use if localized string is missing.</param>
            <returns>The localized text.</returns>
        </member>
        <member name="M:FlaxEngine.Localization.GetPluralString(System.String,System.Int32,System.String)">
            <summary>
            Gets the localized plural string for the current language by using string id lookup.
            </summary>
            <param name="id">The message identifier.</param>
            <param name="n">The value count for plural message selection.</param>
            <param name="fallback">The optional fallback string value to use if localized string is missing.</param>
            <returns>The localized text.</returns>
        </member>
        <member name="M:FlaxEngine.Localization.NewCulture(System.String)">
            <summary>
            Creates new culture.
            </summary>
            <param name="name">The name (eg. en, pl-PL).</param>
            <returns>The culture.</returns>
        </member>
        <member name="T:FlaxEngine.LocalizedString">
            <summary>
            The string container that supports using localized text.
            </summary>
        </member>
        <member name="M:FlaxEngine.LocalizedString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.LocalizedString"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.LocalizedString.Id">
            <summary>
            The localized string identifier. Used to lookup text value for a current language (via <see cref="M:FlaxEngine.Localization.GetString(System.String,System.String)"/>).
            </summary>
        </member>
        <member name="F:FlaxEngine.LocalizedString.Value">
            <summary>
            The overriden string value to use. If empty, the localized string will be used.
            </summary>
        </member>
        <member name="F:FlaxEngine.LocalizedString.Empty">
            <summary>
            Empty string without localization.
            </summary>
        </member>
        <member name="M:FlaxEngine.LocalizedString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.LocalizedString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEngine.LocalizedString.ToStringPlural(System.Int32)">
            <summary>
            Gets the localized plural string for the current language by using string id lookup.
            </summary>
            <param name="n">The value count for plural message selection.</param>
            <returns>The localized text.</returns>
        </member>
        <member name="M:FlaxEngine.LocalizedString.op_Implicit(FlaxEngine.LocalizedString)~System.String">
            <summary>
            Implicit converter of <see cref="T:FlaxEngine.LocalizedString"/> into <see cref="T:System.String"/>.
            </summary>
            <param name="str">The localized string.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:FlaxEngine.LocalizedString.op_Implicit(System.String)~FlaxEngine.LocalizedString">
            <summary>
            Implicit converter of <see cref="T:System.String"/> into <see cref="T:FlaxEngine.LocalizedString"/>.
            </summary>
            <param name="str">The string.</param>
            <returns>The localized string.</returns>
        </member>
        <member name="M:FlaxEngine.LocalizedString.op_Equality(FlaxEngine.LocalizedString,FlaxEngine.LocalizedString)">
            <summary>
            Compares two localized strings.
            </summary>
            <param name="left">The lft string.</param>
            <param name="right">The right string.</param>
            <returns>True if both values are equal, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.LocalizedString.op_Inequality(FlaxEngine.LocalizedString,FlaxEngine.LocalizedString)">
            <summary>
            Compares two localized strings.
            </summary>
            <param name="left">The lft string.</param>
            <param name="right">The right string.</param>
            <returns>True if both values are not equal, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.LocalizedString.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.LocalizedString.Equals(FlaxEngine.LocalizedString)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.LocalizedString.Equals(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.LocalizedString.CompareTo(FlaxEngine.LocalizedString)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.LocalizedString.CompareTo(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.LocalizedString.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.LocalizedString.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.LocalizedString.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.LocalizedStringTable">
            <summary>
            Contains localized strings table for a given culture.
            </summary>
            <seealso cref="T:FlaxEngine.JsonAssetBase" />
        </member>
        <member name="M:FlaxEngine.LocalizedStringTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.LocalizedStringTable"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.LocalizedStringTable.Locale">
            <summary>
            The locale of the localized string table (eg. pl-PL).
            </summary>
        </member>
        <member name="P:FlaxEngine.LocalizedStringTable.FallbackTable">
            <summary>
            The fallback language table to use for missing keys. Eg. table for 'en-GB' can point to 'en' as a fallback to prevent problem of missing localized strings.
            </summary>
        </member>
        <member name="P:FlaxEngine.LocalizedStringTable.Entries">
            <summary>
            The string table. Maps the message id into the localized text. For plural messages the list contains separate items for value numbers.
            </summary>
        </member>
        <member name="M:FlaxEngine.LocalizedStringTable.AddString(System.String,System.String)">
            <summary>
            Adds the localized string to the table.
            </summary>
            <param name="id">The message id. Used for lookups.</param>
            <param name="value">The localized text.</param>
        </member>
        <member name="M:FlaxEngine.LocalizedStringTable.AddPluralString(System.String,System.String,System.Int32)">
            <summary>
            Adds the localized plural string to the table.
            </summary>
            <param name="id">The message id. Used for lookups.</param>
            <param name="value">The localized text.</param>
            <param name="n">The plural value (0, 1, 2..).</param>
        </member>
        <member name="M:FlaxEngine.LocalizedStringTable.GetString(System.String)">
            <summary>
            Gets the localized string by using string id lookup. Uses fallback table if text is not included in this table.
            </summary>
            <param name="id">The message identifier.</param>
            <returns>The localized text.</returns>
        </member>
        <member name="M:FlaxEngine.LocalizedStringTable.GetPluralString(System.String,System.Int32)">
            <summary>
            Gets the localized plural string by using string id lookup. Uses fallback table if text is not included in this table.
            </summary>
            <param name="id">The message identifier.</param>
            <param name="n">The value count for plural message selection.</param>
            <returns>The localized text.</returns>
        </member>
        <member name="T:FlaxEngine.Navigation">
            <summary>
            The navigation service used for path finding and agents navigation system.
            </summary>
        </member>
        <member name="P:FlaxEngine.Navigation.IsBuildingNavMesh">
            <summary>
            Returns true if navigation system is during navmesh building (any request is valid or async task active).
            </summary>
        </member>
        <member name="P:FlaxEngine.Navigation.NavMeshBuildingProgress">
            <summary>
            Gets the navmesh building progress (normalized to range 0-1).
            </summary>
        </member>
        <member name="M:FlaxEngine.Navigation.FindDistanceToWall(FlaxEngine.Vector3,FlaxEngine.NavMeshHit@,System.Single)">
            <summary>
            Finds the distance from the specified start position to the nearest polygon wall.
            </summary>
            <param name="startPosition">The start position.</param>
            <param name="hitInfo">The result hit information. Valid only when query succeed.</param>
            <param name="maxDistance">The maximum distance to search for wall (search radius).</param>
            <returns>True if ray hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Navigation.FindPath(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3[]@)">
            <summary>
            Finds the path between the two positions presented as a list of waypoints stored in the corners array.
            </summary>
            <param name="startPosition">The start position.</param>
            <param name="endPosition">The end position.</param>
            <param name="resultPath">The result path.</param>
            <returns>True if found valid path between given two points (it may be partial), otherwise false if failed.</returns>
        </member>
        <member name="M:FlaxEngine.Navigation.TestPath(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Tests the path between the two positions (non-partial).
            </summary>
            <param name="startPosition">The start position.</param>
            <param name="endPosition">The end position.</param>
            <returns>True if found valid path between given two points, otherwise false if failed.</returns>
        </member>
        <member name="M:FlaxEngine.Navigation.ProjectPoint(FlaxEngine.Vector3,FlaxEngine.Vector3@)">
            <summary>
            Projects the point to nav mesh surface (finds the nearest polygon).
            </summary>
            <param name="point">The source point.</param>
            <param name="result">The result position on the navmesh (valid only if method returns true).</param>
            <returns>True if found valid location on the navmesh, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Navigation.FindRandomPoint(FlaxEngine.Vector3@)">
            <summary>
            Finds random location on nav mesh.
            </summary>
            <param name="result">The result position on the navmesh (valid only if method returns true).</param>
            <returns>True if found valid location on the navmesh, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Navigation.FindRandomPointAroundCircle(FlaxEngine.Vector3,System.Single,FlaxEngine.Vector3@)">
            <summary>
            Finds random location on nav mesh within the reach of specified location.
            </summary>
            <param name="center">The source point to find random location around it.</param>
            <param name="radius">The search distance for a random point. Maximum distance for a result point from the center of the circle.</param>
            <param name="result">The result position on the navmesh (valid only if method returns true).</param>
            <returns>True if found valid location on the navmesh, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Navigation.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.NavMeshHit@)">
            <summary>
            Casts a 'walkability' ray along the surface of the navigation mesh from the start position toward the end position.
            </summary>
            <param name="startPosition">The start position.</param>
            <param name="endPosition">The end position.</param>
            <param name="hitInfo">The result hit information. Valid only when query succeed.</param>
            <returns>True if ray hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Navigation.BuildNavMesh(FlaxEngine.Scene,System.Single)">
            <summary>
            Builds the Nav Mesh for the given scene (discards all its tiles).
            </summary>
            <remarks>
            Requests are enqueued till the next game scripts update. Actual navmesh building in done via Thread Pool tasks in a background to prevent game thread stalls.
            </remarks>
            <param name="scene">The scene.</param>
            <param name="timeoutMs">The timeout to wait before building Nav Mesh (in milliseconds).</param>
        </member>
        <member name="M:FlaxEngine.Navigation.BuildNavMesh(FlaxEngine.Scene,FlaxEngine.BoundingBox,System.Single)">
            <summary>
            Builds the Nav Mesh for the given scene (builds only the tiles overlapping the given bounding box).
            </summary>
            <remarks>
            Requests are enqueued till the next game scripts update. Actual navmesh building in done via Thread Pool tasks in a background to prevent game thread stalls.
            </remarks>
            <param name="scene">The scene.</param>
            <param name="dirtyBounds">The bounds in world-space to build overlapping tiles.</param>
            <param name="timeoutMs">The timeout to wait before building Nav Mesh (in milliseconds).</param>
        </member>
        <member name="T:FlaxEngine.NavAgentProperties">
            <summary>
            The navigation system agent properties container for navmesh building and querying.
            </summary>
        </member>
        <member name="F:FlaxEngine.NavAgentProperties.Radius">
            <summary>
            The radius of the agent used for navigation. Agents can't pass through gaps of less than twice the radius.
            </summary>
        </member>
        <member name="F:FlaxEngine.NavAgentProperties.Height">
            <summary>
            The height of the agent used for navigation. Agents can't enter areas with ceilings lower than this value.
            </summary>
        </member>
        <member name="F:FlaxEngine.NavAgentProperties.StepHeight">
            <summary>
            The step height used for navigation. Defines the maximum ledge height that is considered to still be traversable by the agent.
            </summary>
        </member>
        <member name="F:FlaxEngine.NavAgentProperties.MaxSlopeAngle">
            <summary>
            The maximum slope (in degrees) that is considered walkable for navigation. Agents can't go up or down slopes higher than this value.
            </summary>
        </member>
        <member name="M:FlaxEngine.NavAgentProperties.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.NavMeshProperties">
            <summary>
            The navigation mesh properties container for navmesh building.
            </summary>
        </member>
        <member name="F:FlaxEngine.NavMeshProperties.Name">
            <summary>
            The navmesh type name. Identifies different types of the navmeshes, used to sync navmesh properties with settings asset.
            </summary>
        </member>
        <member name="F:FlaxEngine.NavMeshProperties.Color">
            <summary>
            The navmesh type color (for debugging).
            </summary>
        </member>
        <member name="F:FlaxEngine.NavMeshProperties.Rotation">
            <summary>
            The navmesh rotation applied to navigation surface. Used during building to the rotate scene geometry and to revert back result during path finding queries. Can be used to generate navmesh on walls.
            </summary>
        </member>
        <member name="F:FlaxEngine.NavMeshProperties.Agent">
            <summary>
            The properties of the agent used to generate walkable navigation surface.
            </summary>
        </member>
        <member name="F:FlaxEngine.NavMeshProperties.DefaultQueryExtent">
            <summary>
            The default extents for the nav queries that defines the search distance along each axis (x, y, z). Smaller values prevent queries from snapping to too far locations.
            </summary>
        </member>
        <member name="M:FlaxEngine.NavMeshProperties.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.NavAgentMask">
            <summary>
            The navigation system agents selection mask (from navigation system settings). Uses 1 bit per agent type (up to 32 agents).
            </summary>
        </member>
        <member name="F:FlaxEngine.NavAgentMask.Mask">
            <summary>
            The agents selection mask.
            </summary>
        </member>
        <member name="T:FlaxEngine.NavMeshHit">
            <summary>
            The result information for navigation mesh queries.
            </summary>
        </member>
        <member name="F:FlaxEngine.NavMeshHit.Position">
            <summary>
            The hit point position.
            </summary>
        </member>
        <member name="F:FlaxEngine.NavMeshHit.Distance">
            <summary>
            The distance to hit point (from the query origin).
            </summary>
        </member>
        <member name="F:FlaxEngine.NavMeshHit.Normal">
            <summary>
            The hit point normal vector.
            </summary>
        </member>
        <member name="T:FlaxEngine.NavAreaProperties">
            <summary>
            The navigation area properties container for navmesh building and navigation runtime.
            </summary>
        </member>
        <member name="F:FlaxEngine.NavAreaProperties.Name">
            <summary>
            The area type name. Identifies different types of the areas.
            </summary>
        </member>
        <member name="F:FlaxEngine.NavAreaProperties.Color">
            <summary>
            The area type color (for debugging). Alpha channel is used to blend with navmesh color (alpha 0 to use navmesh color only).
            </summary>
        </member>
        <member name="F:FlaxEngine.NavAreaProperties.Id">
            <summary>
            The area id. It must be unique for the project. Valid range 0-63. Value 0 is reserved for Null areas (empty, non-navigable areas).
            </summary>
        </member>
        <member name="F:FlaxEngine.NavAreaProperties.Cost">
            <summary>
            The cost scale for the area traversal for agents. The higher the cost, the less likely agent wil choose the path that goes over it. For instance, areas that are harder to move like sand should have higher cost for proper path finding.
            </summary>
        </member>
        <member name="T:FlaxEngine.NavLink">
            <summary>
            The off-mesh link objects used to define a custom point-to-point edge within the navigation graph.
            An off-mesh connection is a user defined traversable connection made up to two vertices, at least one of which resides within a navigation mesh polygon allowing movement outside the navigation mesh.
            </summary>
        </member>
        <member name="M:FlaxEngine.NavLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.NavLink"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.NavLink.Start">
            <summary>
            The start location which transform is representing link start position. It is defined in local-space of the actor.
            </summary>
        </member>
        <member name="P:FlaxEngine.NavLink.End">
            <summary>
            The end location which transform is representing link end position. It is defined in local-space of the actor.
            </summary>
        </member>
        <member name="P:FlaxEngine.NavLink.Radius">
            <summary>
            The maximum radius of the agents that can go through the link.
            </summary>
        </member>
        <member name="P:FlaxEngine.NavLink.BiDirectional">
            <summary>
            Flag used to define links that can be traversed in both directions. When set to false the link can only be traversed from start to end.
            </summary>
        </member>
        <member name="T:FlaxEngine.NavMesh">
            <summary>
            The navigation mesh actor that holds a navigation data for a scene.
            </summary>
        </member>
        <member name="M:FlaxEngine.NavMesh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.NavMesh"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.NavMesh.Properties">
            <summary>
            The navigation mesh properties.
            </summary>
        </member>
        <member name="T:FlaxEngine.NavMeshBoundsVolume">
            <summary>
            A special type of volume that defines the area of the scene in which navigation meshes are generated.
            </summary>
        </member>
        <member name="M:FlaxEngine.NavMeshBoundsVolume.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.NavMeshBoundsVolume"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.NavMeshBoundsVolume.AgentsMask">
            <summary>
            The agent types used by this navmesh bounds volume (from navigation settings). Can be used to generate navmesh for a certain set of agents.
            </summary>
        </member>
        <member name="T:FlaxEngine.NavModifierVolume">
            <summary>
            A special type of volume that defines the area of the scene in which navigation is restricted (eg. higher traversal cost or dynamic obstacle block).
            </summary>
        </member>
        <member name="M:FlaxEngine.NavModifierVolume.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.NavModifierVolume"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.NavModifierVolume.AgentsMask">
            <summary>
            The agent types used by this navmesh modifier volume (from navigation settings). Can be used to adjust navmesh for a certain set of agents.
            </summary>
        </member>
        <member name="P:FlaxEngine.NavModifierVolume.AreaName">
            <summary>
            The name of the nav area to apply within the modifiers volume. Nav area properties are picked from the Navigation Settings asset.
            </summary>
        </member>
        <member name="T:FlaxEngine.Networking.ENetDriver">
            <summary>
            Low-level network transport interface implementation based on ENet library.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.ENetDriver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Networking.ENetDriver"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.ENetDriver.DriverName">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Networking.ENetDriver.Initialize(FlaxEngine.Networking.NetworkPeer,FlaxEngine.Networking.NetworkConfig)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Networking.ENetDriver.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Networking.ENetDriver.Listen">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Networking.ENetDriver.Connect">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Networking.ENetDriver.Disconnect">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Networking.ENetDriver.Disconnect(FlaxEngine.Networking.NetworkConnection)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Networking.ENetDriver.PopEvent(FlaxEngine.Networking.NetworkEvent*)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Networking.ENetDriver.SendMessage(FlaxEngine.Networking.NetworkChannelType,FlaxEngine.Networking.NetworkMessage)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Networking.ENetDriver.SendMessage(FlaxEngine.Networking.NetworkChannelType,FlaxEngine.Networking.NetworkMessage,FlaxEngine.Networking.NetworkConnection)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Networking.ENetDriver.SendMessage(FlaxEngine.Networking.NetworkChannelType,FlaxEngine.Networking.NetworkMessage,FlaxEngine.Networking.NetworkConnection[])">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Networking.INetworkDriver">
            <summary>
            Basic interface for the low-level network transport/driver.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.INetworkDriver.DriverName">
            <summary>
            Return name of this network driver implementation.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.INetworkDriver.Initialize(FlaxEngine.Networking.NetworkPeer,FlaxEngine.Networking.NetworkConfig)">
            <summary>
            Initializes the instance of this network driver using given configuration.
            </summary>
            <param name="host">The peer that this driver has been assigned to.</param>
            <param name="config">The network config to use to configure this driver.</param>
            <returns>True if failed to initialize network driver, false otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Networking.INetworkDriver.Dispose">
            <summary>
            Disposes this driver making it no longer usable.
            Reserved for resource deallocation etc.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.INetworkDriver.Listen">
            <summary>
            Starts listening for incoming connections.
            Once this is called, this driver becomes a server.
            </summary>
            <returns>True when succeeded.</returns>
        </member>
        <member name="M:FlaxEngine.Networking.INetworkDriver.Connect">
            <summary>
            Starts connection handshake with the end point specified in the <seealso cref="T:FlaxEngine.Networking.NetworkConfig"/> structure.
            Once this is called, this driver becomes a client.
            </summary>
            <returns>True when succeeded.</returns>
        </member>
        <member name="M:FlaxEngine.Networking.INetworkDriver.Disconnect">
            <summary>
            Disconnects from the server.
            </summary>
            <remarks>Can be used only by the client!</remarks>
        </member>
        <member name="M:FlaxEngine.Networking.INetworkDriver.Disconnect(FlaxEngine.Networking.NetworkConnection)">
            <summary>
            Disconnects given connection from the server.
            </summary>
            <remarks>Can be used only by the server!</remarks>
        </member>
        <member name="M:FlaxEngine.Networking.INetworkDriver.PopEvent(FlaxEngine.Networking.NetworkEvent*)">
            <summary>
            Tries to pop an network event from the queue.
            </summary>
            <param name="eventPtr">The pointer to event structure.</param>
            <returns>True when succeeded and the event can be processed.</returns>
        </member>
        <member name="M:FlaxEngine.Networking.INetworkDriver.SendMessage(FlaxEngine.Networking.NetworkChannelType,FlaxEngine.Networking.NetworkMessage)">
            <summary>
            Sends given message over specified channel to the server.
            </summary>
            <param name="channelType">The channel to send the message over.</param>
            <param name="message">The message.</param>
            <remarks>Can be used only by the client!</remarks>
            <remarks>
            Do not recycle the message after calling this.
            This function automatically recycles the message.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Networking.INetworkDriver.SendMessage(FlaxEngine.Networking.NetworkChannelType,FlaxEngine.Networking.NetworkMessage,FlaxEngine.Networking.NetworkConnection)">
            <summary>
            Sends given message over specified channel to the given client connection (target).
            </summary>
            <param name="channelType">The channel to send the message over.</param>
            <param name="message">The message.</param>
            <param name="target">The client connection to send the message to.</param>
            <remarks>Can be used only by the server!</remarks>
            <remarks>
            Do not recycle the message after calling this.
            This function automatically recycles the message.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Networking.INetworkDriver.SendMessage(FlaxEngine.Networking.NetworkChannelType,FlaxEngine.Networking.NetworkMessage,FlaxEngine.Networking.NetworkConnection[])">
            <summary>
            Sends given message over specified channel to the given client connection (target).
            </summary>
            <param name="channelType">The channel to send the message over.</param>
            <param name="message">The message.</param>
            <param name="targets">The connections list to send the message to.</param>
            <remarks>Can be used only by the server!</remarks>
            <remarks>
            Do not recycle the message after calling this.
            This function automatically recycles the message.
            </remarks>
        </member>
        <member name="T:FlaxEngine.Networking.NetworkChannelType">
            <summary>
            The low-level network channel type for message sending.
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkChannelType.None">
            <summary>
            Invalid channel type.
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkChannelType.Unreliable">
            <summary>
            Unreliable channel type.
            Messages can be lost or arrive out-of-order.
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkChannelType.UnreliableOrdered">
            <summary>
            Unreliable-ordered channel type.
            Messages can be lost but always arrive in order.
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkChannelType.Reliable">
            <summary>
            Reliable channel type.
            Messages won't be lost but may arrive out-of-order.
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkChannelType.ReliableOrdered">
            <summary>
            Reliable-ordered channel type.
            Messages won't be lost and always arrive in order.
            </summary>
        </member>
        <member name="T:FlaxEngine.Networking.NetworkDriverType">
            <summary>
            Network driver implementations enum.
            [Deprecated in v1.3]
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkDriverType.Undefined">
            <summary>
            Invalid network driver implementation.
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkDriverType.ENet">
            <summary>
            ENet library based network driver implementation.
            </summary>
        </member>
        <member name="T:FlaxEngine.Networking.NetworkConfig">
            <summary>
            Low-level network configuration structure. Provides settings for the network driver and all internal components.
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkConfig.NetworkDriverType">
            <summary>
            The network driver that will be used to create the peer.
            To allow two peers to connect, they must use the same host.
            [Deprecated in v1.3]
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkConfig.NetworkDriver">
            <summary>
            The network driver instance (implements INetworkDriver) that will be used to create and manage the peer, send and receive messages.
            </summary>
            <remarks>Object is managed by the created network peer (will be deleted on peer shutdown).</remarks>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkConfig.ConnectionsLimit">
            <summary>
            The upper limit on how many peers can join when we're listening.
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkConfig.Address">
            <summary>
            Address used to connect to or listen at.
            </summary>
            <remarks>Set it to "any" when you want to listen at all available addresses.</remarks>
            <remarks>Only IPv4 is supported.</remarks>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkConfig.Port">
            <summary>
            The port to connect to or listen at.
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkConfig.MessageSize">
            <summary>
            The size of a message buffer in bytes.
            Should be lower than the MTU (maximal transmission unit) - typically 1500 bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkConfig.MessagePoolSize">
            <summary>
            The amount of pooled messages that can be used at once (receiving and sending!).
            </summary>
            <remarks>
            Creating more messages than this limit will result in a crash!
            This should be tweaked manually to fit the needs (adjusting this value will increase/decrease memory usage)!
            </remarks>
        </member>
        <member name="T:FlaxEngine.Networking.NetworkConnection">
            <summary>
            Network connection structure - used to identify connected peers when we're listening.
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkConnection.ConnectionId">
            <summary>
            The identifier of the connection.
            </summary>
            <remarks>Used by network driver implementations.</remarks>
        </member>
        <member name="T:FlaxEngine.Networking.NetworkEventType">
            <summary>
            Network event type enum contains all possible events that can be returned by PopEvent function.
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkEventType.Undefined">
            <summary>
            Invalid network event type.
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkEventType.Connected">
            <summary>
            Event "connected" - client connected to our server or we've connected to the server.
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkEventType.Disconnected">
            <summary>
            Event "disconnected" - client disconnected from our server or we've been kicked from the server.
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkEventType.Timeout">
            <summary>
            Event "disconnected" - client got a timeout from our server or we've list the connection to the server.
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkEventType.Message">
            <summary>
            Event "message" - message received from some client or the server.
            </summary>
        </member>
        <member name="T:FlaxEngine.Networking.NetworkEvent">
            <summary>
            Network event structure that wraps all data needed to identify and process it.
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkEvent.EventType">
            <summary>
            The type of the received event.
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkEvent.Message">
            <summary>
            The message when this event is an "message" event - not valid in any other cases.
            If this is an message-event, make sure to return the message using RecycleMessage function of the peer after processing it!
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkEvent.Sender">
            <summary>
            The connected of the client that has sent message, connected, disconnected or got a timeout.
            </summary>
            <remarks>Only valid when event has been received on server-peer.</remarks>
        </member>
        <member name="T:FlaxEngine.Networking.NetworkMessage">
            <summary>
            Network message structure. Provides raw data writing and reading to the message buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkMessage.Buffer">
            <summary>
            The raw message buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkMessage.MessageId">
            <summary>
            The unique, internal message identifier.
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkMessage.BufferSize">
            <summary>
            The size in bytes of the buffer that this message has.
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkMessage.Length">
            <summary>
            The length in bytes of this message.
            </summary>
        </member>
        <member name="F:FlaxEngine.Networking.NetworkMessage.Position">
            <summary>
            The position in bytes in buffer where the next read/write will occur.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.WriteBytes(System.Byte*,System.Int32)">
            <summary>
            Writes raw bytes into the message.
            </summary>
            <param name="bytes">The bytes that will be written.</param>
            <param name="length">The amount of bytes to write from the bytes pointer.</param>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.ReadBytes(System.Byte*,System.Int32)">
            <summary>
            Reads raw bytes from the message into the given byte array.
            </summary>
            <param name="buffer">
            The buffer pointer that will be used to store the bytes.
            Should be of the same length as length or longer.
            </param>
            <param name="length">The minimal amount of bytes that the buffer contains.</param>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.WriteBytes(System.Byte[],System.Int32)">
            <summary>
            Writes raw bytes into the message.
            </summary>
            <param name="bytes">The bytes that will be written.</param>
            <param name="length">The amount of bytes to write from the bytes array.</param>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.ReadBytes(System.Byte[],System.Int32)">
            <summary>
            Reads raw bytes from the message into the given byte array.
            </summary>
            <param name="buffer">
            The buffer that will be used to store the bytes.
            Should be of the same length as length or longer.
            </param>
            <param name="length">The minimal amount of bytes that the buffer contains.</param>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.WriteInt64(System.Int64)">
            <summary>
            Writes data of type <see cref="T:System.Int64"/> into the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.ReadInt64">
            <summary>
            Reads and returns data of type <see cref="T:System.Int64"/> from the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.WriteInt32(System.Int32)">
            <summary>
            Writes data of type <see cref="T:System.Int32"/> into the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.ReadInt32">
            <summary>
            Reads and returns data of type <see cref="T:System.Int32"/> from the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.WriteInt16(System.Int16)">
            <summary>
            Writes data of type <see cref="T:System.Int16"/> into the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.ReadInt16">
            <summary>
            Reads and returns data of type <see cref="T:System.Int16"/> from the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.WriteSByte(System.SByte)">
            <summary>
            Writes data of type <see cref="T:System.SByte"/> into the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.ReadSByte">
            <summary>
            Reads and returns data of type <see cref="T:System.SByte"/> from the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.WriteUInt64(System.UInt64)">
            <summary>
            Writes data of type <see cref="T:System.UInt64"/> into the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.ReadUInt64">
            <summary>
            Reads and returns data of type <see cref="T:System.UInt64"/> from the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.WriteUInt32(System.UInt32)">
            <summary>
            Writes data of type <see cref="T:System.UInt32"/> into the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.ReadUInt32">
            <summary>
            Reads and returns data of type <see cref="T:System.UInt32"/> from the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.WriteUInt16(System.UInt16)">
            <summary>
            Writes data of type <see cref="T:System.UInt16"/> into the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.ReadUInt16">
            <summary>
            Reads and returns data of type <see cref="T:System.UInt16"/> from the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.WriteByte(System.Byte)">
            <summary>
            Writes data of type <see cref="T:System.Byte"/> into the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.ReadByte">
            <summary>
            Reads and returns data of type <see cref="T:System.Byte"/> from the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.WriteSingle(System.Single)">
            <summary>
            Writes data of type <see cref="T:System.Single"/> into the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.ReadSingle">
            <summary>
            Reads and returns data of type <see cref="T:System.Single"/> from the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.WriteDouble(System.Double)">
            <summary>
            Writes data of type <see cref="T:System.Double"/> into the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.ReadDouble">
            <summary>
            Reads and returns data of type <see cref="T:System.Double"/> from the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.WriteString(System.String)">
            <summary>
            Writes data of type <see cref="T:System.String"/> into the message. UTF-16 encoded.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.ReadString">
            <summary>
            Reads and returns data of type <see cref="T:System.String"/> from the message. UTF-16 encoded.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.WriteGuid(System.Guid)">
            <summary>
            Writes data of type <see cref="T:System.Guid"/> into the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.ReadGuid">
            <summary>
            Reads and returns data of type <see cref="T:System.Guid"/> from the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.WriteVector2(FlaxEngine.Vector2)">
            <summary>
            Writes data of type <see cref="T:FlaxEngine.Vector2"/> into the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.ReadVector2">
            <summary>
            Reads and returns data of type <see cref="T:FlaxEngine.Vector2"/> from the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.WriteVector3(FlaxEngine.Vector3)">
            <summary>
            Writes data of type <see cref="T:FlaxEngine.Vector3"/> into the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.ReadVector3">
            <summary>
            Reads and returns data of type <see cref="T:FlaxEngine.Vector3"/> from the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.WriteVector4(FlaxEngine.Vector4)">
            <summary>
            Writes data of type <see cref="T:FlaxEngine.Vector4"/> into the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.ReadVector4">
            <summary>
            Reads and returns data of type <see cref="T:FlaxEngine.Vector4"/> from the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.WriteQuaternion(FlaxEngine.Quaternion)">
            <summary>
            Writes data of type <see cref="T:FlaxEngine.Quaternion"/> into the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.ReadQuaternion">
            <summary>
            Reads and returns data of type <see cref="T:FlaxEngine.Quaternion"/> from the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.WriteBoolean(System.Boolean)">
            <summary>
            Writes data of type <see cref="T:System.Boolean"/> into the message.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkMessage.ReadBoolean">
            <summary>
            Reads and returns data of type <see cref="T:System.Boolean"/> from the message.
            </summary>
        </member>
        <member name="T:FlaxEngine.Networking.NetworkPeer">
            <summary>
            Low-level network peer class. Provides server-client communication functions, message processing and sending.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkPeer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Networking.NetworkPeer"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkPeer.Listen">
            <summary>
            Starts listening for incoming connections.
            Once this is called, this peer becomes a server.
            </summary>
            <returns>True when succeeded.</returns>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkPeer.Connect">
            <summary>
            Starts connection handshake with the end point specified in the <seealso cref="T:FlaxEngine.Networking.NetworkConfig"/> structure.
            Once this is called, this peer becomes a client.
            </summary>
            <returns>True when succeeded.</returns>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkPeer.Disconnect">
            <summary>
            Disconnects from the server.
            </summary>
            <remarks>Can be used only by the client!</remarks>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkPeer.Disconnect(FlaxEngine.Networking.NetworkConnection)">
            <summary>
            Disconnects given connection from the server.
            </summary>
            <remarks>Can be used only by the server!</remarks>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkPeer.PopEvent(FlaxEngine.Networking.NetworkEvent@)">
            <summary>
            Tries to pop an network event from the queue.
            </summary>
            <param name="eventRef">The reference to event structure.</param>
            <returns>True when succeeded and the event can be processed.</returns>
            <remarks>If this returns message event, make sure to recycle the message using <see cref="M:FlaxEngine.Networking.NetworkPeer.RecycleMessage(FlaxEngine.Networking.NetworkMessage)"/> function after processing it!</remarks>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkPeer.CreateMessage">
            <summary>
            Acquires new message from the pool.
            Cannot acquire more messages than the limit specified in the <seealso cref="T:FlaxEngine.Networking.NetworkConfig"/> structure.
            </summary>
            <returns>The acquired message.</returns>
            <remarks>Make sure to recycle the message to this peer once it is no longer needed!</remarks>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkPeer.RecycleMessage(FlaxEngine.Networking.NetworkMessage)">
            <summary>
            Returns given message to the pool.
            </summary>
            <remarks>Make sure that this message belongs to the peer and has not been recycled already (debug build checks for this)!</remarks>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkPeer.BeginSendMessage">
            <summary>
            Acquires new message from the pool and setups it for sending.
            </summary>
            <returns>The acquired message.</returns>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkPeer.AbortSendMessage(FlaxEngine.Networking.NetworkMessage)">
            <summary>
            Aborts given message send. This effectively deinitializes the message and returns it to the pool.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkPeer.EndSendMessage(FlaxEngine.Networking.NetworkChannelType,FlaxEngine.Networking.NetworkMessage)">
            <summary>
            Sends given message over specified channel to the server.
            </summary>
            <param name="channelType">The channel to send the message over.</param>
            <param name="message">The message.</param>
            <remarks>Can be used only by the client!</remarks>
            <remarks>
            Do not recycle the message after calling this.
            This function automatically recycles the message.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkPeer.EndSendMessage(FlaxEngine.Networking.NetworkChannelType,FlaxEngine.Networking.NetworkMessage,FlaxEngine.Networking.NetworkConnection)">
            <summary>
            Sends given message over specified channel to the given client connection (target).
            </summary>
            <param name="channelType">The channel to send the message over.</param>
            <param name="message">The message.</param>
            <param name="target">The client connection to send the message to.</param>
            <remarks>Can be used only by the server!</remarks>
            <remarks>
            Do not recycle the message after calling this.
            This function automatically recycles the message.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkPeer.EndSendMessage(FlaxEngine.Networking.NetworkChannelType,FlaxEngine.Networking.NetworkMessage,FlaxEngine.Networking.NetworkConnection[])">
            <summary>
            Sends given message over specified channel to the given client connection (target).
            </summary>
            <param name="channelType">The channel to send the message over.</param>
            <param name="message">The message.</param>
            <param name="targets">The connections list to send the message to.</param>
            <remarks>Can be used only by the server!</remarks>
            <remarks>
            Do not recycle the message after calling this.
            This function automatically recycles the message.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkPeer.CreatePeer(FlaxEngine.Networking.NetworkConfig)">
            <summary>
            Creates new peer using given configuration.
            </summary>
            <param name="config">The configuration to create and setup new peer.</param>
            <returns>The peer.</returns>
            <remarks>Peer should be destroyed using <see cref="M:FlaxEngine.Networking.NetworkPeer.ShutdownPeer(FlaxEngine.Networking.NetworkPeer)"/> once it is no longer in use. Returns null if failed to create a peer (eg. config is invalid).</remarks>
        </member>
        <member name="M:FlaxEngine.Networking.NetworkPeer.ShutdownPeer(FlaxEngine.Networking.NetworkPeer)">
            <summary>
            Shutdowns and destroys given peer.
            </summary>
            <param name="peer">The peer to destroy.</param>
        </member>
        <member name="T:FlaxEngine.Online.OnlinePresenceStates">
            <summary>
            Online platform user presence common states.
            </summary>
        </member>
        <member name="F:FlaxEngine.Online.OnlinePresenceStates.Offline">
            <summary>
            User is offline.
            </summary>
        </member>
        <member name="F:FlaxEngine.Online.OnlinePresenceStates.Online">
            <summary>
            User is online.
            </summary>
        </member>
        <member name="F:FlaxEngine.Online.OnlinePresenceStates.Busy">
            <summary>
            User is online but busy.
            </summary>
        </member>
        <member name="F:FlaxEngine.Online.OnlinePresenceStates.Away">
            <summary>
            User is online but away (no activity for some time).
            </summary>
        </member>
        <member name="T:FlaxEngine.Online.OnlineUser">
            <summary>
            Online platform user description.
            </summary>
        </member>
        <member name="F:FlaxEngine.Online.OnlineUser.Id">
            <summary>
            Unique player identifier. Specific for a certain online platform.
            </summary>
        </member>
        <member name="F:FlaxEngine.Online.OnlineUser.Name">
            <summary>
            The player name.
            </summary>
        </member>
        <member name="F:FlaxEngine.Online.OnlineUser.PresenceState">
            <summary>
            The current player presence state.
            </summary>
        </member>
        <member name="T:FlaxEngine.Online.OnlineAchievement">
            <summary>
            Online platform achievement description.
            </summary>
        </member>
        <member name="F:FlaxEngine.Online.OnlineAchievement.Identifier">
            <summary>
            Unique achievement identifier. Specific for a certain online platform.
            </summary>
        </member>
        <member name="F:FlaxEngine.Online.OnlineAchievement.Name">
            <summary>
            Achievement name. Specific for a game.
            </summary>
        </member>
        <member name="F:FlaxEngine.Online.OnlineAchievement.Title">
            <summary>
            The achievement title text.
            </summary>
        </member>
        <member name="F:FlaxEngine.Online.OnlineAchievement.Description">
            <summary>
            The achievement description text.
            </summary>
        </member>
        <member name="F:FlaxEngine.Online.OnlineAchievement.IsHidden">
            <summary>
            True if achievement is hidden from user (eg. can see it once it's unlocked).
            </summary>
        </member>
        <member name="F:FlaxEngine.Online.OnlineAchievement.Progress">
            <summary>
            Achievement unlock percentage progress (normalized to 0-100 range).
            </summary>
        </member>
        <member name="F:FlaxEngine.Online.OnlineAchievement.UnlockTime">
            <summary>
            Date and time at which player unlocked the achievement.
            </summary>
        </member>
        <member name="T:FlaxEngine.Online.IOnlinePlatform">
            <summary>
            Interface for online platform providers for communicating with various multiplayer services such as player info, achievements, game lobby or in-game store.
            </summary>
        </member>
        <member name="M:FlaxEngine.Online.IOnlinePlatform.Initialize">
            <summary>
            Initializes the online platform services.
            </summary>
            <remarks>Called only by Online system.</remarks>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Online.IOnlinePlatform.Deinitialize">
            <summary>
            Shutdowns the online platform services.
            </summary>
            <remarks>Called only by Online system. Can be used to destroy the object.</remarks>
        </member>
        <member name="M:FlaxEngine.Online.IOnlinePlatform.UserLogin(FlaxEngine.User)">
            <summary>
            Logins the local user into the online platform.
            </summary>
            <param name="localUser">The local user (null if use default one).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Online.IOnlinePlatform.UserLogout(FlaxEngine.User)">
            <summary>
            Logout the local user from the online platform.
            </summary>
            <param name="localUser">The local user (null if use default one).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Online.IOnlinePlatform.GetUserLoggedIn(FlaxEngine.User)">
            <summary>
            Checks if the local user is logged in.
            </summary>
            <param name="localUser">The local user (null if use default one).</param>
            <returns>True if user is logged, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Online.IOnlinePlatform.GetUser(FlaxEngine.Online.OnlineUser@,FlaxEngine.User)">
            <summary>
            Gets the player from the online platform.
            </summary>
            <param name="user">The local player user info.</param>
            <param name="localUser">The local user (null if use default one).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Online.IOnlinePlatform.GetFriends(FlaxEngine.Online.OnlineUser[]@,FlaxEngine.User)">
            <summary>
            Gets the list of friends of the user from the online platform.
            </summary>
            <param name="friends">The result local player friends user infos.</param>
            <param name="localUser">The local user (null if use default one).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Online.IOnlinePlatform.GetAchievements(FlaxEngine.Online.OnlineAchievement[]@,FlaxEngine.User)">
            <summary>
            Gets the list of all achievements for this game.
            </summary>
            <param name="achievements">The result achievements list</param>
            <param name="localUser">The local user (null if use default one).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Online.IOnlinePlatform.UnlockAchievement(System.String,FlaxEngine.User)">
            <summary>
            Unlocks the achievement.
            </summary>
            <param name="name">The achievement name. Specific for a game.</param>
            <param name="localUser">The local user (null if use default one).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Online.IOnlinePlatform.UnlockAchievementProgress(System.String,System.Single,FlaxEngine.User)">
            <summary>
            Updates the achievement unlocking progress (in range 0-100).
            </summary>
            <param name="name">The achievement name. Specific for a game.</param>
            <param name="progress">The achievement unlock progress (in range 0-100).</param>
            <param name="localUser">The local user (null if use default one).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Online.IOnlinePlatform.ResetAchievements(FlaxEngine.User)">
            <summary>
            Resets the all achievements progress for this game.
            </summary>
            <param name="localUser">The local user (null if use default one).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Online.IOnlinePlatform.GetStat(System.String,System.Single@,FlaxEngine.User)">
            <summary>
            Gets the online statistical value.
            </summary>
            <param name="name">The stat name.</param>
            <param name="value">The result value.</param>
            <param name="localUser">The local user (null if use default one).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Online.IOnlinePlatform.SetStat(System.String,System.Single,FlaxEngine.User)">
            <summary>
            Sets the online statistical value.
            </summary>
            <param name="name">The stat name.</param>
            <param name="value">The value.</param>
            <param name="localUser">The local user (null if use default one).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Online.IOnlinePlatform.GetSaveGame(System.String,System.Byte[]@,FlaxEngine.User)">
            <summary>
            Gets the online savegame data. Returns empty if savegame slot is unused.
            </summary>
            <param name="name">The savegame slot name.</param>
            <param name="data">The result data. Empty or null for unused slot name.</param>
            <param name="localUser">The local user (null if use default one).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Online.IOnlinePlatform.SetSaveGame(System.String,System.Byte[],FlaxEngine.User)">
            <summary>
            Sets the online savegame data.
            </summary>
            <param name="name">The savegame slot name.</param>
            <param name="data">The data. Empty or null to delete slot (or mark as unused).</param>
            <param name="localUser">The local user (null if use default one).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.Online.Online">
            <summary>
            The online system for communicating with various multiplayer services such as player info, achievements, game lobby or in-game store.
            </summary>
        </member>
        <member name="E:FlaxEngine.Online.Online.PlatformChanged">
            <summary>
            Event called when current online platform gets changed.
            </summary>
        </member>
        <member name="P:FlaxEngine.Online.Online.Platform">
            <summary>
            The current online platform.
            </summary>
        </member>
        <member name="M:FlaxEngine.Online.Online.Initialize(FlaxEngine.Online.IOnlinePlatform)">
            <summary>
            Initializes the online system with a given online platform implementation.
            </summary>
            <remarks>Destroys the current platform (in any already in-use).</remarks>
            <param name="platform">The online platform object.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.ParticleEffectParameter">
            <summary>
            Particle system parameter.
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEffectParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.ParticleEffectParameter"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.EmitterIndex">
            <summary>
            Gets the index of the emitter (not the emitter track but the emitter).
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.Emitter">
            <summary>
            Gets the emitter that this parameter belongs to.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.ParamIndex">
            <summary>
            Gets the parameter index (in the emitter parameters list).
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.ParamType">
            <summary>
            Gets the parameter type.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.ParamIdentifier">
            <summary>
            Gets the parameter unique ID.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.TrackName">
            <summary>
            Gets the emitter track name.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.Name">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.IsPublic">
            <summary>
            Gets the parameter flag that indicates whenever it's exposed to public.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.DefaultValue">
            <summary>
            Gets the default value of the parameter (set in particle system asset).
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.DefaultEmitterValue">
            <summary>
            Gets the default value of the parameter (set in particle emitter asset).
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffectParameter.EmitterParameter">
            <summary>
            Gets the particle emitter parameter from the asset (the parameter instanced by this object).
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticleEffect">
            <summary>
            The particle system instance that plays the particles simulation in the game.
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.ParticleEffect"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.ParticleSystem">
            <summary>
            The particle system to play.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.CustomViewRenderTask">
            <summary>
            The custom render task used as a view information source (effect will use its render buffers and rendering resolution information for particles simulation).
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.UpdateMode">
            <summary>
            The particles simulation update mode. Defines how to update particles emitter.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.FixedTimestep">
            <summary>
            The fixed timestep for simulation updates. Used only if UpdateMode is set to FixedTimestep.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.SimulationSpeed">
            <summary>
            The particles simulation speed factor. Scales the particle system update delta time. Can be used to speed up or slow down the particles.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.UseTimeScale">
            <summary>
            Determines whether the particle effect should take into account the global game time scale for simulation updates.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.IsLooping">
            <summary>
            Determines whether the particle effect should loop when it finishes playing.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.UpdateWhenOffscreen">
            <summary>
            If true, the particle simulation will be updated even when an actor cannot be seen by any camera. Otherwise, the simulation will stop running when the actor is off-screen.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.DrawModes">
            <summary>
            The draw passes to use for rendering this object.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.Parameters">
            <summary>
            Gets the effect parameters collection. Those parameters are instanced from the <see cref="P:FlaxEngine.ParticleEffect.ParticleSystem"/> that contains a linear list of emitters and every emitter has a list of own parameters.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.ParametersVersion">
            <summary>
            Gets the effect parameters collection version number. It can be used to track parameters changes that occur when particle system or one of the emitters gets reloaded/edited.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.Time">
            <summary>
            Gets or sets the current time position of the particle system timeline animation playback (in seconds).
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.LastUpdateTime">
            <summary>
            Gets or sets the last game time when particle system was updated. Value -1 indicates no previous updates.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleEffect.ParticlesCount">
            <summary>
            Gets the particles count (total). GPU particles count is read with one frame delay (due to GPU execution).
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEffect.GetParameter(System.String,System.String)">
            <summary>
            Gets the particle parameter.
            </summary>
            <param name="emitterTrackName">The emitter track name (in particle system asset).</param>
            <param name="paramName">The emitter parameter name (in particle emitter asset).</param>
            <returns>The effect parameter or null if failed to find.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEffect.GetParameter(System.String,System.Guid)">
            <summary>
            Gets the particle parameter.
            </summary>
            <param name="emitterTrackName">The emitter track name (in particle system asset).</param>
            <param name="paramId">The emitter parameter ID (in particle emitter asset).</param>
            <returns>The effect parameter or null if failed to find.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEffect.GetParameterValue(System.String,System.String)">
            <summary>
            Gets the particle parameter value.
            </summary>
            <param name="emitterTrackName">The emitter track name (in particle system asset).</param>
            <param name="paramName">The emitter parameter name (in particle emitter asset).</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEffect.SetParameterValue(System.String,System.String,System.Object)">
            <summary>
            Set the particle parameter value.
            </summary>
            <param name="emitterTrackName">The emitter track name (in particle system asset).</param>
            <param name="paramName">The emitter parameter name (in particle emitter asset).</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:FlaxEngine.ParticleEffect.ResetParameters">
            <summary>
            Resets the particle system parameters to the default values from asset.
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEffect.ResetSimulation">
            <summary>
            Resets the particles simulation state (clears the instance state data but preserves the instance parameters values).
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEffect.UpdateSimulation">
            <summary>
            Performs the full particles simulation update (postponed for the next particle manager update).
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticleEffect.SimulationUpdateMode">
            <summary>
            The particles simulation update modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.SimulationUpdateMode.Realtime">
            <summary>
            Use realtime simulation updates. Updates particles during every game logic update.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.SimulationUpdateMode.FixedTimestep">
            <summary>
            Use fixed timestep delta time to update particles simulation with a custom frequency.
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticleEffect.ParameterOverride">
            <summary>
            The particle parameter override data.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterOverride.Track">
            <summary>
            The name of the track that has overriden parameter.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterOverride.Id">
            <summary>
            The overriden parameter id.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleEffect.ParameterOverride.Value">
            <summary>
            The overriden value.
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticleEmitter">
            <summary>
            Binary asset that contains a particle emitter definition graph for running particles simulation on CPU and GPU.
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.ParticleEmitter"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.LoadSurface(System.Boolean)">
            <summary>
            Tries to load surface graph from the asset.
            </summary>
            <param name="createDefaultIfMissing">True if create default surface if missing.</param>
            <returns>The output surface data, or empty if failed to load.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.Spawn(FlaxEngine.Vector3,System.Single,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="position">The spawn position.</param>
            <param name="duration">The effect playback duration (in seconds).</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.Spawn(FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Single,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="position">The spawn position.</param>
            <param name="rotation">The spawn rotation.</param>
            <param name="duration">The effect playback duration (in seconds).</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.Spawn(FlaxEngine.Transform,System.Single,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="transform">The spawn transform.</param>
            <param name="duration">The effect playback duration (in seconds).</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.Spawn(FlaxEngine.Actor,FlaxEngine.Vector3,System.Single,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="parent">The parent actor (can be null to link it to the first loaded scene).</param>
            <param name="position">The spawn position.</param>
            <param name="duration">The effect playback duration (in seconds).</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.Spawn(FlaxEngine.Actor,FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Single,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="parent">The parent actor (can be null to link it to the first loaded scene).</param>
            <param name="position">The spawn position.</param>
            <param name="rotation">The spawn rotation.</param>
            <param name="duration">The effect playback duration (in seconds).</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleEmitter.Spawn(FlaxEngine.Actor,FlaxEngine.Transform,System.Single,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="parent">The parent actor (can be null to link it to the first loaded scene).</param>
            <param name="transform">The spawn transform.</param>
            <param name="duration">The effect playback duration (in seconds).</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="T:FlaxEngine.ParticleEmitterFunction">
            <summary>
            Particle function graph asset that contains reusable part of the particle emitter graph.
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleEmitterFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.ParticleEmitterFunction"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.Particles">
            <summary>
            The particles simulation service.
            </summary>
        </member>
        <member name="P:FlaxEngine.Particles.System">
            <summary>
            The system for Particles update.
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticleSystem">
            <summary>
            Particle system contains a composition of particle emitters and playback information.
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.ParticleSystem"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleSystem.FramesPerSecond">
            <summary>
            The frames amount per second of the timeline animation.
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleSystem.DurationFrames">
            <summary>
            The animation duration (in frames).
            </summary>
        </member>
        <member name="P:FlaxEngine.ParticleSystem.Duration">
            <summary>
            The animation duration (in seconds).
            </summary>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.Init(FlaxEngine.ParticleEmitter,System.Single,System.Single)">
            <summary>
            Initializes the particle system that plays a single particles emitter. This can be used only for virtual assets.
            </summary>
            <param name="emitter">The emitter to playback.</param>
            <param name="duration">The timeline animation duration in seconds.</param>
            <param name="fps">The amount of frames per second of the timeline animation.</param>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.LoadTimeline">
            <summary>
            Loads the serialized timeline data.
            </summary>
            <returns>The output surface data, or empty if failed to load.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.Spawn(FlaxEngine.Vector3,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="position">The spawn position.</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.Spawn(FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="position">The spawn position.</param>
            <param name="rotation">The spawn rotation.</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.Spawn(FlaxEngine.Transform,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="transform">The spawn transform.</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.Spawn(FlaxEngine.Actor,FlaxEngine.Vector3,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="parent">The parent actor (can be null to link it to the first loaded scene).</param>
            <param name="position">The spawn position.</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.Spawn(FlaxEngine.Actor,FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="parent">The parent actor (can be null to link it to the first loaded scene).</param>
            <param name="position">The spawn position.</param>
            <param name="rotation">The spawn rotation.</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="M:FlaxEngine.ParticleSystem.Spawn(FlaxEngine.Actor,FlaxEngine.Transform,System.Boolean)">
            <summary>
            Spawns the particles at the given location.
            </summary>
            <param name="parent">The parent actor (can be null to link it to the first loaded scene).</param>
            <param name="transform">The spawn transform.</param>
            <param name="autoDestroy">If set to <c>true</c> effect be be auto-destroyed after duration.</param>
            <returns>The spawned effect.</returns>
        </member>
        <member name="T:FlaxEngine.ParticlesSimulationMode">
            <summary>
            The particles simulation execution mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticlesSimulationMode.Default">
            <summary>
            The default model. Select the best simulation mode based on a target platform.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticlesSimulationMode.CPU">
            <summary>
            Runs particles simulation on a CPU (always supported).
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticlesSimulationMode.GPU">
            <summary>
            Runs particles simulation on a GPU (if supported).
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticlesSimulationSpace">
            <summary>
            The particles simulation space modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticlesSimulationSpace.World">
            <summary>
            Simulates particles in the world space.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticlesSimulationSpace.Local">
            <summary>
            Simulates particles in the local space of the actor.
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticleSpriteFacingMode">
            <summary>
            The sprite rendering facing modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleSpriteFacingMode.FaceCameraPosition">
            <summary>
            Particles will face camera position.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleSpriteFacingMode.FaceCameraPlane">
            <summary>
            Particles will face camera plane.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleSpriteFacingMode.AlongVelocity">
            <summary>
            Particles will orient along velocity vector.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleSpriteFacingMode.CustomFacingVector">
            <summary>
            Particles will use the custom vector for facing.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleSpriteFacingMode.FixedAxis">
            <summary>
            Particles will use the custom fixed axis for facing up.
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticleModelFacingMode">
            <summary>
            The model particle rendering facing modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleModelFacingMode.FaceCameraPosition">
            <summary>
            Particles will face camera position.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleModelFacingMode.FaceCameraPlane">
            <summary>
            Particles will face camera plane.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleModelFacingMode.AlongVelocity">
            <summary>
            Particles will orient along velocity vector.
            </summary>
        </member>
        <member name="T:FlaxEngine.ParticleSortMode">
            <summary>
            The particles sorting modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleSortMode.None">
            <summary>
            Do not perform additional sorting prior to rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleSortMode.ViewDepth">
            <summary>
            Sorts particles by depth to the view's near plane.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleSortMode.ViewDistance">
            <summary>
            Sorts particles by distance to the view's origin.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleSortMode.CustomAscending">
            <summary>
            The custom sorting according to a per particle attribute. Lower values are rendered before higher values.
            </summary>
        </member>
        <member name="F:FlaxEngine.ParticleSortMode.CustomDescending">
            <summary>
            The custom sorting according to a per particle attribute. Higher values are rendered before lower values.
            </summary>
        </member>
        <member name="T:FlaxEngine.PhysicsActor">
            <summary>
            A base class for all physical actors.
            </summary>
            <seealso cref="T:FlaxEngine.Actor" />
        </member>
        <member name="M:FlaxEngine.PhysicsActor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.PhysicsActor"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.PhysicsColliderActor">
            <summary>
            A base class for all physical collider actors.
            </summary>
            <seealso cref="T:FlaxEngine.Actor" />
        </member>
        <member name="M:FlaxEngine.PhysicsColliderActor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.PhysicsColliderActor"/>.
            </summary>
        </member>
        <member name="E:FlaxEngine.PhysicsColliderActor.CollisionEnter">
            <summary>
            Occurs when a collision start gets registered for this collider (it collides with something).
            </summary>
        </member>
        <member name="E:FlaxEngine.PhysicsColliderActor.CollisionExit">
            <summary>
            Occurs when a collision end gets registered for this collider (it ends colliding with something).
            </summary>
        </member>
        <member name="E:FlaxEngine.PhysicsColliderActor.TriggerEnter">
            <summary>
            Occurs when a trigger touching start gets registered for this collider (the other collider enters it and triggers the event).
            </summary>
        </member>
        <member name="E:FlaxEngine.PhysicsColliderActor.TriggerExit">
            <summary>
            Occurs when a trigger touching end gets registered for this collider (the other collider enters it and triggers the event).
            </summary>
        </member>
        <member name="P:FlaxEngine.PhysicsColliderActor.AttachedRigidBody">
            <summary>
            Gets the attached rigid body.
            </summary>
        </member>
        <member name="M:FlaxEngine.PhysicsColliderActor.OnCollisionEnter(FlaxEngine.Collision)">
            <summary>
            Called when a collision start gets registered for this collider (it collides with something).
            </summary>
            <param name="c">The collision info.</param>
        </member>
        <member name="M:FlaxEngine.PhysicsColliderActor.OnCollisionExit(FlaxEngine.Collision)">
            <summary>
            Called when a collision end gets registered for this collider (it ends colliding with something).
            </summary>
            <param name="c">The collision info.</param>
        </member>
        <member name="M:FlaxEngine.PhysicsColliderActor.OnTriggerEnter(FlaxEngine.PhysicsColliderActor)">
            <summary>
            Called when a trigger touching start gets registered for this collider (the other collider enters it and triggers the event).
            </summary>
            <param name="c">The other collider.</param>
        </member>
        <member name="M:FlaxEngine.PhysicsColliderActor.OnTriggerExit(FlaxEngine.PhysicsColliderActor)">
            <summary>
            Called when a trigger touching end gets registered for this collider (the other collider enters it and triggers the event).
            </summary>
            <param name="c">The other collider.</param>
        </member>
        <member name="T:FlaxEngine.RigidBody">
            <summary>
            Physics simulation driven object.
            </summary>
            <seealso cref="T:FlaxEngine.PhysicsActor" />
        </member>
        <member name="M:FlaxEngine.RigidBody.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.RigidBody"/>.
            </summary>
        </member>
        <member name="E:FlaxEngine.RigidBody.CollisionEnter">
            <summary>
            Occurs when a collision start gets registered for this rigidbody (it collides with something).
            </summary>
        </member>
        <member name="E:FlaxEngine.RigidBody.CollisionExit">
            <summary>
            Occurs when a collision end gets registered for this rigidbody (it ends colliding with something).
            </summary>
        </member>
        <member name="E:FlaxEngine.RigidBody.TriggerEnter">
            <summary>
            Occurs when this rigidbody trigger touching start gets registered for this collider (the other collider enters it and triggers the event).
            </summary>
        </member>
        <member name="E:FlaxEngine.RigidBody.TriggerExit">
            <summary>
            Occurs when this rigidbody trigger touching end gets registered for this collider (the other collider enters it and triggers the event).
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.IsKinematic">
            <summary>
            Enables kinematic mode for the rigidbody.
            </summary>
            <remarks>
            Kinematic rigidbodies are special dynamic actors that are not influenced by forces(such as gravity), and have no momentum.
            They are considered to have infinite mass and can push regular dynamic actors out of the way.
            Kinematics will not collide with static or other kinematic objects.
            <para>
            Kinematic rigidbodies are great for moving platforms or characters, where direct motion control is desired.
            </para>
            <para>
            Kinematic rigidbodies are incompatible with CCD.
            </para>
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.LinearDamping">
            <summary>
            Gets or sets the 'drag' force added to reduce linear movement.
            </summary>
            <remarks>
            Linear damping can be used to slow down an object. The higher the drag the more the object slows down.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.AngularDamping">
            <summary>
            Gets or sets the 'drag' force added to reduce angular movement.
            </summary>
            <remarks>
            Angular damping can be used to slow down the rotation of an object. The higher the drag the more the rotation slows down.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.EnableSimulation">
            <summary>
            If true simulation and collisions detection will be enabled for the rigidbody.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.UseCCD">
            <summary>
            If true Continuous Collision Detection (CCD) will be used for this component.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.EnableGravity">
            <summary>
            If object should have the force of gravity applied.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.StartAwake">
            <summary>
            If object should start awake, or if it should initially be sleeping.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.UpdateMassWhenScaleChanges">
            <summary>
            If true, it will update mass when actor scale changes.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.MaxAngularVelocity">
            <summary>
            Gets or sets the maximum angular velocity that a simulated object can achieve.
            </summary>
            <remarks>
            The angular velocity of rigidbodies is clamped to MaxAngularVelocity to avoid numerical instability with fast rotating bodies.
            Because this may prevent intentional fast rotations on objects such as wheels, you can override this value per rigidbody.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.OverrideMass">
            <summary>
            Override the auto computed mass.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.Mass">
            <summary>
            Gets or sets the mass value measured in kilograms (use override value only if OverrideMass is checked).
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.MassScale">
            <summary>
            Gets or sets the per-instance scaling of the mass.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.CenterOfMassOffset">
            <summary>
            Gets or sets the user specified offset for the center of mass of this object, from the calculated location.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.Constraints">
            <summary>
            Gets or sets the object movement constraint flags that define degrees of freedom are allowed for the simulation of object.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.LinearVelocity">
            <summary>
            Gets or sets the linear velocity of the rigidbody.
            </summary>
            <remarks>
            It's used mostly to get the current velocity. Manual modifications may result in unrealistic behaviour.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.AngularVelocity">
            <summary>
            Gets or sets the angular velocity of the rigidbody measured in radians per second.
            </summary>
            <remarks>
            It's used mostly to get the current angular velocity. Manual modifications may result in unrealistic behaviour.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.MaxDepenetrationVelocity">
            <summary>
            Gets or sets the maximum depenetration velocity when rigidbody moving out of penetrating state.
            </summary>
            <remarks>
            This value controls how much velocity the solver can introduce to correct for penetrations in contacts.
            Using this property can smooth objects moving out of colliding state and prevent unstable motion.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.SleepThreshold">
            <summary>
            Gets or sets the mass-normalized kinetic energy threshold below which an actor may go to sleep.
            </summary>
            <remarks>
            Actors whose kinetic energy divided by their mass is below this threshold will be candidates for sleeping.
            </remarks>
        </member>
        <member name="P:FlaxEngine.RigidBody.CenterOfMass">
            <summary>
            Gets the center of the mass in the local space.
            </summary>
        </member>
        <member name="P:FlaxEngine.RigidBody.IsSleeping">
            <summary>
            Determines whether this rigidbody is sleeping.
            </summary>
        </member>
        <member name="M:FlaxEngine.RigidBody.Sleep">
            <summary>
            Forces a rigidbody to sleep (for at least one frame).
            </summary>
        </member>
        <member name="M:FlaxEngine.RigidBody.WakeUp">
            <summary>
            Forces a rigidbody to wake up.
            </summary>
        </member>
        <member name="M:FlaxEngine.RigidBody.UpdateMass">
            <summary>
            Updates the actor's mass (auto calculated mass from density and inertia tensor or overriden value).
            </summary>
        </member>
        <member name="M:FlaxEngine.RigidBody.AddForce(FlaxEngine.Vector3,FlaxEngine.ForceMode)">
            <summary>
            Applies a force (or impulse) defined in the world space to the rigidbody at its center of mass.
            </summary>
            <remarks>
            This will not induce any torque
            <para>
            ForceMode determines if the force is to be conventional or impulsive.
            </para>
            <para>
            Each actor has an acceleration and a velocity change accumulator which are directly modified using the modes ForceMode.Acceleration
            and ForceMode.VelocityChange respectively. The modes ForceMode.Force and ForceMode.Impulse also modify these same
            accumulators and are just short hand for multiplying the vector parameter by inverse mass and then using ForceMode.Acceleration and
            ForceMode.VelocityChange respectively.
            </para>
            </remarks>
            <param name="force">The force/impulse to apply defined in the world space.</param>
            <param name="mode">The mode to use when applying the force/impulse.</param>
        </member>
        <member name="M:FlaxEngine.RigidBody.AddForceAtPosition(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.ForceMode)">
            <summary>
            Applies a force (or impulse) defined in the world space to the rigidbody at given position in the world space.
            </summary>
            <remarks>
            Also applies appropriate amount of torque
            <para>
            ForceMode determines if the force is to be conventional or impulsive.
            </para>
            <para>
            Each actor has an acceleration and a velocity change accumulator which are directly modified using the modes ForceMode.Acceleration
            and ForceMode.VelocityChange respectively. The modes ForceMode.Force and ForceMode.Impulse also modify these same
            accumulators and are just short hand for multiplying the vector parameter by inverse mass and then using ForceMode.Acceleration and
            ForceMode.VelocityChange respectively.
            </para>
            </remarks>
            <param name="force">The force/impulse to apply defined in the world space.</param>
            <param name="position">The position of the force/impulse in the world space.</param>
            <param name="mode">The mode to use when applying the force/impulse.</param>
        </member>
        <member name="M:FlaxEngine.RigidBody.AddRelativeForce(FlaxEngine.Vector3,FlaxEngine.ForceMode)">
            <summary>
            Applies a force (or impulse) defined in the local space of the rigidbody (relative to its coordinate system) at its center of mass.
            </summary>
            <remarks>
            This will not induce any torque
            <para>
            ForceMode determines if the force is to be conventional or impulsive.
            </para>
            <para>
            Each actor has an acceleration and a velocity change accumulator which are directly modified using the modes ForceMode.Acceleration
            and ForceMode.VelocityChange respectively. The modes ForceMode.Force and ForceMode.Impulse also modify these same
            accumulators and are just short hand for multiplying the vector parameter by inverse mass and then using ForceMode.Acceleration and
            ForceMode.VelocityChange respectively.
            </para>
            </remarks>
            <param name="force">The force/impulse to apply defined in the local space.</param>
            <param name="mode">The mode to use when applying the force/impulse.</param>
        </member>
        <member name="M:FlaxEngine.RigidBody.AddTorque(FlaxEngine.Vector3,FlaxEngine.ForceMode)">
            <summary>
            Applies an impulsive torque defined in the world space to the rigidbody.
            </summary>
            <remarks>
            ForceMode determines if the force is to be conventional or impulsive.
            <para>
            Each actor has an angular acceleration and an angular velocity change accumulator which are directly modified using the modes
            ForceMode.Acceleration and ForceMode.VelocityChange respectively.The modes ForceMode.Force and ForceMode.Impulse
            also modify these same accumulators and are just short hand for multiplying the vector parameter by inverse inertia and then
            using ForceMode.Acceleration and ForceMode.VelocityChange respectively.
            </para>
            </remarks>
            <param name="torque">The torque to apply defined in the world space.</param>
            <param name="mode">The mode to use when applying the force/impulse.</param>
        </member>
        <member name="M:FlaxEngine.RigidBody.AddRelativeTorque(FlaxEngine.Vector3,FlaxEngine.ForceMode)">
            <summary>
            Applies an impulsive torque defined in the local space of the rigidbody (relative to its coordinate system).
            </summary>
            <remarks>
            ForceMode determines if the force is to be conventional or impulsive.
            <para>
            Each actor has an angular acceleration and an angular velocity change accumulator which are directly modified using the modes
            ForceMode.Acceleration and ForceMode.VelocityChange respectively.The modes ForceMode.Force and ForceMode.Impulse
            also modify these same accumulators and are just short hand for multiplying the vector parameter by inverse inertia and then
            using ForceMode.Acceleration and ForceMode.VelocityChange respectively.
            </para>
            </remarks>
            <param name="torque">The torque to apply defined in the local space.</param>
            <param name="mode">The mode to use when applying the force/impulse.</param>
        </member>
        <member name="M:FlaxEngine.RigidBody.SetSolverIterationCounts(System.Int32,System.Int32)">
            <summary>
            Sets the solver iteration counts for the rigidbody.
            </summary>
            <remarks>
            The solver iteration count determines how accurately joints and contacts are resolved.
            If you are having trouble with jointed bodies oscillating and behaving erratically,
            then setting a higher position iteration count may improve their stability.
            <para>
            If intersecting bodies are being depenetrated too violently, increase the number of velocity
            iterations. More velocity iterations will drive the relative exit velocity of the intersecting
            objects closer to the correct value given the restitution.
            </para>
            <para>
            Default: 4 position iterations, 1 velocity iteration.
            </para>
            </remarks>
            <param name="minPositionIters">The minimum number of position iterations the solver should perform for this body.</param>
            <param name="minVelocityIters">The minimum number of velocity iterations the solver should perform for this body.</param>
        </member>
        <member name="M:FlaxEngine.RigidBody.ClosestPoint(FlaxEngine.Vector3,FlaxEngine.Vector3@)">
            <summary>
            Gets a point on one of the colliders attached to the attached that is closest to a given location. Can be used to find a hit location or position to apply explosion force or any other special effects.
            </summary>
            <param name="position">The position to find the closest point to it.</param>
            <param name="result">The result point on the rigidbody shape that is closest to the specified location.</param>
        </member>
        <member name="T:FlaxEngine.SplineRopeBody">
            <summary>
            Physical simulation actor for ropes, chains and cables represented by a spline.
            </summary>
            <seealso cref="T:FlaxEngine.Spline" />
        </member>
        <member name="M:FlaxEngine.SplineRopeBody.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SplineRopeBody"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SplineRopeBody.AttachEnd">
            <summary>
            The target actor too attach the rope end to. If unset the rope end will run freely.
            </summary>
        </member>
        <member name="P:FlaxEngine.SplineRopeBody.GravityScale">
            <summary>
            The world gravity scale applied to the rope. Can be used to adjust gravity force or disable it.
            </summary>
        </member>
        <member name="P:FlaxEngine.SplineRopeBody.AdditionalForce">
            <summary>
            The additional, external force applied to rope (world-space). This can be eg. wind force.
            </summary>
        </member>
        <member name="P:FlaxEngine.SplineRopeBody.EnableStiffness">
            <summary>
            If checked, the physics solver will use stiffness constraint for rope. It will be less likely to bend over and will preserve more it's shape.
            </summary>
        </member>
        <member name="P:FlaxEngine.SplineRopeBody.SubstepTime">
            <summary>
            The rope simulation update substep (in seconds). Defines the frequency of physics update.
            </summary>
        </member>
        <member name="T:FlaxEngine.WheeledVehicle">
            <summary>
            Representation of the car vehicle that uses wheels. Built on top of the RigidBody with collider representing its chassis shape and wheels.
            </summary>
            <seealso cref="T:FlaxEngine.RigidBody" />
        </member>
        <member name="M:FlaxEngine.WheeledVehicle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.WheeledVehicle"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.WheeledVehicle.UseReverseAsBrake">
            <summary>
            If checked, the negative throttle value will be used as brake and reverse to behave in a more arcade style where holding reverse also functions as brake. Disable it for more realistic driving controls.
            </summary>
        </member>
        <member name="P:FlaxEngine.WheeledVehicle.UseAnalogSteering">
            <summary>
            If checked, the vehicle driving and steering inputs will be used as analog values (from gamepad), otherwise will be used as digital input (from keyboard).
            </summary>
        </member>
        <member name="P:FlaxEngine.WheeledVehicle.DriveType">
            <summary>
            Gets or sets the vehicle driving model type.
            </summary>
        </member>
        <member name="P:FlaxEngine.WheeledVehicle.Wheels">
            <summary>
            Gets or sets the vehicle wheels settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.WheeledVehicle.Engine">
            <summary>
            Gets or sets the vehicle engine settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.WheeledVehicle.Differential">
            <summary>
            Gets or sets the vehicle differential settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.WheeledVehicle.Gearbox">
            <summary>
            Gets or sets the vehicle gearbox settings.
            </summary>
        </member>
        <member name="P:FlaxEngine.WheeledVehicle.ForwardSpeed">
            <summary>
            Gets the current forward vehicle movement speed (along forward vector of the actor transform).
            </summary>
        </member>
        <member name="P:FlaxEngine.WheeledVehicle.SidewaysSpeed">
            <summary>
            Gets the current sideways vehicle movement speed (along right vector of the actor transform).
            </summary>
        </member>
        <member name="P:FlaxEngine.WheeledVehicle.EngineRotationSpeed">
            <summary>
            Gets the current engine rotation speed (Revolutions Per Minute is the number of turns in one minute).
            </summary>
        </member>
        <member name="P:FlaxEngine.WheeledVehicle.CurrentGear">
            <summary>
            Gets or sets the current gear number. Neutral gears is 0, reverse gears is -1, forward gears are 1 and higher.
            </summary>
        </member>
        <member name="P:FlaxEngine.WheeledVehicle.TargetGear">
            <summary>
            Gets or sets the target gear number. Neutral gears is 0, reverse gears is -1, forward gears are 1 and higher.
            </summary>
        </member>
        <member name="M:FlaxEngine.WheeledVehicle.SetThrottle(System.Single)">
            <summary>
            Sets the input for vehicle throttle. It is the analog accelerator pedal value in range (0,1) where 1 represents the pedal fully pressed and 0 represents the pedal in its rest state.
            </summary>
            <param name="value">The value (-1,1 range). When using UseReverseAsBrake it can be negative and will be used as brake and backward driving.</param>
        </member>
        <member name="M:FlaxEngine.WheeledVehicle.SetSteering(System.Single)">
            <summary>
            Sets the input for vehicle steering. Steer is the analog steer value in range (-1,1) where -1 represents the steering wheel at left lock and +1 represents the steering wheel at right lock.
            </summary>
            <param name="value">The value (-1,1 range).</param>
        </member>
        <member name="M:FlaxEngine.WheeledVehicle.SetBrake(System.Single)">
            <summary>
            Sets the input for vehicle brakes. Brake is the analog brake pedal value in range (0,1) where 1 represents the pedal fully pressed and 0 represents the pedal in its rest state.
            </summary>
            <param name="value">The value (0,1 range).</param>
        </member>
        <member name="M:FlaxEngine.WheeledVehicle.SetHandbrake(System.Single)">
            <summary>
            Sets the input for vehicle handbrake. Handbrake is the analog handbrake value in range (0,1) where 1 represents the handbrake fully engaged and 0 represents the handbrake in its rest state.
            </summary>
            <param name="value">The value (0,1 range).</param>
        </member>
        <member name="M:FlaxEngine.WheeledVehicle.ClearInput">
            <summary>
            Clears all the vehicle control inputs to the default values (throttle, steering, breaks).
            </summary>
        </member>
        <member name="M:FlaxEngine.WheeledVehicle.GetWheelState(System.Int32,FlaxEngine.WheeledVehicle.WheelState@)">
            <summary>
            Gets the current state of the wheel.
            </summary>
            <param name="index">The index of the wheel.</param>
            <param name="result">The current state.</param>
        </member>
        <member name="M:FlaxEngine.WheeledVehicle.Setup">
            <summary>
            Rebuilds the vehicle. Call it after modifying vehicle settings (eg. engine options).
            </summary>
        </member>
        <member name="T:FlaxEngine.WheeledVehicle.DriveTypes">
            <summary>
            Vehicle driving mode types.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.DriveTypes.Drive4W">
            <summary>
            Four-wheel drive. Any additional wheels are non-drivable. Optimized for 4-wheel cars.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.DriveTypes.DriveNW">
            <summary>
            N-wheel drive. Up to 20 drivable wheels. Suits generic wheels configurations.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.DriveTypes.NoDrive">
            <summary>
            Non-drivable vehicle.
            </summary>
        </member>
        <member name="T:FlaxEngine.WheeledVehicle.EngineSettings">
            <summary>
            Vehicle engine settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.EngineSettings.MOI">
            <summary>
            Moment of inertia of the engine around the axis of rotation. Specified in kilograms metres-squared (kg m^2).
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.EngineSettings.MaxTorque">
            <summary>
            Maximum torque available to apply to the engine when the accelerator pedal is at maximum. Specified in kilograms metres-squared per second-squared (kg m^2 s^-2).
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.EngineSettings.MaxRotationSpeed">
            <summary>
            Maximum rotation speed of the engine (Revolutions Per Minute is the number of turns in one minute).
            </summary>
        </member>
        <member name="T:FlaxEngine.WheeledVehicle.DifferentialTypes">
            <summary>
            Vehicle differential types.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.DifferentialTypes.LimitedSlip4W">
            <summary>
            Limited slip differential for car with 4 driven wheels.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.DifferentialTypes.LimitedSlipFrontDrive">
            <summary>
            Limited slip differential for car with front-wheel drive.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.DifferentialTypes.LimitedSlipRearDrive">
            <summary>
            Limited slip differential for car with rear-wheel drive.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.DifferentialTypes.Open4W">
            <summary>
            Open differential for car with 4 driven wheels.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.DifferentialTypes.OpenFrontDrive">
            <summary>
            Open differential for car with front-wheel drive.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.DifferentialTypes.OpenRearDrive">
            <summary>
            Open differential for car with rear-wheel drive.
            </summary>
        </member>
        <member name="T:FlaxEngine.WheeledVehicle.DifferentialSettings">
            <summary>
            Vehicle differential settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.DifferentialSettings.Type">
            <summary>
            Type of differential.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.DifferentialSettings.FrontRearSplit">
            <summary>
            Ratio of torque split between front and rear (higher then 0.5 means more to front, smaller than 0.5 means more to rear). Only applied to LimitedSlip4W and Open4W.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.DifferentialSettings.FrontLeftRightSplit">
            <summary>
            Ratio of torque split between front-left and front-right (higher then 0.5 means more to front-left, smaller than 0.5 means more to front-right). Only applied to LimitedSlip4W and Open4W and LimitedSlipFrontDrive.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.DifferentialSettings.RearLeftRightSplit">
            <summary>
            Ratio of torque split between rear-left and rear-right (higher then 0.5 means more to rear-left, smaller than 0.5 means more to rear-right). Only applied to LimitedSlip4W and Open4W and LimitedSlipRearDrive.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.DifferentialSettings.CentreBias">
            <summary>
            Maximum allowed ratio of average front wheel rotation speed and rear wheel rotation speeds. The differential will divert more torque to the slower wheels when the bias is exceeded. Only applied to LimitedSlip4W.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.DifferentialSettings.FrontBias">
            <summary>
            Maximum allowed ratio of front-left and front-right wheel rotation speeds. The differential will divert more torque to the slower wheel when the bias is exceeded. Only applied to LimitedSlip4W and LimitedSlipFrontDrive.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.DifferentialSettings.RearBias">
            <summary>
            Maximum allowed ratio of rear-left and rear-right wheel rotation speeds. The differential will divert more torque to the slower wheel when the bias is exceeded. Only applied to LimitedSlip4W and LimitedSlipRearDrive.
            </summary>
        </member>
        <member name="T:FlaxEngine.WheeledVehicle.GearboxSettings">
            <summary>
            Vehicle gearbox settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.GearboxSettings.AutoGear">
            <summary>
            If enabled the vehicle gears will be changes automatically, otherwise it's fully manual.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.GearboxSettings.SwitchTime">
            <summary>
            Time it takes to switch gear. Specified in seconds (s).
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.GearboxSettings.ClutchStrength">
            <summary>
            Strength of clutch. A stronger clutch more strongly couples the engine to the wheels, while a clutch of strength zero completely decouples the engine from the wheels.
            Stronger clutches more quickly bring the wheels and engine into equilibrium, while weaker clutches take longer, resulting in periods of clutch slip and delays in power transmission from the engine to the wheels.
            Specified in kilograms metres-squared per second (kg m^2 s^-1).
            </summary>
        </member>
        <member name="T:FlaxEngine.WheeledVehicle.WheelTypes">
            <summary>
            Vehicle wheel types.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.WheelTypes.FrontLeft">
            <summary>
            Left wheel of the front axle.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.WheelTypes.FrontRight">
            <summary>
            Right wheel of the front axle.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.WheelTypes.RearLeft">
            <summary>
            Left wheel of the rear axle.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.WheelTypes.RearRight">
            <summary>
            Right wheel of the rear axle.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.WheelTypes.NoDrive">
            <summary>
            Non-drivable wheel.
            </summary>
        </member>
        <member name="T:FlaxEngine.WheeledVehicle.Wheel">
            <summary>
            Vehicle wheel settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.Wheel.Type">
            <summary>
            Wheel placement type.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.Wheel.Mass">
            <summary>
            Combined mass of the wheel and the tire in kg. Typically, a wheel has mass between 20Kg and 80Kg but can be lower and higher depending on the vehicle.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.Wheel.Radius">
            <summary>
            Distance in metres between the center of the wheel and the outside rim of the tire. It is important that the value of the radius closely matches the radius of the render mesh of the wheel. Any mismatch will result in the wheels either hovering above the ground or intersecting the ground.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.Wheel.Width">
            <summary>
            Full width of the wheel in metres. This parameter has no bearing on the handling but is a very useful parameter to have when trying to render debug data relating to the wheel/tire/suspension.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.Wheel.MaxSteerAngle">
            <summary>
            Max steer angle that can be achieved by the wheel (in degrees).
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.Wheel.DampingRate">
            <summary>
            Damping rate applied to wheel. Specified in kilograms metres-squared per second (kg m^2 s^-1).
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.Wheel.MaxBrakeTorque">
            <summary>
            Max brake torque that can be applied to wheel. Specified in kilograms metres-squared per second-squared (kg m^2 s^-2)
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.Wheel.MaxHandBrakeTorque">
            <summary>
            Max handbrake torque that can be applied to wheel. Specified in kilograms metres-squared per second-squared (kg m^2 s^-2)
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.Wheel.Collider">
            <summary>
            Collider that represents the wheel shape and it's placement. Has to be attached as a child to the vehicle. Triangle mesh collider is not supported (use convex mesh or basic shapes).
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.Wheel.SuspensionDampingRate">
            <summary>
            Spring damper rate of suspension unit.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.Wheel.SuspensionMaxRaise">
            <summary>
            The maximum offset for the suspension that wheel can go above resting location.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.Wheel.SuspensionMaxDrop">
            <summary>
            The maximum offset for the suspension that wheel can go below resting location.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.Wheel.SuspensionForceOffset">
            <summary>
            The vertical offset from where suspension forces are applied (relative to the vehicle center of mass). The suspension force is applies on the vertical axis going though the wheel center.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.Wheel.TireLateralStiffness">
            <summary>
            The tire lateral stiffness to have given lateral slip.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.Wheel.TireLateralMax">
            <summary>
            The maximum tire load (normalized) at which tire cannot provide more lateral stiffness (no matter how much extra load is applied to it).
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.Wheel.TireLongitudinalStiffness">
            <summary>
            The tire longitudinal stiffness to have given longitudinal slip.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.Wheel.TireFrictionScale">
            <summary>
            The tire friction scale (scales the drivable surface friction under the tire).
            </summary>
        </member>
        <member name="T:FlaxEngine.WheeledVehicle.WheelState">
            <summary>
            Vehicle wheel dynamic simulation state container.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.WheelState.IsInAir">
            <summary>
            True if suspension travel limits forbid the wheel from touching the drivable surface.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.WheelState.TireContactCollider">
            <summary>
            The wheel is not in the air then it's set to the collider of the driving surface under the corresponding vehicle wheel.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.WheelState.TireContactPoint">
            <summary>
            The wheel is not in the air then it's set to the point on the drivable surface hit by the tire.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.WheelState.TireContactNormal">
            <summary>
            The wheel is not in the air then it's set to the normal on the drivable surface hit by the tire.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.WheelState.TireFriction">
            <summary>
            The friction experienced by the tire for the combination of tire type and surface type after accounting.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.WheelState.SteerAngle">
            <summary>
            The steer angle (in degrees) of the wheel about the "up" vector accounting for input steer and toe and, if applicable, Ackermann steer correction.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.WheelState.RotationAngle">
            <summary>
            The rotation angle (in degrees) about the rolling axis for the specified wheel.
            </summary>
        </member>
        <member name="F:FlaxEngine.WheeledVehicle.WheelState.SuspensionOffset">
            <summary>
            The compression of the suspension spring. Offsets the wheel location.
            </summary>
        </member>
        <member name="T:FlaxEngine.BoxCollider">
            <summary>
            A box-shaped primitive collider.
            </summary>
            <seealso cref="T:FlaxEngine.Collider" />
        </member>
        <member name="M:FlaxEngine.BoxCollider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.BoxCollider"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoxCollider.Size">
            <summary>
            Gets or sets the size of the box, measured in the object's local space.
            </summary>
            <remarks>
            The box size will be scaled by the actor's world scale.
            </remarks>
        </member>
        <member name="P:FlaxEngine.BoxCollider.OrientedBox">
            <summary>
            Gets the volume bounding box (oriented).
            </summary>
        </member>
        <member name="T:FlaxEngine.CapsuleCollider">
            <summary>
            A capsule-shaped primitive collider.
            </summary>
            <remarks>
            Capsules are cylinders with a half-sphere at each end centered at the origin and extending along the X axis, and two hemispherical ends.
            </remarks>
            <seealso cref="T:FlaxEngine.Collider" />
        </member>
        <member name="M:FlaxEngine.CapsuleCollider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.CapsuleCollider"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.CapsuleCollider.Radius">
            <summary>
            Gets or sets the radius of the sphere, measured in the object's local space.
            </summary>
            <remarks>
            The sphere radius will be scaled by the actor's world scale.
            </remarks>
        </member>
        <member name="P:FlaxEngine.CapsuleCollider.Height">
            <summary>
            Gets or sets the height of the capsule, measured in the object's local space between the centers of the hemispherical ends.
            </summary>
            <remarks>
            The capsule height will be scaled by the actor's world scale.
            </remarks>
        </member>
        <member name="T:FlaxEngine.CharacterController">
            <summary>
            Physical objects that allows to easily do player movement constrained by collisions without having to deal with a rigidbody.
            </summary>
            <seealso cref="T:FlaxEngine.Collider" />
        </member>
        <member name="M:FlaxEngine.CharacterController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.CharacterController"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.CharacterController.Radius">
            <summary>
            Gets or sets the radius of the sphere, measured in the object's local space. The sphere radius will be scaled by the actor's world scale.
            </summary>
        </member>
        <member name="P:FlaxEngine.CharacterController.Height">
            <summary>
            Gets or sets the height of the capsule, measured in the object's local space. The capsule height will be scaled by the actor's world scale.
            </summary>
        </member>
        <member name="P:FlaxEngine.CharacterController.SlopeLimit">
            <summary>
            Gets or sets the slope limit (in degrees). Limits the collider to only climb slopes that are less steep (in degrees) than the indicated value.
            </summary>
        </member>
        <member name="P:FlaxEngine.CharacterController.NonWalkableMode">
            <summary>
            Gets or sets the non-walkable mode for the character controller.
            </summary>
        </member>
        <member name="P:FlaxEngine.CharacterController.StepOffset">
            <summary>
            Gets or sets the step height. The character will step up a stair only if it is closer to the ground than the indicated value. This should not be greater than the Character Controller’s height or it will generate an error.
            </summary>
        </member>
        <member name="P:FlaxEngine.CharacterController.UpDirection">
            <summary>
            Gets or sets the character up vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.CharacterController.MinMoveDistance">
            <summary>
            Gets or sets the minimum move distance of the character controller. The minimum traveled distance to consider. If traveled distance is smaller, the character doesn't move. This is used to stop the recursive motion algorithm when remaining distance to travel is small.
            </summary>
        </member>
        <member name="P:FlaxEngine.CharacterController.Velocity">
            <summary>
            Gets the linear velocity of the Character Controller. This allows tracking how fast the character is actually moving, for instance when it is stuck at a wall this value will be the near zero vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.CharacterController.IsGrounded">
            <summary>
            Gets a value indicating whether this character was grounded during last move call grounded.
            </summary>
        </member>
        <member name="P:FlaxEngine.CharacterController.Flags">
            <summary>
            Gets the current collision flags. Tells which parts of the character capsule collided with the environment during the last move call. It can be used to trigger various character animations.
            </summary>
        </member>
        <member name="M:FlaxEngine.CharacterController.SimpleMove(FlaxEngine.Vector3)">
            <summary>
            Moves the character with the given speed. Gravity is automatically applied. It will slide along colliders. Result collision flags is the summary of collisions that occurred during the Move.
            </summary>
            <param name="speed">The movement speed (in units/s).</param>
            <returns>The collision flags. It can be used to trigger various character animations.</returns>
        </member>
        <member name="M:FlaxEngine.CharacterController.Move(FlaxEngine.Vector3)">
            <summary>
            Moves the character using a 'collide-and-slide' algorithm. Attempts to move the controller by the given displacement vector, the motion will only be constrained by collisions. It will slide along colliders. Result collision flags is the summary of collisions that occurred during the Move. This function does not apply any gravity.
            </summary>
            <param name="displacement">The displacement vector (in world units).</param>
            <returns>The collision flags. It can be used to trigger various character animations.</returns>
        </member>
        <member name="T:FlaxEngine.CharacterController.CollisionFlags">
            <summary>
            Specifies which sides a character is colliding with.
            </summary>
        </member>
        <member name="F:FlaxEngine.CharacterController.CollisionFlags.None">
            <summary>
            The character is not colliding.
            </summary>
        </member>
        <member name="F:FlaxEngine.CharacterController.CollisionFlags.Sides">
            <summary>
            The character is colliding to the sides.
            </summary>
        </member>
        <member name="F:FlaxEngine.CharacterController.CollisionFlags.Above">
            <summary>
            The character has collision above.
            </summary>
        </member>
        <member name="F:FlaxEngine.CharacterController.CollisionFlags.Below">
            <summary>
            The character has collision below.
            </summary>
        </member>
        <member name="T:FlaxEngine.CharacterController.NonWalkableModes">
            <summary>
            Specifies how a character controller interacts with non-walkable parts.
            </summary>
        </member>
        <member name="F:FlaxEngine.CharacterController.NonWalkableModes.PreventClimbing">
            <summary>
            Stops character from climbing up non-walkable slopes, but doesn't move it otherwise.
            </summary>
        </member>
        <member name="F:FlaxEngine.CharacterController.NonWalkableModes.PreventClimbingAndForceSliding">
            <summary>
            Stops character from climbing up non-walkable slopes, and forces it to slide down those slopes.
            </summary>
        </member>
        <member name="T:FlaxEngine.Collider">
            <summary>
            A base class for all colliders.
            </summary>
            <seealso cref="T:FlaxEngine.Actor" />
            <seealso cref="T:FlaxEngine.PhysicsColliderActor" />
        </member>
        <member name="M:FlaxEngine.Collider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Collider"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Collider.Material">
            <summary>
            The physical material used to define the collider physical properties.
            </summary>
        </member>
        <member name="P:FlaxEngine.Collider.IsTrigger">
            <summary>
            Gets or sets the 'IsTrigger' flag.
            </summary>
            <remarks>
            A trigger doesn't register a collision with an incoming Rigidbody. Instead, it sends OnTriggerEnter, OnTriggerExit and OnTriggerStay message when a rigidbody enters or exits the trigger volume.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Collider.Center">
            <summary>
            Gets or sets the center of the collider, measured in the object's local space.
            </summary>
        </member>
        <member name="P:FlaxEngine.Collider.ContactOffset">
            <summary>
            Gets or sets the contact offset.
            </summary>
            <remarks>
            Colliders whose distance is less than the sum of their ContactOffset values will generate contacts. The contact offset must be positive. Contact offset allows the collision detection system to predictively enforce the contact constraint even when the objects are slightly separated.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Collider.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single@,System.Single)">
            <summary>
            Performs a raycast against this collider shape.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="resultHitDistance">The raycast result hit position distance from the ray origin. Valid only if raycast hits anything.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <returns>True if ray hits an object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Collider.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit@,System.Single)">
            <summary>
            Performs a raycast against this collider, returns results in a RaycastHit structure.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="hitInfo">The result hit information. Valid only when method returns true.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <returns>True if ray hits an object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Collider.ClosestPoint(FlaxEngine.Vector3,FlaxEngine.Vector3@)">
            <summary>
            Gets a point on the collider that is closest to a given location. Can be used to find a hit location or position to apply explosion force or any other special effects.
            </summary>
            <param name="point">The position to find the closest point to it.</param>
            <param name="result">The result point on the collider that is closest to the specified location.</param>
        </member>
        <member name="M:FlaxEngine.Collider.ContainsPoint(FlaxEngine.Vector3)">
            <summary>
            Checks if a point is inside the collider.
            </summary>
            <param name="point">The point to check if is contained by the collider shape (in world-space).</param>
            <returns>True if collider shape contains a given point, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Collider.ComputePenetration(FlaxEngine.Collider,FlaxEngine.Collider,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Computes minimum translational distance between two geometry objects.
            Translating the first collider by direction * distance will separate the colliders apart if the function returned true. Otherwise, direction and distance are not defined.
            The one of the colliders has to be BoxCollider, SphereCollider CapsuleCollider or a convex MeshCollider. The other one can be any type.
            If objects do not overlap, the function can not compute the distance and returns false.
            </summary>
            <param name="colliderA">The first collider.</param>
            <param name="colliderB">The second collider.</param>
            <param name="direction">The computed direction along which the translation required to separate the colliders apart is minimal. Valid only if function returns true.</param>
            <param name="distance">The penetration distance along direction that is required to separate the colliders apart. Valid only if function returns true.</param>
            <returns>True if the distance has successfully been computed, i.e. if objects do overlap, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.MeshCollider">
            <summary>
            A collider represented by an arbitrary mesh.
            </summary>
            <seealso cref="T:FlaxEngine.Collider" />
        </member>
        <member name="M:FlaxEngine.MeshCollider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.MeshCollider"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.MeshCollider.CollisionData">
            <summary>
            Linked collision data asset that contains convex mesh or triangle mesh used to represent a mesh collider shape.
            </summary>
        </member>
        <member name="T:FlaxEngine.SphereCollider">
            <summary>
            A sphere-shaped primitive collider.
            </summary>
            <seealso cref="T:FlaxEngine.Collider" />
        </member>
        <member name="M:FlaxEngine.SphereCollider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SphereCollider"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SphereCollider.Radius">
            <summary>
            Gets or sets the radius of the sphere, measured in the object's local space.
            </summary>
            <remarks>
            The sphere radius will be scaled by the actor's world scale.
            </remarks>
        </member>
        <member name="T:FlaxEngine.SplineCollider">
            <summary>
            A collider represented by an arbitrary mesh that goes over the spline.
            </summary>
            <seealso cref="T:FlaxEngine.Collider" />
            <seealso cref="T:FlaxEngine.Spline" />
        </member>
        <member name="M:FlaxEngine.SplineCollider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SplineCollider"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SplineCollider.CollisionData">
            <summary>
            Linked collision data asset that contains convex mesh or triangle mesh used to represent a spline collider shape.
            </summary>
        </member>
        <member name="P:FlaxEngine.SplineCollider.PreTransform">
            <summary>
            Gets or sets the transformation applied to the collision data model geometry before placing it over the spline. Can be used to change the way model goes over the spline.
            </summary>
        </member>
        <member name="T:FlaxEngine.CollisionDataType">
            <summary>
            A <see cref="T:FlaxEngine.CollisionData"/> storage data type.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollisionDataType.None">
            <summary>
            Nothing.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollisionDataType.ConvexMesh">
            <summary>
            A convex polyhedron represented as a set of vertices and polygonal faces. The number of vertices and faces of a convex mesh is limited to 255.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollisionDataType.TriangleMesh">
            <summary>
            A collision triangle mesh consists of a collection of vertices and the triangle indices.
            </summary>
        </member>
        <member name="T:FlaxEngine.ConvexMeshGenerationFlags">
            <summary>
            Set of flags used to generate model convex mesh. Allows to customize process.
            </summary>
        </member>
        <member name="F:FlaxEngine.ConvexMeshGenerationFlags.None">
            <summary>
            Nothing.
            </summary>
        </member>
        <member name="F:FlaxEngine.ConvexMeshGenerationFlags.SkipValidation">
            <summary>
            Disables the convex mesh validation to speed-up hull creation. Creating a convex mesh with invalid input data without prior validation may result in undefined behavior.
            </summary>
        </member>
        <member name="F:FlaxEngine.ConvexMeshGenerationFlags.UsePlaneShifting">
             <summary>
             Enables plane shifting vertex limit algorithm.
            
             Plane shifting is an alternative algorithm for the case when the computed hull has more vertices
             than the specified vertex limit.
            
             The default algorithm computes the full hull, and an OBB around the input vertices. This OBB is then sliced
             with the hull planes until the vertex limit is reached. The default algorithm requires the vertex limit
             to be set to at least 8, and typically produces results that are much better quality than are produced
             by plane shifting.
            
             When plane shifting is enabled, the hull computation stops when vertex limit is reached.The hull planes
             are then shifted to contain all input vertices, and the new plane intersection points are then used to
             generate the final hull with the given vertex limit.Plane shifting may produce sharp edges to vertices
             very far away from the input cloud, and does not guarantee that all input vertices are inside the resulting
             hull. However, it can be used with a vertex limit as low as 4.
             </summary>
        </member>
        <member name="F:FlaxEngine.ConvexMeshGenerationFlags.UseFastInteriaComputation">
            <summary>
            Inertia tensor computation is faster using SIMD code, but the precision is lower, which may result in incorrect inertia for very thin hulls.
            </summary>
        </member>
        <member name="F:FlaxEngine.ConvexMeshGenerationFlags.ShiftVertices">
            <summary>
            Convex hull input vertices are shifted to be around origin to provide better computation stability.
            It is recommended to provide input vertices around the origin, otherwise use this flag to improve numerical stability.
            </summary>
        </member>
        <member name="F:FlaxEngine.ConvexMeshGenerationFlags.SuppressFaceRemapTable">
            <summary>
            If checked, the face remap table is not created. This saves a significant amount of memory, but disabled ability to remap the cooked collision geometry into original mesh using raycast hit info.
            </summary>
        </member>
        <member name="F:FlaxEngine.ConvexMeshGenerationFlags.FastCook">
            <summary>
            The combination of flags that improve the collision data cooking performance at the cost of quality and features. Recommend for runtime dynamic or deformable objects that need quick collision updates.
            </summary>
        </member>
        <member name="T:FlaxEngine.CollisionDataOptions">
            <summary>
            The collision data asset cooking options.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollisionDataOptions.Type">
            <summary>
            The data type.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollisionDataOptions.Model">
            <summary>
            The source model asset id.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollisionDataOptions.ModelLodIndex">
            <summary>
            The source model LOD index.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollisionDataOptions.Box">
            <summary>
            The cooked collision bounds.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollisionDataOptions.ConvexFlags">
            <summary>
            The convex generation flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollisionDataOptions.ConvexVertexLimit">
            <summary>
            The convex vertices limit (maximum amount).
            </summary>
        </member>
        <member name="F:FlaxEngine.CollisionDataOptions.MaterialSlotsMask">
            <summary>
            The source model material slots mask. One bit per-slot. Can be used to exclude particular material slots from collision cooking.
            </summary>
        </member>
        <member name="T:FlaxEngine.CollisionData">
            <summary>
            Represents a physics mesh that can be used with a MeshCollider. Physics mesh can be a generic triangle mesh or a convex mesh.
            </summary>
        </member>
        <member name="M:FlaxEngine.CollisionData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.CollisionData"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.CollisionData.Options">
            <summary>
            Gets the options.
            </summary>
        </member>
        <member name="M:FlaxEngine.CollisionData.CookCollision(FlaxEngine.CollisionDataType,FlaxEngine.ModelBase,System.Int32,System.UInt32,FlaxEngine.ConvexMeshGenerationFlags,System.Int32)">
            <summary>
            Cooks the mesh collision data and updates the virtual asset.
            </summary>
            <remarks>
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            </remarks>
            <param name="type">The collision data type.</param>
            <param name="model">The source model. If model is virtual then this method cannot be called from the main thread.</param>
            <param name="modelLodIndex">The source model LOD index.</param>
            <param name="materialSlotsMask">The source model material slots mask. One bit per-slot. Can be used to exclude particular material slots from collision cooking.</param>
            <param name="convexFlags">The convex mesh generation flags.</param>
            <param name="convexVertexLimit">The convex mesh vertex limit. Use values in range [8;255]</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionData.CookCollision(FlaxEngine.CollisionDataType,FlaxEngine.Vector3[],System.UInt32[],FlaxEngine.ConvexMeshGenerationFlags,System.Int32)">
            <summary>
            Cooks the mesh collision data and updates the virtual asset. action cannot be performed on a main thread.
            </summary>
            <remarks>
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            </remarks>
            <param name="type">The collision data type.</param>
            <param name="vertices">The source geometry vertex buffer with vertices positions. Cannot be empty.</param>
            <param name="triangles">The source data index buffer (triangles list). Uses 32-bit stride buffer. Cannot be empty. Length must be multiple of 3 (as 3 vertices build a triangle).</param>
            <param name="convexFlags">The convex mesh generation flags.</param>
            <param name="convexVertexLimit">The convex mesh vertex limit. Use values in range [8;255]</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionData.CookCollision(FlaxEngine.CollisionDataType,FlaxEngine.Vector3[],System.Int32[],FlaxEngine.ConvexMeshGenerationFlags,System.Int32)">
            <summary>
            Cooks the mesh collision data and updates the virtual asset. action cannot be performed on a main thread.
            </summary>
            <remarks>
            Can be used only for virtual assets (see <see cref="P:FlaxEngine.Asset.IsVirtual"/> and <see cref="M:FlaxEngine.Content.CreateVirtualAsset``1"/>).
            </remarks>
            <param name="type">The collision data type.</param>
            <param name="vertices">The source geometry vertex buffer with vertices positions. Cannot be empty.</param>
            <param name="triangles">The source data index buffer (triangles list). Uses 32-bit stride buffer. Cannot be empty. Length must be multiple of 3 (as 3 vertices build a triangle).</param>
            <param name="convexFlags">The convex mesh generation flags.</param>
            <param name="convexVertexLimit">The convex mesh vertex limit. Use values in range [8;255]</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionData.GetModelTriangle(System.UInt32,FlaxEngine.MeshBase@,System.UInt32@)">
            <summary>
            Extracts the triangle index of the original mesh data used for cooking this collision data. Can be used to get vertex attributes of the triangle mesh hit by the raycast.
            </summary>
            <remarks>Supported only for collision data built as triangle mesh and without <see cref="F:FlaxEngine.ConvexMeshGenerationFlags.SuppressFaceRemapTable"/> flag set.</remarks>
            <param name="faceIndex">The face index of the collision mesh.</param>
            <param name="mesh">The result source mesh used to build this collision data (can be null if collision data was cooked using custom geometry without source Model set).</param>
            <param name="meshTriangleIndex">The result triangle index of the source geometry used to build this collision data.</param>
            <returns>True if got a valid triangle index, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionData.ExtractGeometry(FlaxEngine.Vector3[]@,System.Int32[]@)">
            <summary>
            Extracts the collision data geometry into list of triangles.
            </summary>
            <param name="vertexBuffer">The output vertex buffer.</param>
            <param name="indexBuffer">The output index buffer.</param>
        </member>
        <member name="T:FlaxEngine.ContactPoint">
            <summary>
            Contains a contact point data for the collision location.
            </summary>
        </member>
        <member name="F:FlaxEngine.ContactPoint.Point">
            <summary>
            The contact point location in the world space.
            </summary>
        </member>
        <member name="F:FlaxEngine.ContactPoint.Separation">
            <summary>
            The separation value (negative implies penetration).
            </summary>
        </member>
        <member name="F:FlaxEngine.ContactPoint.Normal">
            <summary>
            The contact normal.
            </summary>
        </member>
        <member name="T:FlaxEngine.Collision">
            <summary>
            Contains a collision information passed to the OnCollisionEnter/OnCollisionExit events.
            </summary>
            <summary>
            Contains a collision information passed to the OnCollisionEnter/OnCollisionExit events.
            </summary>
        </member>
        <member name="F:FlaxEngine.Collision.ThisActor">
            <summary>
            The first collider (this instance).
            </summary>
        </member>
        <member name="F:FlaxEngine.Collision.OtherActor">
            <summary>
            The second collider (other instance).
            </summary>
        </member>
        <member name="F:FlaxEngine.Collision.Impulse">
            <summary>
            The total impulse applied to this contact pair to resolve the collision.
            </summary>
            <remarks>
            The total impulse is obtained by summing up impulses applied at all contact points in this collision pair.
            </remarks>
        </member>
        <member name="F:FlaxEngine.Collision.ThisVelocity">
            <summary>
            The linear velocity of the first colliding object (this instance).
            </summary>
        </member>
        <member name="F:FlaxEngine.Collision.OtherVelocity">
            <summary>
            The linear velocity of the second colliding object (other instance).
            </summary>
        </member>
        <member name="F:FlaxEngine.Collision.ContactsCount">
            <summary>
            The amount of valid contact points (less or equal to COLLISION_NAX_CONTACT_POINTS).
            </summary>
        </member>
        <member name="F:FlaxEngine.Collision.Contacts0">
            <summary>
            The contacts locations.
            </summary>
        </member>
        <member name="F:FlaxEngine.Collision.Contacts1">
            <summary>
            The contacts locations.
            </summary>
        </member>
        <member name="F:FlaxEngine.Collision.Contacts2">
            <summary>
            The contacts locations.
            </summary>
        </member>
        <member name="F:FlaxEngine.Collision.Contacts3">
            <summary>
            The contacts locations.
            </summary>
        </member>
        <member name="F:FlaxEngine.Collision.Contacts4">
            <summary>
            The contacts locations.
            </summary>
        </member>
        <member name="F:FlaxEngine.Collision.Contacts5">
            <summary>
            The contacts locations.
            </summary>
        </member>
        <member name="F:FlaxEngine.Collision.Contacts6">
            <summary>
            The contacts locations.
            </summary>
        </member>
        <member name="F:FlaxEngine.Collision.Contacts7">
            <summary>
            The contacts locations.
            </summary>
        </member>
        <member name="P:FlaxEngine.Collision.Contacts">
            <summary>
            The contacts locations.
            </summary>
            <remarks>
            This property allocates an array of contact points.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Collision.RelativeVelocity">
            <summary>
            The relative linear velocity of the two colliding objects.
            </summary>
            <remarks>
            Can be used to detect stronger collisions.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Collision.ThisCollider">
            <summary>
            The first collider (this instance). It may be null if this actor is not the <see cref="T:FlaxEngine.Collider"/> (eg. <see cref="T:FlaxEngine.Terrain"/>).
            </summary>
        </member>
        <member name="P:FlaxEngine.Collision.OtherCollider">
            <summary>
            The second collider (other instance). It may be null if this actor is not the <see cref="T:FlaxEngine.Collider"/> (eg. <see cref="T:FlaxEngine.Terrain"/>).
            </summary>
        </member>
        <member name="M:FlaxEngine.Collision.System#Collections#Generic#IEnumerable{FlaxEngine#ContactPoint}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Collision.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.D6JointAxis">
            <summary>
            Specifies axes that the D6 joint can constrain motion on.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointAxis.X">
            <summary>
            Movement on the X axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointAxis.Y">
            <summary>
            Movement on the Y axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointAxis.Z">
            <summary>
            Movement on the Z axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointAxis.Twist">
            <summary>
            Rotation around the X axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointAxis.SwingY">
            <summary>
            Rotation around the Y axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointAxis.SwingZ">
            <summary>
            Rotation around the Z axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointAxis.MAX">
            <summary>
            The count of items in the D6JointAxis enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.D6JointMotion">
            <summary>
            Specifies type of constraint placed on a specific axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointMotion.Locked">
            <summary>
            Axis is immovable.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointMotion.Limited">
            <summary>
            Axis will be constrained by the specified limits.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointMotion.Free">
            <summary>
            Axis will not be constrained.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointMotion.MAX">
            <summary>
            The count of items in the D6JointMotion enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.D6JointDriveType">
             <summary>
             Type of drives that can be used for moving or rotating bodies attached to the joint.
             </summary>
             <remarks>
             Each drive is an implicit force-limited damped spring:
             force = spring * (target position - position) + damping * (targetVelocity - velocity)
            
             Alternatively, the spring may be configured to generate a specified acceleration instead of a force.
            
             A linear axis is affected by drive only if the corresponding drive flag is set.There are two possible models
             for angular drive : swing / twist, which may be used to drive one or more angular degrees of freedom, or slerp,
             which may only be used to drive all three angular degrees simultaneously.
             </remarks>
        </member>
        <member name="F:FlaxEngine.D6JointDriveType.X">
            <summary>
            Linear movement on the X axis using the linear drive model.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDriveType.Y">
            <summary>
            Linear movement on the Y axis using the linear drive model.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDriveType.Z">
            <summary>
            Linear movement on the Z axis using the linear drive model.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDriveType.Swing">
            <summary>
            Rotation around the Y axis using the twist/swing angular drive model. Should not be used together with Slerp mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDriveType.Twist">
            <summary>
            Rotation around the Z axis using the twist/swing angular drive model. Should not be used together with Slerp mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDriveType.Slerp">
            <summary>
            Rotation using spherical linear interpolation. Uses the SLERP angular drive mode which performs rotation
            by interpolating the quaternion values directly over the shortest path (applies to all three axes, which
            they all must be unlocked).
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDriveType.MAX">
            <summary>
            The count of items in the D6JointDriveType enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.D6JointDrive">
            <summary>
            Specifies parameters for a drive that will attempt to move the joint bodies to the specified drive position and velocity.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDrive.Stiffness">
            <summary>
            The spring strength. Force proportional to the position error.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDrive.Damping">
            <summary>
            Damping strength. Force proportional to the velocity error.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDrive.ForceLimit">
            <summary>
            The maximum force the drive can apply.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDrive.Acceleration">
            <summary>
            If true the drive will generate acceleration instead of forces. Acceleration drives are easier to tune as they account for the masses of the actors to which the joint is attached.
            </summary>
        </member>
        <member name="F:FlaxEngine.D6JointDrive.Default">
            <summary>
            The default <see cref="T:FlaxEngine.D6JointDrive"/> structure.
            </summary>
        </member>
        <member name="M:FlaxEngine.D6JointDrive.#ctor(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.D6JointDrive"/> struct.
            </summary>
            <param name="stiffness">The stiffness.</param>
            <param name="damping">The damping.</param>
            <param name="forceLimit">The force limit.</param>
            <param name="acceleration">if set to <c>true</c> the drive will generate acceleration instead of forces.</param>
        </member>
        <member name="T:FlaxEngine.D6Joint">
            <summary>
            Physics joint that is the most customizable type of joint. This joint type can be used to create all other built-in joint
            types, and to design your own custom ones, but is less intuitive to use. Allows a specification of a linear
            constraint (for example for a slider), twist constraint (rotating around X) and swing constraint (rotating around Y and Z).
            It also allows you to constrain limits to only specific axes or completely lock specific axes.
            </summary>
            <seealso cref="T:FlaxEngine.Joint" />
        </member>
        <member name="M:FlaxEngine.D6Joint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.D6Joint"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.LimitLinear">
            <summary>
            Determines the linear limit used for constraining translation degrees of freedom.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.LimitTwist">
            <summary>
            Determines the angular limit used for constraining the twist (rotation around X) degree of freedom.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.LimitSwing">
            <summary>
            Determines the cone limit used for constraining the swing (rotation around Y and Z) degree of freedom.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.DrivePosition">
            <summary>
            Gets or sets the drive's target position relative to the joint's first body.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.DriveRotation">
            <summary>
            Gets or sets the drive's target rotation relative to the joint's first body.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.DriveLinearVelocity">
            <summary>
            Gets or sets the drive's target linear velocity.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.DriveAngularVelocity">
            <summary>
            Gets or sets the drive's target angular velocity.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.CurrentTwist">
            <summary>
            Gets the twist angle of the joint (in the range (-2*Pi, 2*Pi]).
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.CurrentSwingY">
            <summary>
            Gets the current swing angle of the joint from the Y axis.
            </summary>
        </member>
        <member name="P:FlaxEngine.D6Joint.CurrentSwingZ">
            <summary>
            Gets the current swing angle of the joint from the Z axis.
            </summary>
        </member>
        <member name="M:FlaxEngine.D6Joint.GetMotion(FlaxEngine.D6JointAxis)">
            <summary>
            Gets the motion type around the specified axis.
            </summary>
            <remarks>
            Each axis may independently specify that the degree of freedom is locked (blocking relative movement along or around this axis), limited by the corresponding limit, or free.
            </remarks>
            <param name="axis">The axis the degree of freedom around which the motion type is specified.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.D6Joint.SetMotion(FlaxEngine.D6JointAxis,FlaxEngine.D6JointMotion)">
            <summary>
            Sets the motion type around the specified axis.
            </summary>
            <remarks>
            Each axis may independently specify that the degree of freedom is locked (blocking relative movement along or around this axis), limited by the corresponding limit, or free.
            </remarks>
            <param name="axis">The axis the degree of freedom around which the motion type is specified.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEngine.D6Joint.GetDrive(FlaxEngine.D6JointDriveType)">
            <summary>
            Gets the drive parameters for the specified drive type.
            </summary>
            <param name="index">The type of drive being specified.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.D6Joint.SetDrive(FlaxEngine.D6JointDriveType,FlaxEngine.D6JointDrive)">
            <summary>
            Sets the drive parameters for the specified drive type.
            </summary>
            <param name="index">The type of drive being specified.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:FlaxEngine.DistanceJointFlag">
            <summary>
            Controls distance joint options.
            </summary>
        </member>
        <member name="F:FlaxEngine.DistanceJointFlag.None">
            <summary>
            The none limits.
            </summary>
        </member>
        <member name="F:FlaxEngine.DistanceJointFlag.MinDistance">
            <summary>
            The minimum distance limit.
            </summary>
        </member>
        <member name="F:FlaxEngine.DistanceJointFlag.MaxDistance">
            <summary>
            Uses the maximum distance limit.
            </summary>
        </member>
        <member name="F:FlaxEngine.DistanceJointFlag.Spring">
            <summary>
            Uses the spring when maintaining limits
            </summary>
        </member>
        <member name="T:FlaxEngine.DistanceJoint">
            <summary>
            Physics joint that maintains an upper or lower (or both) bound on the distance between two bodies.
            </summary>
            <seealso cref="T:FlaxEngine.Joint" />
        </member>
        <member name="M:FlaxEngine.DistanceJoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.DistanceJoint"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.DistanceJoint.Flags">
            <summary>
            Gets or sets the joint mode flags. Controls joint behaviour.
            </summary>
        </member>
        <member name="P:FlaxEngine.DistanceJoint.MinDistance">
            <summary>
            Gets or sets the allowed minimum distance for the joint.
            </summary>
            <remarks>
            Used only when DistanceJointFlag.MinDistance flag is set. The minimum distance must be no more than the maximum distance. Default: 0, Range: [0, float.MaxValue].
            </remarks>
        </member>
        <member name="P:FlaxEngine.DistanceJoint.MaxDistance">
            <summary>
            Gets or sets the allowed maximum distance for the joint.
            </summary>
            <remarks>
            Used only when DistanceJointFlag.MaxDistance flag is set. The maximum distance must be no less than the minimum distance. Default: 0, Range: [0, float.MaxValue].
            </remarks>
        </member>
        <member name="P:FlaxEngine.DistanceJoint.Tolerance">
            <summary>
            Gets or sets the error tolerance of the joint.
            </summary>
            <remarks>
            The distance beyond the joint's [min, max] range before the joint becomes active. Default: 25, Range: [0.1, float.MaxValue].
            </remarks>
        </member>
        <member name="P:FlaxEngine.DistanceJoint.SpringParameters">
            <summary>
            Gets or sets the spring parameters.
            </summary>
        </member>
        <member name="P:FlaxEngine.DistanceJoint.CurrentDistance">
            <summary>
            Gets the current distance of the joint.
            </summary>
        </member>
        <member name="T:FlaxEngine.FixedJoint">
            <summary>
            Physics joint that maintains a fixed distance and orientation between its two attached bodies.
            </summary>
            <seealso cref="T:FlaxEngine.Joint" />
        </member>
        <member name="M:FlaxEngine.FixedJoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FixedJoint"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.HingeJointFlag">
            <summary>
            Flags that control hinge joint options.
            </summary>
        </member>
        <member name="F:FlaxEngine.HingeJointFlag.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.HingeJointFlag.Limit">
            <summary>
            The joint limit is enabled.
            </summary>
        </member>
        <member name="F:FlaxEngine.HingeJointFlag.Drive">
            <summary>
            The joint drive is enabled.
            </summary>
        </member>
        <member name="T:FlaxEngine.HingeJointDrive">
            <summary>
            Properties of a drive that drives the joint's angular velocity towards a particular value.
            </summary>
        </member>
        <member name="F:FlaxEngine.HingeJointDrive.Velocity">
            <summary>
            Target velocity of the joint.
            </summary>
        </member>
        <member name="F:FlaxEngine.HingeJointDrive.ForceLimit">
            <summary>
            Maximum torque the drive is allowed to apply.
            </summary>
        </member>
        <member name="F:FlaxEngine.HingeJointDrive.GearRatio">
            <summary>
            Scales the velocity of the first body, and its response to drive torque is scaled down.
            </summary>
        </member>
        <member name="F:FlaxEngine.HingeJointDrive.FreeSpin">
            <summary>
            If the joint is moving faster than the drive's target speed, the drive will try to break.
            If you don't want the breaking to happen set this to true.
            </summary>
        </member>
        <member name="F:FlaxEngine.HingeJointDrive.Default">
            <summary>
            The default <see cref="T:FlaxEngine.HingeJointDrive"/> structure.
            </summary>
        </member>
        <member name="M:FlaxEngine.HingeJointDrive.#ctor(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.HingeJointDrive"/> struct.
            </summary>
            <param name="velocity">The velocity.</param>
            <param name="forceLimit">The force limit.</param>
            <param name="gearRatio">The gear ratio.</param>
            <param name="freeSpin">if set to <c>true</c> [free spin].</param>
        </member>
        <member name="T:FlaxEngine.HingeJoint">
            <summary>
            Physics joint that removes all but a single rotation degree of freedom from its two attached bodies (for example a door hinge).
            </summary>
            <seealso cref="T:FlaxEngine.Joint" />
        </member>
        <member name="M:FlaxEngine.HingeJoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.HingeJoint"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.HingeJoint.Flags">
            <summary>
            Gets or sets the joint mode flags. Controls joint behaviour.
            </summary>
        </member>
        <member name="P:FlaxEngine.HingeJoint.Limit">
            <summary>
            Gets or sets the joint limit properties.
            </summary>
            <remarks>
            Determines the limit of the joint. Limit constrains the motion to the specified angle range. You must enable the limit flag on the joint in order for this to be recognized.
            </remarks>
        </member>
        <member name="P:FlaxEngine.HingeJoint.Drive">
            <summary>
            Gets or sets the joint drive properties.
            </summary>
            <remarks>
            Determines the drive properties of the joint. It drives the joint's angular velocity towards a particular value. You must enable the drive flag on the joint in order for the drive to be active.
            </remarks>
        </member>
        <member name="P:FlaxEngine.HingeJoint.CurrentAngle">
            <summary>
            Gets the current angle of the joint (in radians, in the range (-Pi, Pi]).
            </summary>
        </member>
        <member name="P:FlaxEngine.HingeJoint.CurrentVelocity">
            <summary>
            Gets the current velocity of the joint.
            </summary>
        </member>
        <member name="T:FlaxEngine.Joint">
            <summary>
            A base class for all Joint types. Joints constrain how two rigidbodies move relative to one another (for example a door hinge).
            One of the bodies in the joint must always be movable (non-kinematic and non-static).
            </summary>
            <remarks>
            Joint constraint is created between the parent physic actor (rigidbody, character controller, etc.) and the specified target actor.
            </remarks>
            <seealso cref="T:FlaxEngine.Actor" />
        </member>
        <member name="M:FlaxEngine.Joint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Joint"/>.
            </summary>
        </member>
        <member name="E:FlaxEngine.Joint.JointBreak">
            <summary>
            Occurs when a joint gets broken during simulation.
            </summary>
        </member>
        <member name="P:FlaxEngine.Joint.Target">
            <summary>
            The target actor for the joint. It has to be IPhysicsActor type (eg. RigidBody or CharacterController).
            </summary>
        </member>
        <member name="P:FlaxEngine.Joint.BreakForce">
            <summary>
            Gets or sets the break force. Determines the maximum force the joint can apply before breaking. Broken joints no longer participate in physics simulation.
            </summary>
        </member>
        <member name="P:FlaxEngine.Joint.BreakTorque">
            <summary>
            Gets or sets the break torque. Determines the maximum torque the joint can apply before breaking. Broken joints no longer participate in physics simulation.
            </summary>
        </member>
        <member name="P:FlaxEngine.Joint.EnableCollision">
            <summary>
            Determines whether collision between the two bodies managed by the joint are enabled.
            </summary>
        </member>
        <member name="P:FlaxEngine.Joint.EnableAutoAnchor">
            <summary>
            Determines whether use automatic target anchor position and rotation based on the joint world-space frame (computed when creating joint).
            </summary>
        </member>
        <member name="P:FlaxEngine.Joint.TargetAnchor">
            <summary>
            Gets or sets the target anchor.
            </summary>
            <remarks>
            This is the relative pose which locates the joint frame relative to the target actor.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Joint.TargetAnchorRotation">
            <summary>
            Gets or sets the target anchor rotation.
            </summary>
            <remarks>
            This is the relative pose rotation which locates the joint frame relative to the target actor.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Joint.SetJointLocation(FlaxEngine.Vector3)">
            <summary>
            Sets the location of the joint by automatically computing local position and target anchor to place a joint at the given location (world-space).
            </summary>
            <remarks>Use this utility to automatically place joint at the given location after setting up joint parent and target.</remarks>
            <param name="location">The joint location to set (world-space).</param>
        </member>
        <member name="M:FlaxEngine.Joint.SetJointOrientation(FlaxEngine.Quaternion)">
            <summary>
            Sets the orientation of the joint by automatically computing local orientation and target anchor orientation to orient a joint at the given rotation (world-space).
            </summary>
            <remarks>Use this utility to automatically rotate joint at the given location after setting up joint parent and target.</remarks>
            <param name="orientation">The joint orientation to set (world-space).</param>
        </member>
        <member name="M:FlaxEngine.Joint.GetCurrentForce(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Gets the current force applied by the solver to maintain all constraints.
            </summary>
            <param name="linear">The result linear force.</param>
            <param name="angular">The result angular force.</param>
        </member>
        <member name="T:FlaxEngine.SpringParameters">
            <summary>
            Controls spring parameters for a physics joint limits. If a limit is soft (body bounces back due to restitution when
            the limit is reached) the spring will pull the body back towards the limit using the specified parameters.
            </summary>
        </member>
        <member name="F:FlaxEngine.SpringParameters.Stiffness">
            <summary>
            The spring strength. Force proportional to the position error.
            </summary>
        </member>
        <member name="F:FlaxEngine.SpringParameters.Damping">
            <summary>
            Damping strength. Force proportional to the velocity error.
            </summary>
        </member>
        <member name="F:FlaxEngine.SpringParameters.Default">
            <summary>
            The default <see cref="T:FlaxEngine.SpringParameters"/> structure.
            </summary>
        </member>
        <member name="M:FlaxEngine.SpringParameters.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a spring.
            </summary>
            <param name="stiffness">Spring strength. Force proportional to the position error.</param>
            <param name="damping">Damping strength. Force proportional to the velocity error.</param>
        </member>
        <member name="T:FlaxEngine.LimitLinearRange">
            <summary>
            Represents a joint limit between two distance values. Lower value must be less than the upper value.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinearRange.ContactDist">
            <summary>
            Distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinearRange.Restitution">
            <summary>
            Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinearRange.Spring">
            <summary>
            The spring that controls how are the bodies pulled back towards the limit when they breach it.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinearRange.Lower">
            <summary>
            The lower distance of the limit. Must be less than upper.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinearRange.Upper">
            <summary>
            The upper distance of the limit. Must be more than lower.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinearRange.Default">
            <summary>
            The default <see cref="T:FlaxEngine.LimitLinearRange"/> structure with empty limit.
            </summary>
        </member>
        <member name="M:FlaxEngine.LimitLinearRange.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a hard limit. Once the limit is reached the movement of the attached bodies will come to a stop.
            </summary>
            <param name="lower">The lower distance of the limit. Must be less than upper.</param>
            <param name="upper">The upper distance of the limit. Must be more than lower.</param>
            <param name="contactDist">Distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit. Specify -1 for the default.</param>
        </member>
        <member name="M:FlaxEngine.LimitLinearRange.#ctor(System.Single,System.Single,FlaxEngine.SpringParameters,System.Single)">
            <summary>
            Constructs a soft limit. Once the limit is reached the bodies will bounce back according to the restitution parameter and will be pulled back towards the limit by the provided spring.
            </summary>
            <param name="lower">The lower distance of the limit. Must be less than upper.</param>
            <param name="upper">The upper distance of the limit. Must be more than lower.</param>
            <param name="spring">The spring that controls how are the bodies pulled back towards the limit when they breach it.</param>
            <param name="restitution">Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.</param>
        </member>
        <member name="T:FlaxEngine.LimitLinear">
            <summary>
            Represents a joint limit between zero a single distance value.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinear.ContactDist">
            <summary>
            Distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinear.Restitution">
            <summary>
            Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinear.Spring">
            <summary>
            The spring that controls how are the bodies pulled back towards the limit when they breach it.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinear.Extent">
            <summary>
            The distance at which the limit becomes active.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitLinear.Default">
            <summary>
            The default <see cref="T:FlaxEngine.LimitLinear"/> structure with empty limit.
            </summary>
        </member>
        <member name="M:FlaxEngine.LimitLinear.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a hard limit. Once the limit is reached the movement of the attached bodies will come to a stop.
            </summary>
            <param name="extent">The distance at which the limit becomes active.</param>
            <param name="contactDist">The distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit. Specify -1 for the default.</param>
        </member>
        <member name="M:FlaxEngine.LimitLinear.#ctor(System.Single,FlaxEngine.SpringParameters,System.Single)">
            <summary>
            Constructs a soft limit. Once the limit is reached the bodies will bounce back according to the restitution parameter and will be pulled back towards the limit by the provided spring.
            </summary>
            <param name="extent">The distance at which the limit becomes active.</param>
            <param name="spring">The spring that controls how are the bodies pulled back towards the limit when they breach it.</param>
            <param name="restitution">Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.</param>
        </member>
        <member name="T:FlaxEngine.LimitAngularRange">
            <summary>
            Represents a joint limit between two angles.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAngularRange.ContactDist">
            <summary>
            Distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAngularRange.Restitution">
            <summary>
            Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAngularRange.Spring">
            <summary>
            The spring that controls how are the bodies pulled back towards the limit when they breach it.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAngularRange.Lower">
            <summary>
            Lower angle of the limit (in degrees). Must be less than upper.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAngularRange.Upper">
            <summary>
            Upper angle of the limit (in degrees). Must be less than lower.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAngularRange.Default">
            <summary>
            The default <see cref="T:FlaxEngine.LimitAngularRange"/> structure with empty limit.
            </summary>
        </member>
        <member name="M:FlaxEngine.LimitAngularRange.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a hard limit. Once the limit is reached the movement of the attached bodies will come to a stop.
            </summary>
            <param name="lower">The lower angle of the limit (in degrees). Must be less than upper.</param>
            <param name="upper">The upper angle of the limit (in degrees). Must be more than lower.</param>
            <param name="contactDist">Distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit. Specify -1 for the default.</param>
        </member>
        <member name="M:FlaxEngine.LimitAngularRange.#ctor(System.Single,System.Single,FlaxEngine.SpringParameters,System.Single)">
            <summary>
            Constructs a soft limit. Once the limit is reached the bodies will bounce back according to the restitution parameter and will be pulled back towards the limit by the provided spring.
            </summary>
            <param name="lower">The lower angle of the limit. Must be less than upper.</param>
            <param name="upper">The upper angle of the limit. Must be more than lower.</param>
            <param name="spring">The spring that controls how are the bodies pulled back towards the limit when they breach it.</param>
            <param name="restitution">Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.</param>
        </member>
        <member name="T:FlaxEngine.LimitConeRange">
            <summary>
            Represents a joint limit that constraints movement to within an elliptical cone.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitConeRange.ContactDist">
            <summary>
            Distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitConeRange.Restitution">
            <summary>
            Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitConeRange.Spring">
            <summary>
            The spring that controls how are the bodies pulled back towards the limit when they breach it.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitConeRange.YLimitAngle">
            <summary>
            The Y angle of the cone (in degrees). Movement is constrained between 0 and this angle on the Y axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitConeRange.ZLimitAngle">
            <summary>
            The Z angle of the cone (in degrees). Movement is constrained between 0 and this angle on the Z axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitConeRange.Default">
            <summary>
            The default <see cref="T:FlaxEngine.LimitConeRange"/> structure with a 45 degree cone limit.
            </summary>
        </member>
        <member name="M:FlaxEngine.LimitConeRange.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a hard limit. Once the limit is reached the movement of the attached bodies will come to a stop.
            </summary>
            <param name="yLimitAngle">The Y angle of the cone (in degrees). Movement is constrained between 0 and this angle on the Y axis.</param>
            <param name="zLimitAngle">The Z angle of the cone (in degrees). Movement is constrained between 0 and this angle on the Z axis.</param>
            <param name="contactDist">Distance from the limit at which it becomes active. Allows the solver to activate earlier than the limit is reached to avoid breaking the limit. Specify -1 for the default.</param>
        </member>
        <member name="M:FlaxEngine.LimitConeRange.#ctor(System.Single,System.Single,FlaxEngine.SpringParameters,System.Single)">
            <summary>
            Constructs a soft limit. Once the limit is reached the bodies will bounce back according to the restitution parameter and will be pulled back towards the limit by the provided spring.
            </summary>
            <param name="yLimitAngle">The Y angle of the cone (in degrees). Movement is constrained between 0 and this angle on the Y axis.</param>
            <param name="zLimitAngle">The Z angle of the cone (in degrees). Movement is constrained between 0 and this angle on the Z axis.</param>
            <param name="spring">The spring that controls how are the bodies pulled back towards the limit when they breach it.</param>
            <param name="restitution">Controls how do objects react when the limit is reached, values closer to zero specify non-elastic collision, while those closer to one specify more elastic (i.e bouncy) collision. Must be in [0, 1] range.</param>
        </member>
        <member name="T:FlaxEngine.SliderJointFlag">
            <summary>
            Flags that control slider joint options.
            </summary>
        </member>
        <member name="F:FlaxEngine.SliderJointFlag.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.SliderJointFlag.Limit">
            <summary>
            The joint linear range limit is enabled.
            </summary>
        </member>
        <member name="T:FlaxEngine.SliderJoint">
            <summary>
            Physics joint that removes all but a single translational degree of freedom. Bodies are allowed to move along a single axis.
            </summary>
            <seealso cref="T:FlaxEngine.Joint" />
        </member>
        <member name="M:FlaxEngine.SliderJoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SliderJoint"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SliderJoint.Flags">
            <summary>
            Gets or sets the joint mode flags. Controls joint behaviour.
            </summary>
        </member>
        <member name="P:FlaxEngine.SliderJoint.Limit">
            <summary>
            Gets or sets the joint limit properties.
            </summary>
            <remarks>
            Determines the limit of the joint. Limit constrains the motion to the specified angle range. You must enable the limit flag on the joint in order for this to be recognized.
            </remarks>
        </member>
        <member name="P:FlaxEngine.SliderJoint.CurrentPosition">
            <summary>
            Gets the current displacement of the joint along its axis.
            </summary>
        </member>
        <member name="P:FlaxEngine.SliderJoint.CurrentVelocity">
            <summary>
            Gets the current velocity of the joint along its axis.
            </summary>
        </member>
        <member name="T:FlaxEngine.SphericalJointFlag">
            <summary>
            Flags that control spherical joint options.
            </summary>
        </member>
        <member name="F:FlaxEngine.SphericalJointFlag.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.SphericalJointFlag.Limit">
            <summary>
            The joint cone range limit is enabled.
            </summary>
        </member>
        <member name="T:FlaxEngine.SphericalJoint">
            <summary>
            Physics joint that removes all translational degrees of freedom but allows all rotational degrees of freedom.
            Essentially this ensures that the anchor points of the two bodies are always coincident. Bodies are allowed to
            rotate around the anchor points, and their rotation can be limited by an elliptical cone.
            </summary>
            <seealso cref="T:FlaxEngine.Joint" />
        </member>
        <member name="M:FlaxEngine.SphericalJoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SphericalJoint"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SphericalJoint.Flags">
            <summary>
            Gets or sets the joint mode flags. Controls joint behaviour.
            </summary>
        </member>
        <member name="P:FlaxEngine.SphericalJoint.Limit">
            <summary>
            Gets or sets the joint limit properties.
            </summary>
            <remarks>
            Determines the limit of the joint. Limit constrains the motion to the specified angle range. You must enable the limit flag on the joint in order for this to be recognized.
            </remarks>
        </member>
        <member name="T:FlaxEngine.PhysicalMaterial">
            <summary>
            Physical materials are used to define the response of a physical object when interacting dynamically with the world.
            </summary>
        </member>
        <member name="M:FlaxEngine.PhysicalMaterial.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.PhysicalMaterial"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicalMaterial.Friction">
            <summary>
            The friction value of surface, controls how easily things can slide on this surface.
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicalMaterial.FrictionCombineMode">
            <summary>
            The friction combine mode, controls how friction is computed for multiple materials.
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicalMaterial.OverrideFrictionCombineMode">
            <summary>
            If set we will use the FrictionCombineMode of this material, instead of the FrictionCombineMode found in the Physics settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicalMaterial.Restitution">
            <summary>
            The restitution or 'bounciness' of this surface, between 0 (no bounce) and 1 (outgoing velocity is same as incoming).
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicalMaterial.RestitutionCombineMode">
            <summary>
            The restitution combine mode, controls how restitution is computed for multiple materials.
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicalMaterial.OverrideRestitutionCombineMode">
            <summary>
            If set we will use the RestitutionCombineMode of this material, instead of the RestitutionCombineMode found in the Physics settings.
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicalMaterial.Density">
            <summary>
            Physical material density in kilograms per cubic meter (kg/m^3). Higher density means a higher weight of the object using this material. Wood is around 700, water is 1000, steel is around 8000.
            </summary>
        </member>
        <member name="T:FlaxEngine.Physics">
            <summary>
            Physics simulation system.
            </summary>
        </member>
        <member name="P:FlaxEngine.Physics.DefaultScene">
            <summary>
            The default physics scene.
            </summary>
        </member>
        <member name="P:FlaxEngine.Physics.Scenes">
            <summary>
            List with all physics scenes (readonly).
            </summary>
        </member>
        <member name="P:FlaxEngine.Physics.AutoSimulation">
            <summary>
            The automatic simulation feature. True if perform physics simulation after on fixed update by auto, otherwise user should do it.
            </summary>
        </member>
        <member name="P:FlaxEngine.Physics.Gravity">
            <summary>
            Gets or sets the current gravity force.
            </summary>
        </member>
        <member name="P:FlaxEngine.Physics.EnableCCD">
            <summary>
            Gets or sets the CCD feature enable flag.
            </summary>
        </member>
        <member name="P:FlaxEngine.Physics.BounceThresholdVelocity">
            <summary>
            Gets or sets the minimum relative velocity required for an object to bounce.
            </summary>
        </member>
        <member name="P:FlaxEngine.Physics.IsDuringSimulation">
            <summary>
            Checks if physical simulation is running.
            </summary>
        </member>
        <member name="M:FlaxEngine.Physics.FindOrCreateScene(System.String)">
            <summary>
            Finds an existing <see cref="T:FlaxEngine.PhysicsScene"/> or creates it if it does not exist.
            </summary>
        </member>
        <member name="M:FlaxEngine.Physics.FindScene(System.String)">
            <summary>
            Finds an existing scene.
            </summary>
        </member>
        <member name="M:FlaxEngine.Physics.Simulate(System.Single)">
            <summary>
            Called during main engine loop to start physic simulation. Use CollectResults after.
            </summary>
            <param name="dt">The delta time (in seconds).</param>
        </member>
        <member name="M:FlaxEngine.Physics.CollectResults">
            <summary>
            Called during main engine loop to collect physic simulation results and apply them as well as fire collision events.
            </summary>
        </member>
        <member name="M:FlaxEngine.Physics.FlushRequests">
            <summary>
            Flushes any latent physics actions (eg. object destroy, actor add/remove to the scene, etc.).
            </summary>
        </member>
        <member name="M:FlaxEngine.Physics.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a raycast against objects in the scene.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if ray hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit@,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a raycast against objects in the scene, returns results in a RayCastHit structure.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="hitInfo">The result hit information. Valid only when method returns true.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if ray hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.RayCastAll(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit[]@,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a raycast against objects in the scene, returns results in a RayCastHit structure.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="results">The result hits. Valid only when method returns true.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if ray hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.BoxCast(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a box geometry.
            </summary>
            <param name="center">The box center.</param>
            <param name="halfExtents">The half size of the box in each direction.</param>
            <param name="direction">The normalized direction in which cast a box.</param>
            <param name="rotation">The box rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if box hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.BoxCast(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit@,FlaxEngine.Quaternion,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a box geometry.
            </summary>
            <param name="center">The box center.</param>
            <param name="halfExtents">The half size of the box in each direction.</param>
            <param name="direction">The normalized direction in which cast a box.</param>
            <param name="hitInfo">The result hit information. Valid only when method returns true.</param>
            <param name="rotation">The box rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if box hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.BoxCastAll(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit[]@,FlaxEngine.Quaternion,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a box geometry.
            </summary>
            <param name="center">The box center.</param>
            <param name="halfExtents">The half size of the box in each direction.</param>
            <param name="direction">The normalized direction in which cast a box.</param>
            <param name="results">The result hits. Valid only when method returns true.</param>
            <param name="rotation">The box rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if box hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.SphereCast(FlaxEngine.Vector3,System.Single,FlaxEngine.Vector3,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a sphere geometry.
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="direction">The normalized direction in which cast a sphere.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if sphere hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.SphereCast(FlaxEngine.Vector3,System.Single,FlaxEngine.Vector3,FlaxEngine.RayCastHit@,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a sphere geometry.
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="direction">The normalized direction in which cast a sphere.</param>
            <param name="hitInfo">The result hit information. Valid only when method returns true.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if sphere hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.SphereCastAll(FlaxEngine.Vector3,System.Single,FlaxEngine.Vector3,FlaxEngine.RayCastHit[]@,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a sphere geometry.
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="direction">The normalized direction in which cast a sphere.</param>
            <param name="results">The result hits. Valid only when method returns true.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if sphere hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.CapsuleCast(FlaxEngine.Vector3,System.Single,System.Single,FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a capsule geometry.
            </summary>
            <param name="center">The capsule center.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="height">The height of the capsule, excluding the top and bottom spheres.</param>
            <param name="direction">The normalized direction in which cast a capsule.</param>
            <param name="rotation">The capsule rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if capsule hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.CapsuleCast(FlaxEngine.Vector3,System.Single,System.Single,FlaxEngine.Vector3,FlaxEngine.RayCastHit@,FlaxEngine.Quaternion,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a capsule geometry.
            </summary>
            <param name="center">The capsule center.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="height">The height of the capsule, excluding the top and bottom spheres.</param>
            <param name="direction">The normalized direction in which cast a capsule.</param>
            <param name="hitInfo">The result hit information. Valid only when method returns true.</param>
            <param name="rotation">The capsule rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if capsule hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.CapsuleCastAll(FlaxEngine.Vector3,System.Single,System.Single,FlaxEngine.Vector3,FlaxEngine.RayCastHit[]@,FlaxEngine.Quaternion,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a capsule geometry.
            </summary>
            <param name="center">The capsule center.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="height">The height of the capsule, excluding the top and bottom spheres.</param>
            <param name="direction">The normalized direction in which cast a capsule.</param>
            <param name="results">The result hits. Valid only when method returns true.</param>
            <param name="rotation">The capsule rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if capsule hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.ConvexCast(FlaxEngine.Vector3,FlaxEngine.CollisionData,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a convex mesh.
            </summary>
            <param name="center">The convex mesh center.</param>
            <param name="convexMesh">Collision data of the convex mesh.</param>
            <param name="scale">The scale of the convex mesh.</param>
            <param name="direction">The normalized direction in which cast a convex mesh.</param>
            <param name="rotation">The convex mesh rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if convex mesh hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.ConvexCast(FlaxEngine.Vector3,FlaxEngine.CollisionData,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit@,FlaxEngine.Quaternion,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a convex mesh.
            </summary>
            <param name="center">The convex mesh center.</param>
            <param name="convexMesh">Collision data of the convex mesh.</param>
            <param name="scale">The scale of the convex mesh.</param>
            <param name="direction">The normalized direction in which cast a convex mesh.</param>
            <param name="hitInfo">The result hit information. Valid only when method returns true.</param>
            <param name="rotation">The convex mesh rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if convex mesh hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.ConvexCastAll(FlaxEngine.Vector3,FlaxEngine.CollisionData,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit[]@,FlaxEngine.Quaternion,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a convex mesh.
            </summary>
            <param name="center">The convex mesh center.</param>
            <param name="convexMesh">Collision data of the convex mesh.</param>
            <param name="scale">The scale of the convex mesh.</param>
            <param name="direction">The normalized direction in which cast a convex mesh.</param>
            <param name="results">The result hits. Valid only when method returns true.</param>
            <param name="rotation">The convex mesh rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if convex mesh hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.CheckBox(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Quaternion,System.UInt32,System.Boolean)">
            <summary>
            Checks whether the given box overlaps with other colliders or not.
            </summary>
            <param name="center">The box center.</param>
            <param name="halfExtents">The half size of the box in each direction.</param>
            <param name="rotation">The box rotation.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if box overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.CheckSphere(FlaxEngine.Vector3,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Checks whether the given sphere overlaps with other colliders or not.
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if sphere overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.CheckCapsule(FlaxEngine.Vector3,System.Single,System.Single,FlaxEngine.Quaternion,System.UInt32,System.Boolean)">
            <summary>
            Checks whether the given capsule overlaps with other colliders or not.
            </summary>
            <param name="center">The capsule center.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="height">The height of the capsule, excluding the top and bottom spheres.</param>
            <param name="rotation">The capsule rotation.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if capsule overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.CheckConvex(FlaxEngine.Vector3,FlaxEngine.CollisionData,FlaxEngine.Vector3,FlaxEngine.Quaternion,System.UInt32,System.Boolean)">
            <summary>
            Checks whether the given convex mesh overlaps with other colliders or not.
            </summary>
            <param name="center">The convex mesh center.</param>
            <param name="convexMesh">Collision data of the convex mesh.</param>
            <param name="scale">The scale of the convex mesh.</param>
            <param name="rotation">The convex mesh rotation.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if convex mesh overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.OverlapBox(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Collider[]@,FlaxEngine.Quaternion,System.UInt32,System.Boolean)">
            <summary>
            Finds all colliders touching or inside of the given box.
            </summary>
            <param name="center">The box center.</param>
            <param name="halfExtents">The half size of the box in each direction.</param>
            <param name="rotation">The box rotation.</param>
            <param name="results">The result colliders that overlap with the given box. Valid only when method returns true.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if box overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.OverlapSphere(FlaxEngine.Vector3,System.Single,FlaxEngine.Collider[]@,System.UInt32,System.Boolean)">
            <summary>
            Finds all colliders touching or inside of the given sphere.
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="results">The result colliders that overlap with the given sphere. Valid only when method returns true.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if sphere overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.OverlapCapsule(FlaxEngine.Vector3,System.Single,System.Single,FlaxEngine.Collider[]@,FlaxEngine.Quaternion,System.UInt32,System.Boolean)">
            <summary>
            Finds all colliders touching or inside of the given capsule.
            </summary>
            <param name="center">The capsule center.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="height">The height of the capsule, excluding the top and bottom spheres.</param>
            <param name="results">The result colliders that overlap with the given capsule. Valid only when method returns true.</param>
            <param name="rotation">The capsule rotation.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if capsule overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.OverlapConvex(FlaxEngine.Vector3,FlaxEngine.CollisionData,FlaxEngine.Vector3,FlaxEngine.Collider[]@,FlaxEngine.Quaternion,System.UInt32,System.Boolean)">
            <summary>
            Finds all colliders touching or inside of the given convex mesh.
            </summary>
            <param name="center">The convex mesh center.</param>
            <param name="convexMesh">Collision data of the convex mesh.</param>
            <param name="scale">The scale of the convex mesh.</param>
            <param name="results">The result colliders that overlap with the given convex mesh. Valid only when method returns true.</param>
            <param name="rotation">The convex mesh rotation.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if convex mesh overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.OverlapBox(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.PhysicsColliderActor[]@,FlaxEngine.Quaternion,System.UInt32,System.Boolean)">
            <summary>
            Finds all colliders touching or inside of the given box.
            </summary>
            <param name="center">The box center.</param>
            <param name="halfExtents">The half size of the box in each direction.</param>
            <param name="rotation">The box rotation.</param>
            <param name="results">The result colliders that overlap with the given box. Valid only when method returns true.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if box overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.OverlapSphere(FlaxEngine.Vector3,System.Single,FlaxEngine.PhysicsColliderActor[]@,System.UInt32,System.Boolean)">
            <summary>
            Finds all colliders touching or inside of the given sphere.
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="results">The result colliders that overlap with the given sphere. Valid only when method returns true.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if sphere overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.OverlapCapsule(FlaxEngine.Vector3,System.Single,System.Single,FlaxEngine.PhysicsColliderActor[]@,FlaxEngine.Quaternion,System.UInt32,System.Boolean)">
            <summary>
            Finds all colliders touching or inside of the given capsule.
            </summary>
            <param name="center">The capsule center.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="height">The height of the capsule, excluding the top and bottom spheres.</param>
            <param name="results">The result colliders that overlap with the given capsule. Valid only when method returns true.</param>
            <param name="rotation">The capsule rotation.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if capsule overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Physics.OverlapConvex(FlaxEngine.Vector3,FlaxEngine.CollisionData,FlaxEngine.Vector3,FlaxEngine.PhysicsColliderActor[]@,FlaxEngine.Quaternion,System.UInt32,System.Boolean)">
            <summary>
            Finds all colliders touching or inside of the given convex mesh.
            </summary>
            <param name="center">The convex mesh center.</param>
            <param name="convexMesh">Collision data of the convex mesh.</param>
            <param name="scale">The scale of the convex mesh.</param>
            <param name="results">The result colliders that overlap with the given convex mesh. Valid only when method returns true.</param>
            <param name="rotation">The convex mesh rotation.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if convex mesh overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.PhysicsScene">
            <summary>
            Physical simulation scene.
            </summary>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.PhysicsScene"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.PhysicsScene.Name">
            <summary>
            Gets the name of the scene.
            </summary>
        </member>
        <member name="P:FlaxEngine.PhysicsScene.AutoSimulation">
            <summary>
            Gets or sets the automatic simulation feature that perform physics simulation after on fixed update by auto, otherwise user should do it.
            </summary>
        </member>
        <member name="P:FlaxEngine.PhysicsScene.Gravity">
            <summary>
            Gets or sets the current gravity force.
            </summary>
        </member>
        <member name="P:FlaxEngine.PhysicsScene.EnableCCD">
            <summary>
            Gets or sets the CCD feature enable flag.
            </summary>
        </member>
        <member name="P:FlaxEngine.PhysicsScene.BounceThresholdVelocity">
            <summary>
            Gets or sets the minimum relative velocity required for an object to bounce.
            </summary>
        </member>
        <member name="P:FlaxEngine.PhysicsScene.IsDuringSimulation">
            <summary>
            Checks if physical simulation is running.
            </summary>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.Simulate(System.Single)">
            <summary>
            Called during main engine loop to start physic simulation. Use CollectResults after.
            </summary>
            <param name="dt">The delta time (in seconds).</param>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.CollectResults">
            <summary>
            Called to collect physic simulation results and apply them as well as fire collision events.
            </summary>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a raycast against objects in the scene.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if ray hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit@,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a raycast against objects in the scene, returns results in a RayCastHit structure.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="hitInfo">The result hit information. Valid only when method returns true.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if ray hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.RayCastAll(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit[]@,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a raycast against objects in the scene, returns results in a RayCastHit structure.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="results">The result hits. Valid only when method returns true.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if ray hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.BoxCast(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a box geometry.
            </summary>
            <param name="center">The box center.</param>
            <param name="halfExtents">The half size of the box in each direction.</param>
            <param name="direction">The normalized direction in which cast a box.</param>
            <param name="rotation">The box rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if box hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.BoxCast(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit@,FlaxEngine.Quaternion,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a box geometry.
            </summary>
            <param name="center">The box center.</param>
            <param name="halfExtents">The half size of the box in each direction.</param>
            <param name="direction">The normalized direction in which cast a box.</param>
            <param name="hitInfo">The result hit information. Valid only when method returns true.</param>
            <param name="rotation">The box rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if box hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.BoxCastAll(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit[]@,FlaxEngine.Quaternion,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a box geometry.
            </summary>
            <param name="center">The box center.</param>
            <param name="halfExtents">The half size of the box in each direction.</param>
            <param name="direction">The normalized direction in which cast a box.</param>
            <param name="results">The result hits. Valid only when method returns true.</param>
            <param name="rotation">The box rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if box hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.SphereCast(FlaxEngine.Vector3,System.Single,FlaxEngine.Vector3,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a sphere geometry.
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="direction">The normalized direction in which cast a sphere.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if sphere hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.SphereCast(FlaxEngine.Vector3,System.Single,FlaxEngine.Vector3,FlaxEngine.RayCastHit@,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a sphere geometry.
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="direction">The normalized direction in which cast a sphere.</param>
            <param name="hitInfo">The result hit information. Valid only when method returns true.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if sphere hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.SphereCastAll(FlaxEngine.Vector3,System.Single,FlaxEngine.Vector3,FlaxEngine.RayCastHit[]@,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a sphere geometry.
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="direction">The normalized direction in which cast a sphere.</param>
            <param name="results">The result hits. Valid only when method returns true.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if sphere hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.CapsuleCast(FlaxEngine.Vector3,System.Single,System.Single,FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a capsule geometry.
            </summary>
            <param name="center">The capsule center.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="height">The height of the capsule, excluding the top and bottom spheres.</param>
            <param name="direction">The normalized direction in which cast a capsule.</param>
            <param name="rotation">The capsule rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if capsule hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.CapsuleCast(FlaxEngine.Vector3,System.Single,System.Single,FlaxEngine.Vector3,FlaxEngine.RayCastHit@,FlaxEngine.Quaternion,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a capsule geometry.
            </summary>
            <param name="center">The capsule center.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="height">The height of the capsule, excluding the top and bottom spheres.</param>
            <param name="direction">The normalized direction in which cast a capsule.</param>
            <param name="hitInfo">The result hit information. Valid only when method returns true.</param>
            <param name="rotation">The capsule rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if capsule hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.CapsuleCastAll(FlaxEngine.Vector3,System.Single,System.Single,FlaxEngine.Vector3,FlaxEngine.RayCastHit[]@,FlaxEngine.Quaternion,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a capsule geometry.
            </summary>
            <param name="center">The capsule center.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="height">The height of the capsule, excluding the top and bottom spheres.</param>
            <param name="direction">The normalized direction in which cast a capsule.</param>
            <param name="results">The result hits. Valid only when method returns true.</param>
            <param name="rotation">The capsule rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if capsule hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.ConvexCast(FlaxEngine.Vector3,FlaxEngine.CollisionData,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a convex mesh.
            </summary>
            <param name="center">The convex mesh center.</param>
            <param name="convexMesh">Collision data of the convex mesh.</param>
            <param name="scale">The scale of the convex mesh.</param>
            <param name="direction">The normalized direction in which cast a convex mesh.</param>
            <param name="rotation">The convex mesh rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if convex mesh hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.ConvexCast(FlaxEngine.Vector3,FlaxEngine.CollisionData,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit@,FlaxEngine.Quaternion,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a convex mesh.
            </summary>
            <param name="center">The convex mesh center.</param>
            <param name="convexMesh">Collision data of the convex mesh.</param>
            <param name="scale">The scale of the convex mesh.</param>
            <param name="direction">The normalized direction in which cast a convex mesh.</param>
            <param name="hitInfo">The result hit information. Valid only when method returns true.</param>
            <param name="rotation">The convex mesh rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if convex mesh hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.ConvexCastAll(FlaxEngine.Vector3,FlaxEngine.CollisionData,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit[]@,FlaxEngine.Quaternion,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Performs a sweep test against objects in the scene using a convex mesh.
            </summary>
            <param name="center">The convex mesh center.</param>
            <param name="convexMesh">Collision data of the convex mesh.</param>
            <param name="scale">The scale of the convex mesh.</param>
            <param name="direction">The normalized direction in which cast a convex mesh.</param>
            <param name="results">The result hits. Valid only when method returns true.</param>
            <param name="rotation">The convex mesh rotation.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if convex mesh hits an matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.CheckBox(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Quaternion,System.UInt32,System.Boolean)">
            <summary>
            Checks whether the given box overlaps with other colliders or not.
            </summary>
            <param name="center">The box center.</param>
            <param name="halfExtents">The half size of the box in each direction.</param>
            <param name="rotation">The box rotation.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if box overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.CheckSphere(FlaxEngine.Vector3,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Checks whether the given sphere overlaps with other colliders or not.
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if sphere overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.CheckCapsule(FlaxEngine.Vector3,System.Single,System.Single,FlaxEngine.Quaternion,System.UInt32,System.Boolean)">
            <summary>
            Checks whether the given capsule overlaps with other colliders or not.
            </summary>
            <param name="center">The capsule center.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="height">The height of the capsule, excluding the top and bottom spheres.</param>
            <param name="rotation">The capsule rotation.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if capsule overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.CheckConvex(FlaxEngine.Vector3,FlaxEngine.CollisionData,FlaxEngine.Vector3,FlaxEngine.Quaternion,System.UInt32,System.Boolean)">
            <summary>
            Checks whether the given convex mesh overlaps with other colliders or not.
            </summary>
            <param name="center">The convex mesh center.</param>
            <param name="convexMesh">Collision data of the convex mesh.</param>
            <param name="scale">The scale of the convex mesh.</param>
            <param name="rotation">The convex mesh rotation.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if convex mesh overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.OverlapBox(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Collider[]@,FlaxEngine.Quaternion,System.UInt32,System.Boolean)">
            <summary>
            Finds all colliders touching or inside of the given box.
            </summary>
            <param name="center">The box center.</param>
            <param name="halfExtents">The half size of the box in each direction.</param>
            <param name="rotation">The box rotation.</param>
            <param name="results">The result colliders that overlap with the given box. Valid only when method returns true.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if box overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.OverlapSphere(FlaxEngine.Vector3,System.Single,FlaxEngine.Collider[]@,System.UInt32,System.Boolean)">
            <summary>
            Finds all colliders touching or inside of the given sphere.
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="results">The result colliders that overlap with the given sphere. Valid only when method returns true.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if sphere overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.OverlapCapsule(FlaxEngine.Vector3,System.Single,System.Single,FlaxEngine.Collider[]@,FlaxEngine.Quaternion,System.UInt32,System.Boolean)">
            <summary>
            Finds all colliders touching or inside of the given capsule.
            </summary>
            <param name="center">The capsule center.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="height">The height of the capsule, excluding the top and bottom spheres.</param>
            <param name="results">The result colliders that overlap with the given capsule. Valid only when method returns true.</param>
            <param name="rotation">The capsule rotation.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if capsule overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.OverlapConvex(FlaxEngine.Vector3,FlaxEngine.CollisionData,FlaxEngine.Vector3,FlaxEngine.Collider[]@,FlaxEngine.Quaternion,System.UInt32,System.Boolean)">
            <summary>
            Finds all colliders touching or inside of the given convex mesh.
            </summary>
            <param name="center">The convex mesh center.</param>
            <param name="convexMesh">Collision data of the convex mesh.</param>
            <param name="scale">The scale of the convex mesh.</param>
            <param name="results">The result colliders that overlap with the given convex mesh. Valid only when method returns true.</param>
            <param name="rotation">The convex mesh rotation.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if convex mesh overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.OverlapBox(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.PhysicsColliderActor[]@,FlaxEngine.Quaternion,System.UInt32,System.Boolean)">
            <summary>
            Finds all colliders touching or inside of the given box.
            </summary>
            <param name="center">The box center.</param>
            <param name="halfExtents">The half size of the box in each direction.</param>
            <param name="rotation">The box rotation.</param>
            <param name="results">The result colliders that overlap with the given box. Valid only when method returns true.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if box overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.OverlapSphere(FlaxEngine.Vector3,System.Single,FlaxEngine.PhysicsColliderActor[]@,System.UInt32,System.Boolean)">
            <summary>
            Finds all colliders touching or inside of the given sphere.
            </summary>
            <param name="center">The sphere center.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="results">The result colliders that overlap with the given sphere. Valid only when method returns true.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if sphere overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.OverlapCapsule(FlaxEngine.Vector3,System.Single,System.Single,FlaxEngine.PhysicsColliderActor[]@,FlaxEngine.Quaternion,System.UInt32,System.Boolean)">
            <summary>
            Finds all colliders touching or inside of the given capsule.
            </summary>
            <param name="center">The capsule center.</param>
            <param name="radius">The radius of the capsule.</param>
            <param name="height">The height of the capsule, excluding the top and bottom spheres.</param>
            <param name="results">The result colliders that overlap with the given capsule. Valid only when method returns true.</param>
            <param name="rotation">The capsule rotation.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if capsule overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PhysicsScene.OverlapConvex(FlaxEngine.Vector3,FlaxEngine.CollisionData,FlaxEngine.Vector3,FlaxEngine.PhysicsColliderActor[]@,FlaxEngine.Quaternion,System.UInt32,System.Boolean)">
            <summary>
            Finds all colliders touching or inside of the given convex mesh.
            </summary>
            <param name="center">The convex mesh center.</param>
            <param name="convexMesh">Collision data of the convex mesh.</param>
            <param name="scale">The scale of the convex mesh.</param>
            <param name="results">The result colliders that overlap with the given convex mesh. Valid only when method returns true.</param>
            <param name="rotation">The convex mesh rotation.</param>
            <param name="layerMask">The layer mask used to filter the results.</param>
            <param name="hitTriggers">If set to <c>true</c> triggers will be hit, otherwise will skip them.</param>
            <returns>True if convex mesh overlaps any matching object, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.PhysicsCombineMode">
            <summary>
            Enumeration that determines the way in which two material properties will be combined to yield a friction or restitution coefficient for a collision.
            </summary>
            <remarks>
            Physics doesn't have any inherent combinations because the coefficients are determined empirically on a case by case basis.
            However, simulating this with a pairwise lookup table is often impractical.
            The effective combine mode for the pair is maximum(material0.combineMode, material1.combineMode).
            </remarks>
        </member>
        <member name="F:FlaxEngine.PhysicsCombineMode.Average">
            <summary>
            Uses the average value of the touching materials: (a+b)/2.
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicsCombineMode.Minimum">
            <summary>
            Uses the smaller value of the touching materials: min(a,b)
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicsCombineMode.Multiply">
            <summary>
            Multiplies the values of the touching materials: a*b
            </summary>
        </member>
        <member name="F:FlaxEngine.PhysicsCombineMode.Maximum">
            <summary>
            Uses the larger value of the touching materials: max(a, b)
            </summary>
        </member>
        <member name="T:FlaxEngine.ForceMode">
            <summary>
            Force mode type determines the exact operation that is carried out when applying the force on a rigidbody.
            </summary>
        </member>
        <member name="F:FlaxEngine.ForceMode.Force">
            <summary>
            Add a continuous force to the rigidbody, using its mass. The parameter has unit of mass * distance / time^2, i.e. a force.
            </summary>
        </member>
        <member name="F:FlaxEngine.ForceMode.Impulse">
            <summary>
            Add an instant force impulse to the rigidbody, using its mass. The parameter has unit of mass * distance / time.
            </summary>
        </member>
        <member name="F:FlaxEngine.ForceMode.VelocityChange">
            <summary>
            Add an instant velocity change to the rigidbody, ignoring its mass. The parameter has unit of distance / time, i.e. the effect is mass independent: a velocity change.
            </summary>
        </member>
        <member name="F:FlaxEngine.ForceMode.Acceleration">
            <summary>
            Add a continuous acceleration to the rigidbody, ignoring its mass. The parameter has unit of distance / time^2, i.e. an acceleration. It gets treated just like a force except the mass is not divided out before integration.
            </summary>
        </member>
        <member name="T:FlaxEngine.RigidbodyConstraints">
            <summary>
            Dynamic rigidbodies movement and rotation locking flags. Provide a mechanism to lock motion along/around a specific axis or set of axes to constrain object motion.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.None">
            <summary>
            No constraints.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockPositionX">
            <summary>
            Freeze motion along the X-axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockPositionY">
            <summary>
            Freeze motion along the Y-axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockPositionZ">
            <summary>
            Freeze motion along the Z-axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockRotationX">
            <summary>
            Freeze rotation along the X-axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockRotationY">
            <summary>
            Freeze rotation along the Y-axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockRotationZ">
            <summary>
            Freeze rotation along the Z-axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockPosition">
            <summary>
            Freeze motion along all axes.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockRotation">
            <summary>
            Freeze rotation along all axes.
            </summary>
        </member>
        <member name="F:FlaxEngine.RigidbodyConstraints.LockAll">
            <summary>
            Freeze rotation and motion along all axes.
            </summary>
        </member>
        <member name="T:FlaxEngine.RayCastHit">
            <summary>
            Raycast hit result data.
            </summary>
        </member>
        <member name="F:FlaxEngine.RayCastHit.Collider">
            <summary>
            The collider that was hit.
            </summary>
        </member>
        <member name="F:FlaxEngine.RayCastHit.Normal">
            <summary>
            The normal of the surface the ray hit.
            </summary>
        </member>
        <member name="F:FlaxEngine.RayCastHit.Distance">
            <summary>
            The distance from the ray's origin to the hit location.
            </summary>
        </member>
        <member name="F:FlaxEngine.RayCastHit.Point">
            <summary>
            The point in the world space where ray hit the collider.
            </summary>
        </member>
        <member name="F:FlaxEngine.RayCastHit.FaceIndex">
            <summary>
            The index of the face that was hit. Valid only for convex mesh (polygon index), triangle mesh (triangle index) and height field (triangle index).
            </summary>
            <seealso cref="M:FlaxEngine.CollisionData.GetModelTriangle(System.UInt32,FlaxEngine.MeshBase@,System.UInt32@)" />
        </member>
        <member name="F:FlaxEngine.RayCastHit.UV">
            <summary>
            The barycentric coordinates of hit triangle. Valid only for triangle mesh and height field.
            </summary>
        </member>
        <member name="T:FlaxEngine.Clipboard">
            <summary>
            Native platform clipboard service.
            </summary>
        </member>
        <member name="P:FlaxEngine.Clipboard.Text">
            <summary>
            Sets text to the clipboard.
            </summary>
        </member>
        <member name="P:FlaxEngine.Clipboard.RawData">
            <summary>
            Sets the raw bytes data to the clipboard.
            </summary>
        </member>
        <member name="P:FlaxEngine.Clipboard.Files">
            <summary>
            Sets the files to the clipboard.
            </summary>
        </member>
        <member name="M:FlaxEngine.Clipboard.Clear">
            <summary>
            Clear the clipboard contents.
            </summary>
        </member>
        <member name="T:FlaxEngine.FileSystem">
            <summary>
            Platform implementation of filesystem service.
            </summary>
        </member>
        <member name="M:FlaxEngine.FileSystem.ShowOpenFileDialog(FlaxEngine.Window,System.String,System.String,System.Boolean,System.String,System.String[]@)">
            <summary>
            Displays a standard dialog box that prompts the user to open a file(s).
            </summary>
            <param name="parentWindow">The parent window or null.</param>
            <param name="initialDirectory">The initial directory.</param>
            <param name="filter">The custom filter.</param>
            <param name="multiSelect">True if allow multiple files to be selected, otherwise use single-file mode.</param>
            <param name="title">The dialog title.</param>
            <param name="filenames">The output names of the files picked by the user.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.FileSystem.ShowSaveFileDialog(FlaxEngine.Window,System.String,System.String,System.Boolean,System.String,System.String[]@)">
            <summary>
            Displays a standard dialog box that prompts the user to save a file(s).
            </summary>
            <param name="parentWindow">The parent window.</param>
            <param name="initialDirectory">The initial directory.</param>
            <param name="filter">The filter.</param>
            <param name="multiSelect">True if allow multiple files to be selected, otherwise use single-file mode.</param>
            <param name="title">The title.</param>
            <param name="filenames">The output names of the files picked by the user.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.FileSystem.ShowBrowseFolderDialog(FlaxEngine.Window,System.String,System.String,System.String@)">
            <summary>
            Displays a standard dialog box that prompts the user to select a folder.
            </summary>
            <param name="parentWindow">The parent window.</param>
            <param name="initialDirectory">The initial directory.</param>
            <param name="title">The dialog title.</param>
            <param name="path">The output path.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.FileSystem.ShowFileExplorer(System.String)">
            <summary>
            Opens a standard file explorer application and navigates to the given directory.
            </summary>
            <param name="path">The path.</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.NetworkProtocol">
            <summary>
            Network connection protocol type.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkProtocol.Undefined">
            <summary>
            Not specified.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkProtocol.Udp">
            <summary>
            User Datagram Protocol.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkProtocol.Tcp">
            <summary>
            Transmission Control Protocol.
            </summary>
        </member>
        <member name="T:FlaxEngine.NetworkIPVersion">
            <summary>
            IP version type.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkIPVersion.Undefined">
            <summary>
            Not specified.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkIPVersion.IPv4">
            <summary>
            Internet Protocol version 4.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkIPVersion.IPv6">
            <summary>
            Internet Protocol version 6.
            </summary>
        </member>
        <member name="T:FlaxEngine.NetworkSocket">
            <summary>
            Network socket.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocket.Protocol">
            <summary>
            Socket protocol type.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocket.IPVersion">
            <summary>
            Socket address IP version.
            </summary>
        </member>
        <member name="T:FlaxEngine.NetworkEndPoint">
            <summary>
            Network end-point.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkEndPoint.IPVersion">
            <summary>
            End-point IP version.
            </summary>
        </member>
        <member name="T:FlaxEngine.NetworkSocketOption">
            <summary>
            Network socket options.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketOption.Debug">
            <summary>
            Enables debugging info recording.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketOption.ReuseAddr">
            <summary>
            Allows local address reusing.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketOption.KeepAlive">
            <summary>
            Keeps connections alive.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketOption.DontRoute">
            <summary>
            Indicates that outgoing data should be sent on whatever interface the socket is bound to and not a routed on some other interface.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketOption.Broadcast">
            <summary>
            Allows for sending broadcast data.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketOption.UseLoopback">
            <summary>
            Uses the local loopback address when sending data from this socket.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketOption.Linger">
            <summary>
            Lingers on close if data present.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketOption.OOBInline">
            <summary>
            Allows out-of-bound data to be returned in-line with regular data.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketOption.SendBuffer">
            <summary>
            Socket send data buffer size.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketOption.RecvBuffer">
            <summary>
            Socket receive data buffer size.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketOption.SendTimeout">
            <summary>
            The timeout in milliseconds for blocking send calls.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketOption.RecvTimeout">
            <summary>
            The timeout in milliseconds for blocking receive calls.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketOption.Error">
            <summary>
            The last socket error code.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketOption.NoDelay">
            <summary>
            Enables the Nagle algorithm for TCP sockets.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketOption.IPv6Only">
            <summary>
            Enables IPv6/Ipv4 dual-stacking, UDP/TCP.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketOption.Mtu">
            <summary>
            Retrieve the current path MTU, the socket must be connected UDP/TCP.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketOption.Type">
            <summary>
            Socket type, DGRAM, STREAM ..
            </summary>
        </member>
        <member name="T:FlaxEngine.NetworkSocketState">
            <summary>
            Network socket state.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketState.None">
            <summary>
            Nothing.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketState.Error">
            <summary>
            Socket error.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketState.Invalid">
            <summary>
            Invalid request.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketState.Disconnected">
            <summary>
            Socket disconnected.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketState.Readable">
            <summary>
            Socket is readable.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketState.Writeable">
            <summary>
            Socket is writable.
            </summary>
        </member>
        <member name="T:FlaxEngine.NetworkSocketGroup">
            <summary>
            Network sockets group.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketGroup.Count">
            <summary>
            Group size.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkSocketGroup.Capacity">
            <summary>
            Group capacity.
            </summary>
        </member>
        <member name="T:FlaxEngine.Network">
            <summary>
            Low-level networking implementation interface with Berkeley sockets.
            </summary>
        </member>
        <member name="M:FlaxEngine.Network.CreateSocket(FlaxEngine.NetworkSocket@,FlaxEngine.NetworkProtocol,FlaxEngine.NetworkIPVersion)">
            <summary>
            Creates a new native socket.
            </summary>
            <param name="socket">The socket struct to fill in.</param>
            <param name="proto">The protocol.</param>
            <param name="ipv">The ip version.</param>
            <returns>Returns true on error, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Network.DestroySocket(FlaxEngine.NetworkSocket@)">
            <summary>
            Closes native socket.
            </summary>
            <param name="socket">The socket.</param>
            <returns>Returns true on error, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Network.SetSocketOption(FlaxEngine.NetworkSocket@,FlaxEngine.NetworkSocketOption,System.Int32)">
            <summary>
            Sets the specified socket option.
            </summary>
            <param name="socket">The socket.</param>
            <param name="option">The option.</param>
            <param name="value">The value.</param>
            <returns>Returns true on error, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Network.GetSocketOption(FlaxEngine.NetworkSocket@,FlaxEngine.NetworkSocketOption,System.Int32@)">
            <summary>
            Gets the specified socket option.
            </summary>
            <param name="socket">The socket.</param>
            <param name="option">The option.</param>
            <param name="value">The returned value.</param>
            <returns>Returns true on error, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Network.ConnectSocket(FlaxEngine.NetworkSocket@,FlaxEngine.NetworkEndPoint@)">
            <summary>
            Connects a socket to the specified end point.
            </summary>
            <param name="socket">The socket.</param>
            <param name="endPoint">The end point.</param>
            <returns>Returns true on error, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Network.BindSocket(FlaxEngine.NetworkSocket@,FlaxEngine.NetworkEndPoint@)">
            <summary>
            Binds a socket to the specified end point.
            </summary>
            <param name="socket">The socket.</param>
            <param name="endPoint">The end point.</param>
            <returns>Returns true on error, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Network.Listen(FlaxEngine.NetworkSocket@,System.UInt16)">
            <summary>
            Listens for incoming connection.
            </summary>
            <param name="socket">The socket.</param>
            <param name="queueSize">Pending connection queue size.</param>
            <returns>Returns true on error, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Network.Accept(FlaxEngine.NetworkSocket@,FlaxEngine.NetworkSocket@,FlaxEngine.NetworkEndPoint@)">
            <summary>
            Accepts a pending connection.
            </summary>
            <param name="serverSocket">The socket.</param>
            <param name="newSocket">The newly connected socket.</param>
            <param name="newEndPoint">The end point of the new socket.</param>
            <returns>Returns true on error, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Network.IsReadable(FlaxEngine.NetworkSocket@)">
            <summary>
            Checks for socket readability.
            </summary>
            <param name="socket">The socket.</param>
            <returns>Returns true when data is available. Otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Network.IsWritable(FlaxEngine.NetworkSocket@)">
            <summary>
            Checks for socket writeability.
            </summary>
            <param name="socket">The socket.</param>
            <returns>Returns true when data can be written. Otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Network.CreateSocketGroup(System.UInt32,FlaxEngine.NetworkSocketGroup@)">
            <summary>
            Creates a socket group. It allocate memory based on the desired capacity.
            </summary>
            <param name="capacity">The group capacity (fixed).</param>
            <param name="group">The group.</param>
            <returns>Returns true on error, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Network.DestroySocketGroup(FlaxEngine.NetworkSocketGroup@)">
            <summary>
            Destroy the socket group, and free the allocated memory.
            </summary>
            <param name="group">The group.</param>
            <returns>Returns true if the group is already destroyed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Network.Poll(FlaxEngine.NetworkSocketGroup@)">
            <summary>
            Updates sockets states.
            </summary>
            <param name="group">The sockets group.</param>
            <returns>Returns -1 on error, The number of elements where states are nonzero, otherwise 0.</returns>
        </member>
        <member name="M:FlaxEngine.Network.GetSocketState(FlaxEngine.NetworkSocketGroup@,System.UInt32,FlaxEngine.NetworkSocketState@)">
            <summary>
            Retrieves socket state.
            </summary>
            <param name="group">The group.</param>
            <param name="index">The socket index in group.</param>
            <param name="state">The returned state.</param>
            <returns>Returns true on error, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Network.AddSocketToGroup(FlaxEngine.NetworkSocketGroup@,FlaxEngine.NetworkSocket@)">
            <summary>
            Adds a socket to a group.
            </summary>
            <param name="group">The group.</param>
            <param name="socket">The socket.</param>
            <returns>Returns the socket index in group or -1 on error.</returns>
        </member>
        <member name="M:FlaxEngine.Network.GetSocketFromGroup(FlaxEngine.NetworkSocketGroup@,System.UInt32,FlaxEngine.NetworkSocket@)">
            <summary>
            Gets a socket by index. Some data like socket IPVersion might be undefined.
            </summary>
            <param name="group">The group.</param>
            <param name="index">The index.</param>
            <param name="socket">The returned socket.</param>
            <returns>Returns true on error, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Network.RemoveSocketFromGroup(FlaxEngine.NetworkSocketGroup@,System.UInt32)">
            <summary>
            Removes the socket at the specified index.
            </summary>
            <param name="group">The group.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:FlaxEngine.Network.RemoveSocketFromGroup(FlaxEngine.NetworkSocketGroup@,FlaxEngine.NetworkSocket@)">
            <summary>
            Removes the socket if present.
            </summary>
            <param name="group">The group.</param>
            <param name="socket">The socket.</param>
            <returns>Returns true if the socket is not found, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Network.ClearGroup(FlaxEngine.NetworkSocketGroup@)">
            <summary>
            Clears the socket group.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:FlaxEngine.Network.WriteSocket(FlaxEngine.NetworkSocket,System.Byte*,System.UInt32,FlaxEngine.NetworkEndPoint*)">
            <summary>
            Writes data to the socket.
            </summary>
            <param name="socket">The socket.</param>
            <param name="data">The data to write.</param>
            <param name="length">The length of data.</param>
            <param name="endPoint">If protocol is UDP, the destination end point. Otherwise nullptr.</param>
            <returns>Returns -1 on error, otherwise bytes written.</returns>
        </member>
        <member name="M:FlaxEngine.Network.ReadSocket(FlaxEngine.NetworkSocket,System.Byte*,System.UInt32,FlaxEngine.NetworkEndPoint*)">
            <summary>
            Reads data on the socket.
            </summary>
            <param name="socket">The socket.</param>
            <param name="buffer">The buffer.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <param name="endPoint">If UDP, the end point from where data is coming. Otherwise nullptr.</param>
            <returns>Returns -1 on error, otherwise bytes read.</returns>
        </member>
        <member name="M:FlaxEngine.Network.CreateEndPoint(System.String,System.String,FlaxEngine.NetworkIPVersion,FlaxEngine.NetworkEndPoint@,System.Boolean)">
            <summary>
            Creates an end point.
            </summary>
            <param name="address">The network address.</param>
            <param name="port">The network port.</param>
            <param name="ipv">The ip version.</param>
            <param name="endPoint">The created end point.</param>
            <param name="bindable">True if the end point will be connected or binded.</param>
            <returns>Returns true on error, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Network.RemapEndPointToIPv6(FlaxEngine.NetworkEndPoint@)">
            <summary>
            Remaps an ipv4 end point to an ipv6 one.
            </summary>
            <param name="endPoint">The ipv4 end point.</param>
            <returns>The ipv6 end point.</returns>
        </member>
        <member name="M:FlaxEngine.Network.WriteSocket(FlaxEngine.NetworkSocket,System.Byte[])">
            <summary>
            Writes data to the socket.
            </summary>
            <param name="socket">The socket.</param>
            <param name="data">The data to write.</param>
            <returns>Returns -1 on error, otherwise bytes written.</returns>
        </member>
        <member name="M:FlaxEngine.Network.WriteSocket(FlaxEngine.NetworkSocket,System.Byte[],FlaxEngine.NetworkEndPoint)">
            <summary>
            Writes data to the socket.
            </summary>
            <param name="socket">The socket.</param>
            <param name="data">The data to write.</param>
            <param name="endPoint">If protocol is UDP, the destination end point.</param>
            <returns>Returns -1 on error, otherwise bytes written.</returns>
        </member>
        <member name="M:FlaxEngine.Network.ReadSocket(FlaxEngine.NetworkSocket,System.Byte[])">
            <summary>
            Reads data on the socket.
            </summary>
            <param name="socket">The socket.</param>
            <param name="buffer">The buffer.</param>
            <returns>Returns -1 on error, otherwise bytes read.</returns>
        </member>
        <member name="M:FlaxEngine.Network.ReadSocket(FlaxEngine.NetworkSocket,System.Byte[],FlaxEngine.NetworkEndPoint)">
            <summary>
            Reads data on the socket.
            </summary>
            <param name="socket">The socket.</param>
            <param name="buffer">The buffer.</param>
            <param name="endPoint">If UDP, the end point from where data is coming. Otherwise nullptr.</param>
            <returns>Returns -1 on error, otherwise bytes read.</returns>
        </member>
        <member name="T:FlaxEngine.NetworkConnectionType">
            <summary>
            Network connection types for device.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkConnectionType.None">
            <summary>
            No connection.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkConnectionType.Unknown">
            <summary>
            The unknown connection type.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkConnectionType.AirplaneMode">
            <summary>
            The airplane mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkConnectionType.Cell">
            <summary>
            The cell connection.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkConnectionType.WiFi">
            <summary>
            The WiFi connection.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkConnectionType.Bluetooth">
            <summary>
            The Bluetooth connection.
            </summary>
        </member>
        <member name="F:FlaxEngine.NetworkConnectionType.Ethernet">
            <summary>
            The Ethernet cable connection (LAN).
            </summary>
        </member>
        <member name="T:FlaxEngine.ScreenOrientationType">
            <summary>
            The device screen orientation types (eg. portrait, landscape, etc.).
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenOrientationType.Unknown">
            <summary>
            The unknown orientation type.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenOrientationType.Portrait">
            <summary>
            The portrait screen orientation with device bottom on the bottom side of the screen.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenOrientationType.PortraitUpsideDown">
            <summary>
            The portrait screen orientation but upside down with device bottom on the top side of the screen.
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenOrientationType.LandscapeLeft">
            <summary>
            The landscape screen orientation with device bottom on the right side of the screen (device rotated to the left from the portrait).
            </summary>
        </member>
        <member name="F:FlaxEngine.ScreenOrientationType.LandscapeRight">
            <summary>
            The landscape screen orientation with device bottom on the left side of the screen (device rotated to the right from the portrait).
            </summary>
        </member>
        <member name="T:FlaxEngine.Platform">
            <summary>
            Runtime platform service.
            </summary>
        </member>
        <member name="E:FlaxEngine.Platform.UserAdded">
            <summary>
            Event called when user gets added (eg. logged in).
            </summary>
        </member>
        <member name="E:FlaxEngine.Platform.UserRemoved">
            <summary>
            Event called when user gets removed (eg. logged out).
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.CustomDpiScale">
            <summary>
            The custom DPI scale factor to apply globally. Can be used to adjust the User Interface scale (resolution).
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.Users">
            <summary>
            The list of users.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.PlatformType">
            <summary>
            Returns the current runtime platform type. It's compile-time constant.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.Is64BitApp">
            <summary>
            Returns true if is running 64 bit application (otherwise 32 bit). It's compile-time constant.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.Is64BitPlatform">
            <summary>
            Returns true if running on 64-bit computer
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.CPUInfo">
            <summary>
            Gets the CPU information.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.CacheLineSize">
            <summary>
            Gets the CPU cache line size.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.MemoryStats">
            <summary>
            Gets the current memory stats.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.ProcessMemoryStats">
            <summary>
            Gets the process current memory stats.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.CurrentProcessId">
            <summary>
            Gets the current process unique identifier.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.CurrentThreadID">
            <summary>
            Gets the current thread unique identifier.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.TimeSeconds">
            <summary>
            Gets the current time in seconds.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.TimeCycles">
            <summary>
            Gets the current time as CPU cycles counter.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.ClockFrequency">
            <summary>
            Gets the system clock frequency.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.BatteryInfo">
            <summary>
            Gets the battery information.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.Dpi">
            <summary>
            Gets the primary monitor's DPI setting.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.DpiScale">
            <summary>
            Gets the primary monitor's DPI setting scale factor (1 is default). Includes custom DPI scale.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.NetworkConnectionType">
            <summary>
            Gets the current network connection type.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.ScreenOrientationType">
            <summary>
            Gets the current screen orientation type.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.UserLocaleName">
            <summary>
            Gets the current locale culture (eg. "pl-PL" or "en-US").
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.ComputerName">
            <summary>
            Gets the computer machine name.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.UserName">
            <summary>
            Gets the user name.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.HasFocus">
            <summary>
            Returns true if app has user focus.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.DesktopSize">
            <summary>
            Gets size of the primary desktop.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.VirtualDesktopBounds">
            <summary>
            Gets virtual bounds of the desktop made of all the monitors outputs attached.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.VirtualDesktopSize">
            <summary>
            Gets virtual size of the desktop made of all the monitors outputs attached.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.MainDirectory">
            <summary>
            Gets full path of the main engine directory.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.ExecutableFilePath">
            <summary>
            Gets full path of the main engine executable file.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.UniqueDeviceId">
            <summary>
            Gets the (almost) unique ID of the current user device.
            </summary>
        </member>
        <member name="P:FlaxEngine.Platform.WorkingDirectory">
            <summary>
            Gets the current working directory of the process.
            </summary>
        </member>
        <member name="M:FlaxEngine.Platform.Fatal(System.String)">
            <summary>
            Shows the fatal error message to the user.
            </summary>
            <param name="msg">The message content.</param>
        </member>
        <member name="M:FlaxEngine.Platform.Error(System.String)">
            <summary>
            Shows the error message to the user.
            </summary>
            <param name="msg">The message content.</param>
        </member>
        <member name="M:FlaxEngine.Platform.Warning(System.String)">
            <summary>
            Shows the warning message to the user.
            </summary>
            <param name="msg">The message content.</param>
        </member>
        <member name="M:FlaxEngine.Platform.Info(System.String)">
            <summary>
            Shows the information message to the user.
            </summary>
            <param name="msg">The message content.</param>
        </member>
        <member name="M:FlaxEngine.Platform.CanOpenUrl(System.String)">
            <summary>
            Returns a value indicating whether can open a given URL in a web browser.
            </summary>
            <param name="url">The URI to assign to web browser.</param>
            <returns>True if can open URL, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Platform.OpenUrl(System.String)">
            <summary>
            Launches a web browser and opens a given URL.
            </summary>
            <param name="url">The URI to assign to web browser.</param>
        </member>
        <member name="M:FlaxEngine.Platform.GetMonitorBounds(FlaxEngine.Vector2)">
            <summary>
            Gets the origin position and size of the monitor at the given screen-space location.
            </summary>
            <param name="screenPos">The screen position (in pixels).</param>
            <returns>The monitor bounds.</returns>
        </member>
        <member name="M:FlaxEngine.Platform.StartProcess(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Starts a new process (runs app).
            </summary>
            <param name="filename">The path to the executable file.</param>
            <param name="args">Custom arguments for command line</param>
            <param name="workingDir">The custom name of the working directory</param>
            <param name="hiddenWindow">True if start process with hidden window</param>
            <param name="waitForEnd">True if wait for process competition</param>
            <returns>Retrieves the termination status of the specified process. Valid only if processed ended.</returns>
        </member>
        <member name="M:FlaxEngine.Platform.RunProcess(System.String,System.String,System.Boolean)">
            <summary>
            Starts a new process (runs commandline). Waits for it's end and captures its output.
            </summary>
            <param name="cmdLine">Command line to execute</param>
            <param name="workingDir">The custom path of the working directory.</param>
            <param name="hiddenWindow">True if start process with hidden window.</param>
            <returns>Retrieves the termination status of the specified process. Valid only if processed ended.</returns>
        </member>
        <member name="M:FlaxEngine.Platform.RunProcess(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Starts a new process (runs commandline). Waits for it's end and captures its output.
            </summary>
            <param name="cmdLine">Command line to execute</param>
            <param name="workingDir">The custom path of the working directory.</param>
            <param name="environment">The process environment variables. If null the current process environment is used.</param>
            <param name="hiddenWindow">True if start process with hidden window.</param>
            <returns>Retrieves the termination status of the specified process. Valid only if processed ended.</returns>
        </member>
        <member name="M:FlaxEngine.Platform.CreateWindow(FlaxEngine.CreateWindowSettings@)">
            <summary>
            Creates the window.
            </summary>
            <param name="settings">The window settings.</param>
            <returns>The created native window object or null if failed.</returns>
        </member>
        <member name="P:FlaxEngine.Platform.IsInMainThread">
            <summary>
            Checks if current execution in on the main thread.
            </summary>
        </member>
        <member name="T:FlaxEngine.User">
            <summary>
            Native platform user object.
            </summary>
        </member>
        <member name="P:FlaxEngine.User.Name">
            <summary>
            Gets the username.
            </summary>
        </member>
        <member name="T:FlaxEngine.ClosingReason">
            <summary>
            Window closing reasons.
            </summary>
        </member>
        <member name="F:FlaxEngine.ClosingReason.Unknown">
            <summary>
            The unknown.
            </summary>
        </member>
        <member name="F:FlaxEngine.ClosingReason.User">
            <summary>
            The user.
            </summary>
        </member>
        <member name="F:FlaxEngine.ClosingReason.EngineExit">
            <summary>
            The engine exit.
            </summary>
        </member>
        <member name="F:FlaxEngine.ClosingReason.CloseEvent">
            <summary>
            The close event.
            </summary>
        </member>
        <member name="T:FlaxEngine.CursorType">
            <summary>
            Types of default cursors.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.Default">
            <summary>
            The default.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.Cross">
            <summary>
            The cross.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.Hand">
            <summary>
            The hand.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.Help">
            <summary>
            The help icon
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.IBeam">
            <summary>
            The I beam.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.No">
            <summary>
            The blocking image.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.Wait">
            <summary>
            The wait.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.SizeAll">
            <summary>
            The size all sides.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.SizeNESW">
            <summary>
            The size NE-SW.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.SizeNS">
            <summary>
            The size NS.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.SizeNWSE">
            <summary>
            The size NW-SE.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.SizeWE">
            <summary>
            The size WE.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.Hidden">
            <summary>
            The cursor is hidden.
            </summary>
        </member>
        <member name="F:FlaxEngine.CursorType.MAX">
            <summary>
            The count of items in the CursorType enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.DragDropEffect">
            <summary>
            Data drag and drop effects.
            </summary>
        </member>
        <member name="F:FlaxEngine.DragDropEffect.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.DragDropEffect.Copy">
            <summary>
            The copy.
            </summary>
        </member>
        <member name="F:FlaxEngine.DragDropEffect.Move">
            <summary>
            The move.
            </summary>
        </member>
        <member name="F:FlaxEngine.DragDropEffect.Link">
            <summary>
            The link.
            </summary>
        </member>
        <member name="T:FlaxEngine.WindowHitCodes">
            <summary>
            Window hit test codes. Note: they are 1:1 mapping for Win32 values.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Transparent">
            <summary>
            The transparent area.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.NoWhere">
            <summary>
            The no hit.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Client">
            <summary>
            The client area.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Caption">
            <summary>
            The caption area.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.SystemMenu">
            <summary>
            The system menu.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.GrowBox">
            <summary>
            The grow box
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Menu">
            <summary>
            The menu.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.HScroll">
            <summary>
            The horizontal scroll.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.VScroll">
            <summary>
            The vertical scroll.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.MinButton">
            <summary>
            The minimize button.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.MaxButton">
            <summary>
            The maximize button.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Left">
            <summary>
            The left side;
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Right">
            <summary>
            The right side.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Top">
            <summary>
            The top side.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.TopLeft">
            <summary>
            The top left corner.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.TopRight">
            <summary>
            The top right corner.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Bottom">
            <summary>
            The bottom side.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.BottomLeft">
            <summary>
            The bottom left corner.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.BottomRight">
            <summary>
            The bottom right corner.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Border">
            <summary>
            The border.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Object">
            <summary>
            The object.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Close">
            <summary>
            The close button.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowHitCodes.Help">
            <summary>
            The help button.
            </summary>
        </member>
        <member name="T:FlaxEngine.Window">
            <summary>
            Native platform window object.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.IsFullscreen">
            <summary>
            Gets or sets a value that indicates whether a window is in a fullscreen mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.IsWindowed">
            <summary>
            Gets a value that indicates whether a window is not in a fullscreen mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.IsVisible">
            <summary>
            Gets or sets a value that indicates whether a window is visible (hidden or shown).
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.IsMinimized">
            <summary>
            Gets a value that indicates whether a window is minimized.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.IsMaximized">
            <summary>
            Gets a value that indicates whether a window is maximized.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.NativePtr">
            <summary>
            Gets the native window handle.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.IsClosed">
            <summary>
            Checks if window is closed.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.IsForegroundWindow">
            <summary>
            Checks if window is foreground (the window with which the user is currently working).
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.ClientBounds">
            <summary>
            Gets or sets the client bounds of the window (client area not including border).
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.Position">
            <summary>
            Gets or sets the window position (in screen coordinates).
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.ClientPosition">
            <summary>
            Gets or sets the client position of the window (client area not including border).
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.Size">
            <summary>
            Gets the window size (including border).
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.ClientSize">
            <summary>
            Gets or sets the size of the client area of the window (not including border).
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.Dpi">
            <summary>
            Gets the window DPI setting.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.DpiScale">
            <summary>
            Gets the window DPI scale factor (1 is default). Includes custom DPI scale
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.Title">
            <summary>
            Gets the window title.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.Opacity">
            <summary>
            Gets or sets window opacity value (valid only for windows created with SupportsTransparency flag). Opacity values are normalized to range [0;1].
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.IsFocused">
            <summary>
            Determines whether this window is focused.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.TrackingMouseOffset">
            <summary>
            Gets the mouse tracking offset.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.IsMouseTracking">
            <summary>
            Gets the value indicating whenever mouse input is tracked by this window.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.Cursor">
            <summary>
            Gets or sets the mouse cursor.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.RenderingEnabled">
            <summary>
            Gets or sets the value indicating whenever rendering to this window enabled.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.InputText">
            <summary>
            Gets the text entered during the current frame (Unicode).
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.MousePosition">
            <summary>
            Gets or sets the mouse position in window coordinates.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.MousePositionDelta">
            <summary>
            Gets the mouse position change during the last frame.
            </summary>
        </member>
        <member name="P:FlaxEngine.Window.MouseScrollDelta">
            <summary>
            Gets the mouse wheel change during the last frame.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.Show">
            <summary>
            Shows the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.Hide">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.Minimize">
            <summary>
            Minimizes the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.Maximize">
            <summary>
            Maximizes the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.Restore">
            <summary>
            Restores the window state before minimizing or maximizing.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.Close(FlaxEngine.ClosingReason)">
            <summary>
            Closes the window.
            </summary>
            <param name="reason">The closing reason.</param>
        </member>
        <member name="M:FlaxEngine.Window.ScreenToClient(FlaxEngine.Vector2)">
            <summary>
            Converts screen space location into window space coordinates.
            </summary>
            <param name="screenPos">The screen position.</param>
            <returns>The client space position.</returns>
        </member>
        <member name="M:FlaxEngine.Window.ClientToScreen(FlaxEngine.Vector2)">
            <summary>
            Converts window space location into screen space coordinates.
            </summary>
            <param name="clientPos">The client position.</param>
            <returns>The screen space position.</returns>
        </member>
        <member name="M:FlaxEngine.Window.Focus">
            <summary>
            Focuses this window.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.BringToFront(System.Boolean)">
            <summary>
            Brings window to the front of the Z order.
            </summary>
            <param name="force">True if move to the front by force, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.Window.FlashWindow">
            <summary>
            Flashes the window to bring use attention.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.DoDragDrop(System.String)">
            <summary>
            Starts drag and drop operation
            </summary>
            <param name="data">The data.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Window.StartTrackingMouse(System.Boolean)">
            <summary>
            Starts the mouse tracking.
            </summary>
            <param name="useMouseScreenOffset">If set to <c>true</c> will use mouse screen offset.</param>
        </member>
        <member name="M:FlaxEngine.Window.EndTrackingMouse">
            <summary>
            Ends the mouse tracking.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.GetKey(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets the key state (true if key is being pressed during this frame).
            </summary>
            <param name="key">Key ID to check</param>
            <returns>True while the user holds down the key identified by id</returns>
        </member>
        <member name="M:FlaxEngine.Window.GetKeyDown(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets the key 'down' state (true if key was pressed in this frame).
            </summary>
            <param name="key">Key ID to check</param>
            <returns>True during the frame the user starts pressing down the key</returns>
        </member>
        <member name="M:FlaxEngine.Window.GetKeyUp(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets the key 'up' state (true if key was released in this frame).
            </summary>
            <param name="key">Key ID to check</param>
            <returns>True during the frame the user releases the key</returns>
        </member>
        <member name="M:FlaxEngine.Window.GetMouseButton(FlaxEngine.MouseButton)">
            <summary>
            Gets the mouse button state.
            </summary>
            <param name="button">Mouse button to check</param>
            <returns>True while the user holds down the button</returns>
        </member>
        <member name="M:FlaxEngine.Window.GetMouseButtonDown(FlaxEngine.MouseButton)">
            <summary>
            Gets the mouse button down state.
            </summary>
            <param name="button">Mouse button to check</param>
            <returns>True during the frame the user starts pressing down the button</returns>
        </member>
        <member name="M:FlaxEngine.Window.GetMouseButtonUp(FlaxEngine.MouseButton)">
            <summary>
            Gets the mouse button up state.
            </summary>
            <param name="button">Mouse button to check</param>
            <returns>True during the frame the user releases the button</returns>
        </member>
        <member name="T:FlaxEngine.Window.ClosingDelegate">
            <summary>
            Window closing delegate.
            </summary>
            <param name="reason">The closing reason.</param>
            <param name="cancel">If set to <c>true</c> operation will be cancelled, otherwise window will be closed.</param>
        </member>
        <member name="T:FlaxEngine.Window.HitTestDelegate">
            <summary>
            Perform window hit test delegate.
            </summary>
            <param name="mouse">The mouse position. The coordinate is relative to the upper-left corner of the screen. Use <see cref="M:FlaxEngine.Window.ScreenToClient(FlaxEngine.Vector2)"/> to convert position into client space coordinates.</param>
            <returns>Hit result.</returns>
        </member>
        <member name="T:FlaxEngine.Window.MouseButtonDelegate">
            <summary>
            Perform mouse buttons action.
            </summary>
            <param name="mouse">The mouse position.</param>
            <param name="button">The mouse buttons state.</param>
            <param name="handled">The flag that indicated that event has been handled by the custom code and should not be passed further. By default it is set to false.</param>
        </member>
        <member name="T:FlaxEngine.Window.MouseMoveDelegate">
            <summary>
            Perform mouse move action.
            </summary>
            <param name="mouse">The mouse position.</param>
        </member>
        <member name="T:FlaxEngine.Window.MouseWheelDelegate">
            <summary>
            Perform mouse wheel action.
            </summary>
            <param name="mouse">The mouse position.</param>
            <param name="delta">The mouse wheel move delta (can be positive or negative; normalized to [-1;1] range).</param>
            <param name="handled">The flag that indicated that event has been handled by the custom code and should not be passed further. By default it is set to false.</param>
        </member>
        <member name="T:FlaxEngine.Window.TouchDelegate">
            <summary>
            Perform touch action.
            </summary>
            <param name="pointerPosition">The touch pointer position.</param>
            <param name="pointerId">The touch pointer identifier. Stable for the whole touch gesture/interaction.</param>
            <param name="handled">The flag that indicated that event has been handled by the custom code and should not be passed further. By default it is set to false.</param>
        </member>
        <member name="T:FlaxEngine.Window.CharDelegate">
            <summary>
            Perform input character action.
            </summary>
            <param name="c">The input character.</param>
        </member>
        <member name="T:FlaxEngine.Window.KeyboardDelegate">
            <summary>
            Perform keyboard action.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="E:FlaxEngine.Window.OnCharInput">
            <summary>
            Event fired on character input.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.KeyDown">
            <summary>
            Event fired on key pressed.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.KeyUp">
            <summary>
            Event fired on key released.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.MouseDown">
            <summary>
            Event fired when mouse goes down.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.MouseUp">
            <summary>
            Event fired when mouse goes up.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.MouseDoubleClick">
            <summary>
            Event fired when mouse double clicks.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.MouseWheel">
            <summary>
            Event fired when mouse wheel is scrolling.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.MouseMove">
            <summary>
            Event fired when mouse moves
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.MouseLeave">
            <summary>
            Event fired when mouse leaves window.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.TouchDown">
            <summary>
            Event fired when touch begins.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.TouchMove">
            <summary>
            Event fired when touch moves.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.TouchUp">
            <summary>
            Event fired when touch ends.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.GotFocus">
            <summary>
            Event fired when window gets focus.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.LostFocus">
            <summary>
            Event fired when window lost focus.
            </summary>
        </member>
        <member name="F:FlaxEngine.Window.HitTest">
            <summary>
            Event fired when window performs hit test, parameter is a mouse position
            </summary>
        </member>
        <member name="F:FlaxEngine.Window.LeftButtonHit">
            <summary>
            Event fired when left mouse button goes down (hit test performed etc.).
            Returns true if event has been processed and further actions should be canceled, otherwise false.
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.Closing">
            <summary>
            Event fired when windows wants to be closed. Should return true if suspend window closing, otherwise returns false
            </summary>
        </member>
        <member name="E:FlaxEngine.Window.Closed">
            <summary>
            Event fired when gets closed and deleted, all references to the window object should be removed at this point.
            </summary>
        </member>
        <member name="F:FlaxEngine.Window.GUI">
            <summary>
            The window GUI root object.
            </summary>
        </member>
        <member name="M:FlaxEngine.Window.DoDragDrop(FlaxEngine.GUI.DragData)">
            <summary>
            Starts the drag and drop operation.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="T:FlaxEngine.BatteryInfo">
            <summary>
            Contains information about power supply (battery).
            </summary>
        </member>
        <member name="F:FlaxEngine.BatteryInfo.State">
            <summary>
            Power supply state.
            </summary>
        </member>
        <member name="F:FlaxEngine.BatteryInfo.BatteryLifePercent">
            <summary>
            Battery percentage left (normalized to 0-1 range).
            </summary>
        </member>
        <member name="T:FlaxEngine.BatteryInfo.States">
            <summary>
            Power supply status.
            </summary>
        </member>
        <member name="F:FlaxEngine.BatteryInfo.States.Unknown">
            <summary>
            Unknown status.
            </summary>
        </member>
        <member name="F:FlaxEngine.BatteryInfo.States.BatteryCharging">
            <summary>
            Power supply is connected and battery is charging.
            </summary>
        </member>
        <member name="F:FlaxEngine.BatteryInfo.States.BatteryDischarging">
            <summary>
            Device is running on a battery.
            </summary>
        </member>
        <member name="F:FlaxEngine.BatteryInfo.States.Connected">
            <summary>
            Device is connected to the stable power supply (AC).
            </summary>
        </member>
        <member name="T:FlaxEngine.CPUInfo">
            <summary>
            Contains information about CPU (Central Processing Unit).
            </summary>
        </member>
        <member name="F:FlaxEngine.CPUInfo.ProcessorPackageCount">
            <summary>
            The number of physical processor packages.
            </summary>
        </member>
        <member name="F:FlaxEngine.CPUInfo.ProcessorCoreCount">
            <summary>
            The number of processor cores (physical).
            </summary>
        </member>
        <member name="F:FlaxEngine.CPUInfo.LogicalProcessorCount">
            <summary>
            The number of logical processors (including hyper-threading).
            </summary>
        </member>
        <member name="F:FlaxEngine.CPUInfo.L1CacheSize">
            <summary>
            The size of processor L1 caches (in bytes).
            </summary>
        </member>
        <member name="F:FlaxEngine.CPUInfo.L2CacheSize">
            <summary>
            The size of processor L2 caches (in bytes).
            </summary>
        </member>
        <member name="F:FlaxEngine.CPUInfo.L3CacheSize">
            <summary>
            The size of processor L3 caches (in bytes).
            </summary>
        </member>
        <member name="F:FlaxEngine.CPUInfo.PageSize">
            <summary>
            The CPU memory page size (in bytes).
            </summary>
        </member>
        <member name="F:FlaxEngine.CPUInfo.ClockSpeed">
            <summary>
            The CPU clock speed (in Hz).
            </summary>
        </member>
        <member name="F:FlaxEngine.CPUInfo.CacheLineSize">
            <summary>
            The CPU cache line size (in bytes).
            </summary>
        </member>
        <member name="T:FlaxEngine.WindowStartPosition">
            <summary>
            Specifies the initial position of a window.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowStartPosition.CenterParent">
            <summary>
            The window is centered within the bounds of its parent window or center screen if has no parent window specified.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowStartPosition.CenterScreen">
            <summary>
            The windows is centered on the current display, and has the dimensions specified in the windows's size.
            </summary>
        </member>
        <member name="F:FlaxEngine.WindowStartPosition.Manual">
            <summary>
            The position of the form is determined by the Position property.
            </summary>
        </member>
        <member name="T:FlaxEngine.CreateWindowSettings">
            <summary>
            Settings for new window.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.Parent">
            <summary>
            The native parent window pointer.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.Title">
            <summary>
            The title.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.Position">
            <summary>
            The custom start position.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.Size">
            <summary>
            The client size.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.MinimumSize">
            <summary>
            The minimum size.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.MaximumSize">
            <summary>
            The maximum size.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.StartPosition">
            <summary>
            The start position mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.Fullscreen">
            <summary>
            True if show window fullscreen on show.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.HasBorder">
            <summary>
            Enable/disable window border.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.SupportsTransparency">
            <summary>
            Enable/disable window transparency support. Required to change window opacity property.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.ShowInTaskbar">
            <summary>
            True if show window on taskbar, otherwise it will be hidden.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.ActivateWhenFirstShown">
            <summary>
            Auto activate window after show.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.AllowInput">
            <summary>
            Allow window to capture input.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.AllowMinimize">
            <summary>
            Allow window minimize action.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.AllowMaximize">
            <summary>
            Allow window maximize action.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.AllowDragAndDrop">
            <summary>
            Enable/disable drag and drop actions over the window.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.IsTopmost">
            <summary>
            True if window topmost, otherwise false as default layout.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.IsRegularWindow">
            <summary>
            True if it's a regular window, false for tooltips, contextmenu and other utility windows.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.HasSizingFrame">
            <summary>
            Enable/disable window sizing frame.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.ShowAfterFirstPaint">
            <summary>
            Enable/disable window auto-show after the first paint.
            </summary>
        </member>
        <member name="F:FlaxEngine.CreateWindowSettings.Data">
            <summary>
            The custom data (platform dependant).
            </summary>
        </member>
        <member name="P:FlaxEngine.CreateWindowSettings.Default">
            <summary>
            Gets the default settings.
            </summary>
        </member>
        <member name="T:FlaxEngine.PlatformType">
            <summary>
            The platform the game is running.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlatformType.Windows">
            <summary>
            Running on Windows.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlatformType.XboxOne">
            <summary>
            Running on Xbox One.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlatformType.UWP">
            <summary>
            Running Windows Store App (Universal Windows Platform).
            </summary>
        </member>
        <member name="F:FlaxEngine.PlatformType.Linux">
            <summary>
            Running on Linux system.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlatformType.PS4">
            <summary>
            Running on PlayStation 4.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlatformType.XboxScarlett">
            <summary>
            Running on Xbox Series X.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlatformType.Android">
            <summary>
            Running on Android.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlatformType.Switch">
            <summary>
            Running on Switch.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlatformType.PS5">
            <summary>
            Running on PlayStation 5.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlatformType.Mac">
            <summary>
            Running on Mac.
            </summary>
        </member>
        <member name="T:FlaxEngine.ArchitectureType">
            <summary>
            The platform architecture types.
            </summary>
        </member>
        <member name="F:FlaxEngine.ArchitectureType.AnyCPU">
            <summary>
            Anything or not important.
            </summary>
        </member>
        <member name="F:FlaxEngine.ArchitectureType.x86">
            <summary>
            The x86 32-bit.
            </summary>
        </member>
        <member name="F:FlaxEngine.ArchitectureType.x64">
            <summary>
            The x86 64-bit.
            </summary>
        </member>
        <member name="F:FlaxEngine.ArchitectureType.ARM">
            <summary>
            The ARM 32-bit.
            </summary>
        </member>
        <member name="F:FlaxEngine.ArchitectureType.ARM64">
            <summary>
            The ARM 64-bit.
            </summary>
        </member>
        <member name="T:FlaxEngine.MemoryStats">
            <summary>
            Contains information about current memory usage and capacity.
            </summary>
        </member>
        <member name="F:FlaxEngine.MemoryStats.TotalPhysicalMemory">
            <summary>
            Total amount of physical memory in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.MemoryStats.UsedPhysicalMemory">
            <summary>
            Amount of used physical memory in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.MemoryStats.TotalVirtualMemory">
            <summary>
            Total amount of virtual memory in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.MemoryStats.UsedVirtualMemory">
            <summary>
            Amount of used virtual memory in bytes.
            </summary>
        </member>
        <member name="T:FlaxEngine.ProcessMemoryStats">
            <summary>
            Contains information about current memory usage by the process.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProcessMemoryStats.UsedPhysicalMemory">
            <summary>
            Amount of used physical memory in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProcessMemoryStats.UsedVirtualMemory">
            <summary>
            Amount of used virtual memory in bytes.
            </summary>
        </member>
        <member name="T:FlaxEngine.DialogResult">
            <summary>
            Specifies identifiers to indicate the return value of a dialog box.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.Abort">
            <summary>
            The abort.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.Cancel">
            <summary>
            The cancel.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.Ignore">
            <summary>
            The ignore.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.No">
            <summary>
            The no.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.OK">
            <summary>
            The ok.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.Retry">
            <summary>
            The retry.
            </summary>
        </member>
        <member name="F:FlaxEngine.DialogResult.Yes">
            <summary>
            The yes.
            </summary>
        </member>
        <member name="T:FlaxEngine.MessageBoxIcon">
            <summary>
            Specifies constants defining which information to display.
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxIcon.Asterisk">
            <summary>
            Asterisk
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxIcon.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxIcon.Exclamation">
            <summary>
            Exclamation
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxIcon.Hand">
            <summary>
            Hand
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxIcon.Information">
            <summary>
            Information
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxIcon.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxIcon.Question">
            <summary>
            Question
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxIcon.Stop">
            <summary>
            Stop
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxIcon.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="T:FlaxEngine.MessageBoxButtons">
            <summary>
            Specifies constants defining which buttons to display on a Message Box.
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxButtons.AbortRetryIgnore">
            <summary>
            Abort, Retry, Ignore
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxButtons.OK">
            <summary>
            OK
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxButtons.OKCancel">
            <summary>
            OK, Cancel
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxButtons.RetryCancel">
            <summary>
            Retry, Cancel
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxButtons.YesNo">
            <summary>
            Yes, No
            </summary>
        </member>
        <member name="F:FlaxEngine.MessageBoxButtons.YesNoCancel">
            <summary>
            Yes, No, Cancel
            </summary>
        </member>
        <member name="T:FlaxEngine.MessageBox">
            <summary>
            Message dialogs utility (native platform).
            </summary>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(System.String)">
            <summary>
            Displays a message box with specified text.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <returns>The message box dialog result.</returns>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(System.String,System.String)">
            <summary>
            Displays a message box with specified text and caption.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <returns>The message box dialog result.</returns>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(System.String,System.String,FlaxEngine.MessageBoxButtons)">
            <summary>
            Displays a message box with specified text, caption, buttons, and icon.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <returns>The message box dialog result.</returns>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(System.String,System.String,FlaxEngine.MessageBoxButtons,FlaxEngine.MessageBoxIcon)">
            <summary>
            Displays a message box with specified text, caption, buttons, and icon.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <returns>The message box dialog result.</returns>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(FlaxEngine.Window,System.String)">
            <summary>
            Displays a message box with specified text.
            </summary>
            <param name="parent">The parent window or null if not used.</param>
            <param name="text">The text to display in the message box.</param>
            <returns>The message box dialog result.</returns>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(FlaxEngine.Window,System.String,System.String)">
            <summary>
            Displays a message box with specified text and caption.
            </summary>
            <param name="parent">The parent window or null if not used.</param>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <returns>The message box dialog result.</returns>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(FlaxEngine.Window,System.String,System.String,FlaxEngine.MessageBoxButtons)">
            <summary>
            Displays a message box with specified text, caption and buttons.
            </summary>
            <param name="parent">The parent window or null if not used.</param>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <returns>The message box dialog result.</returns>
        </member>
        <member name="M:FlaxEngine.MessageBox.Show(FlaxEngine.Window,System.String,System.String,FlaxEngine.MessageBoxButtons,FlaxEngine.MessageBoxIcon)">
            <summary>
            Displays a message box with specified text, caption, buttons, and icon.
            </summary>
            <param name="parent">The parent window or null if not used.</param>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <returns>The message box dialog result.</returns>
        </member>
        <member name="T:FlaxEngine.ProfilerCPU">
            <summary>
            Provides CPU performance measuring methods.
            </summary>
        </member>
        <member name="T:FlaxEngine.ProfilerCPU.Event">
            <summary>
            Represents single CPU profiling event data.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilerCPU.Event.Start">
            <summary>
            The start time (in milliseconds).
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilerCPU.Event.End">
            <summary>
            The end time (in milliseconds).
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilerCPU.Event.Depth">
            <summary>
            The event depth. Value 0 is used for the root event.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilerCPU.Event.NativeMemoryAllocation">
            <summary>
            The native dynamic memory allocation size during this event (excluding the child events). Given value is in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilerCPU.Event.ManagedMemoryAllocation">
            <summary>
            The managed memory allocation size during this event (excluding the child events). Given value is in bytes.
            </summary>
        </member>
        <member name="T:FlaxEngine.ProfilerGPU">
            <summary>
            Provides GPU performance measuring methods.
            </summary>
        </member>
        <member name="T:FlaxEngine.ProfilerGPU.Event">
            <summary>
            Represents single CPU profiling event data.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilerGPU.Event.Name">
            <summary>
            The name of the event.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilerGPU.Event.Timer">
            <summary>
            The timer query used to get the exact event time on a GPU. Assigned and managed by the internal profiler layer.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilerGPU.Event.Stats">
            <summary>
            The rendering stats for this event. When event is active it holds the stats on event begin.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilerGPU.Event.Time">
            <summary>
            The event execution time on a GPU (in milliseconds).
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilerGPU.Event.Depth">
            <summary>
            The event depth. Value 0 is used for the root events.
            </summary>
        </member>
        <member name="T:FlaxEngine.ProfilingTools">
            <summary>
            Profiler tools for development. Allows to gather profiling data and events from the engine.
            </summary>
        </member>
        <member name="P:FlaxEngine.ProfilingTools.Stats">
            <summary>
            The current collected main stats by the profiler from the local session. Updated every frame.
            </summary>
        </member>
        <member name="P:FlaxEngine.ProfilingTools.EventsCPU">
            <summary>
            The CPU threads profiler events.
            </summary>
        </member>
        <member name="P:FlaxEngine.ProfilingTools.EventsGPU">
            <summary>
            The GPU rendering profiler events.
            </summary>
        </member>
        <member name="T:FlaxEngine.ProfilingTools.MemoryStatsGPU">
            <summary>
            The GPU memory stats.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.MemoryStatsGPU.Total">
            <summary>
            The total amount of memory in bytes (as reported by the driver).
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.MemoryStatsGPU.Used">
            <summary>
            The used by the game amount of memory in bytes (estimated).
            </summary>
        </member>
        <member name="T:FlaxEngine.ProfilingTools.MainStats">
            <summary>
            Engine profiling data header. Contains main info and stats.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.MainStats.ProcessMemory">
            <summary>
            The process memory stats.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.MainStats.MemoryCPU">
            <summary>
            The CPU memory stats.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.MainStats.MemoryGPU">
            <summary>
            The GPU memory stats.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.MainStats.FPS">
            <summary>
            The frames per second (fps counter).
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.MainStats.UpdateTimeMs">
            <summary>
            The update time on CPU (in milliseconds).
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.MainStats.PhysicsTimeMs">
            <summary>
            The fixed update time on CPU (in milliseconds).
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.MainStats.DrawCPUTimeMs">
            <summary>
            The draw time on CPU (in milliseconds).
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.MainStats.DrawGPUTimeMs">
            <summary>
            The draw time on GPU (in milliseconds).
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.MainStats.DrawStats">
            <summary>
            The last rendered frame stats.
            </summary>
        </member>
        <member name="T:FlaxEngine.ProfilingTools.ThreadStats">
            <summary>
            The CPU thread stats.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.ThreadStats.Name">
            <summary>
            The thread name.
            </summary>
        </member>
        <member name="F:FlaxEngine.ProfilingTools.ThreadStats.Events">
            <summary>
            The events list.
            </summary>
        </member>
        <member name="T:FlaxEngine.RenderStatsData">
            <summary>
            Object that stores various render statistics.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderStatsData.DrawCalls">
            <summary>
            The draw calls count.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderStatsData.DispatchCalls">
            <summary>
            The compute shader dispatch calls count.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderStatsData.Vertices">
            <summary>
            The vertices drawn count.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderStatsData.Triangles">
            <summary>
            The triangles drawn count.
            </summary>
        </member>
        <member name="F:FlaxEngine.RenderStatsData.PipelineStateChanges">
            <summary>
            The pipeline state changes count.
            </summary>
        </member>
        <member name="T:FlaxEngine.TextRange">
            <summary>
            The text range.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextRange.StartIndex">
            <summary>
            The start index.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextRange.EndIndex">
            <summary>
            The end index.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRange.Length">
            <summary>
            Gets the range length.
            </summary>
        </member>
        <member name="M:FlaxEngine.TextRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.TextRange"/> struct.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
        </member>
        <member name="P:FlaxEngine.TextRange.IsEmpty">
            <summary>
            Gets a value indicating whether range is empty.
            </summary>
        </member>
        <member name="M:FlaxEngine.TextRange.Contains(System.Int32)">
            <summary>
            Determines whether this range contains the character index.
            </summary>
            <param name="index">The index.</param>
            <returns><c>true</c> if range contains the specified character index; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.TextRange.Intersect(FlaxEngine.TextRange@)">
            <summary>
            Determines whether this range intersects with the other range.
            </summary>
            <param name="other">The other text range.</param>
            <returns><c>true</c> if range intersects with the specified range index;, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.TextRange.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.FontLineCache">
            <summary>
            The font line info generated during text processing.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontLineCache.Location">
            <summary>
            The root position of the line (upper left corner).
            </summary>
        </member>
        <member name="F:FlaxEngine.FontLineCache.Size">
            <summary>
            The line bounds (width and height).
            </summary>
        </member>
        <member name="F:FlaxEngine.FontLineCache.FirstCharIndex">
            <summary>
            The first character index (from the input text).
            </summary>
        </member>
        <member name="F:FlaxEngine.FontLineCache.LastCharIndex">
            <summary>
            The last character index (from the input text).
            </summary>
        </member>
        <member name="T:FlaxEngine.FontCharacterEntry">
            <summary>
            The cached font character entry (read for rendering and further processing).
            </summary>
        </member>
        <member name="F:FlaxEngine.FontCharacterEntry.Character">
            <summary>
            The character represented by this entry.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontCharacterEntry.IsValid">
            <summary>
            True if entry is valid, otherwise false.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontCharacterEntry.TextureIndex">
            <summary>
            The index to a specific texture in the font cache.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontCharacterEntry.OffsetX">
            <summary>
            The left bearing expressed in integer pixels.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontCharacterEntry.OffsetY">
            <summary>
            The top bearing expressed in integer pixels.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontCharacterEntry.AdvanceX">
            <summary>
            The amount to advance in X before drawing the next character in a string.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontCharacterEntry.BearingY">
            <summary>
            The distance from baseline to glyph top most point.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontCharacterEntry.Height">
            <summary>
            The height in pixels of the glyph.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontCharacterEntry.UV">
            <summary>
            The start location of the character in the texture (in texture coordinates space).
            </summary>
        </member>
        <member name="F:FlaxEngine.FontCharacterEntry.UVSize">
            <summary>
            The size the character in the texture (in texture coordinates space).
            </summary>
        </member>
        <member name="T:FlaxEngine.Font">
            <summary>
            Represents font object that can be using during text rendering (it uses Font Asset but with pre-cached data for chosen font properties).
            </summary>
        </member>
        <member name="M:FlaxEngine.Font.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Font"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Font.Asset">
            <summary>
            Gets parent font asset that contains font family used by this font.
            </summary>
        </member>
        <member name="P:FlaxEngine.Font.Size">
            <summary>
            Gets font size.
            </summary>
        </member>
        <member name="P:FlaxEngine.Font.Height">
            <summary>
            Gets characters height.
            </summary>
        </member>
        <member name="P:FlaxEngine.Font.Descender">
            <summary>
            Gets the largest vertical distance below the baseline for any character in the font.
            </summary>
        </member>
        <member name="P:FlaxEngine.Font.LineGap">
            <summary>
            Gets the line gap property.
            </summary>
        </member>
        <member name="M:FlaxEngine.Font.GetKerning(System.Char,System.Char)">
            <summary>
            Gets the kerning amount for a pair of characters.
            </summary>
            <param name="first">The first character in the pair.</param>
            <param name="second">The second character in the pair.</param>
            <returns>The kerning amount or 0 if no kerning.</returns>
        </member>
        <member name="M:FlaxEngine.Font.CacheText(System.String)">
            <summary>
            Caches the given text to prepared for the rendering.
            </summary>
            <param name="text">The text witch characters to cache.</param>
        </member>
        <member name="M:FlaxEngine.Font.Invalidate">
            <summary>
            Invalidates all cached dynamic font atlases using this font. Can be used to reload font characters after changing font asset options.
            </summary>
        </member>
        <member name="M:FlaxEngine.Font.ProcessText(System.String,FlaxEngine.TextLayoutOptions@)">
            <summary>
            Processes text to get cached lines for rendering.
            </summary>
            <param name="text">The input text.</param>
            <param name="layout">The layout properties.</param>
            <returns>The output lines list.</returns>
        </member>
        <member name="M:FlaxEngine.Font.ProcessText(System.String)">
            <summary>
            Processes text to get cached lines for rendering.
            </summary>
            <param name="text">The input text.</param>
            <returns>The output lines list.</returns>
        </member>
        <member name="M:FlaxEngine.Font.MeasureText(System.String,FlaxEngine.TextLayoutOptions@)">
            <summary>
            Measures minimum size of the rectangle that will be needed to draw given text.
            </summary>
            <param name="text">The input text to test.</param>
            <param name="layout">The layout properties.</param>
            <returns>The minimum size for that text and fot to render properly.</returns>
        </member>
        <member name="M:FlaxEngine.Font.MeasureText(System.String)">
            <summary>
            Measures minimum size of the rectangle that will be needed to draw given text
            </summary>.
            <param name="text">The input text to test.</param>
            <returns>The minimum size for that text and fot to render properly.</returns>
        </member>
        <member name="M:FlaxEngine.Font.HitTestText(System.String,FlaxEngine.TextRange@,FlaxEngine.Vector2,FlaxEngine.TextLayoutOptions@)">
            <summary>
            Calculates hit character index at given location.
            </summary>
            <param name="text">The input text to test.</param>
            <param name="textRange">The input text range (substring range of the input text parameter).</param>
            <param name="location">The input location to test.</param>
            <param name="layout">The text layout properties.</param>
            <returns>The selected character position index (can be equal to text length if location is outside of the layout rectangle).</returns>
        </member>
        <member name="M:FlaxEngine.Font.HitTestText(System.String,FlaxEngine.Vector2,FlaxEngine.TextLayoutOptions@)">
            <summary>
            Calculates hit character index at given location.
            </summary>
            <param name="text">The input text to test.</param>
            <param name="location">The input location to test.</param>
            <param name="layout">The text layout properties.</param>
            <returns>The selected character position index (can be equal to text length if location is outside of the layout rectangle).</returns>
        </member>
        <member name="M:FlaxEngine.Font.HitTestText(System.String,FlaxEngine.Vector2)">
            <summary>
            Calculates hit character index at given location.
            </summary>
            <param name="text">The input text to test.</param>
            <param name="location">The input location to test.</param>
            <returns>The selected character position index (can be equal to text length if location is outside of the layout rectangle).</returns>
        </member>
        <member name="M:FlaxEngine.Font.HitTestText(System.String,FlaxEngine.TextRange@,FlaxEngine.Vector2)">
            <summary>
            Calculates hit character index at given location.
            </summary>
            <param name="text">The input text to test.</param>
            <param name="textRange">The input text range (substring range of the input text parameter).</param>
            <param name="location">The input location to test.</param>
            <returns>The selected character position index (can be equal to text length if location is outside of the layout rectangle).</returns>
        </member>
        <member name="M:FlaxEngine.Font.GetCharPosition(System.String,System.Int32,FlaxEngine.TextLayoutOptions@)">
            <summary>
            Calculates character position for given text and character index.
            </summary>
            <param name="text">The input text to test.</param>
            <param name="index">The text position to get coordinates of.</param>
            <param name="layout">The text layout properties.</param>
            <returns>The character position (upper left corner which can be used for a caret position).</returns>
        </member>
        <member name="M:FlaxEngine.Font.GetCharPosition(System.String,FlaxEngine.TextRange@,System.Int32,FlaxEngine.TextLayoutOptions@)">
            <summary>
            Calculates character position for given text and character index.
            </summary>
            <param name="text">The input text to test.</param>
            <param name="textRange">The input text range (substring range of the input text parameter).</param>
            <param name="index">The text position to get coordinates of.</param>
            <param name="layout">The text layout properties.</param>
            <returns>The character position (upper left corner which can be used for a caret position).</returns>
        </member>
        <member name="M:FlaxEngine.Font.GetCharPosition(System.String,System.Int32)">
            <summary>
            Calculates character position for given text and character index
            </summary>
            <param name="text">The input text to test.</param>
            <param name="index">The text position to get coordinates of.</param>
            <returns>The character position (upper left corner which can be used for a caret position).</returns>
        </member>
        <member name="M:FlaxEngine.Font.GetCharPosition(System.String,FlaxEngine.TextRange@,System.Int32)">
            <summary>
            Calculates character position for given text and character index
            </summary>
            <param name="text">The input text to test.</param>
            <param name="textRange">The input text range (substring range of the input text parameter).</param>
            <param name="index">The text position to get coordinates of.</param>
            <returns>The character position (upper left corner which can be used for a caret position).</returns>
        </member>
        <member name="T:FlaxEngine.FontHinting">
            <summary>
            The font hinting used when rendering characters.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontHinting.Default">
            <summary>
            Use the default hinting specified in the font.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontHinting.Auto">
            <summary>
            Force the use of an automatic hinting algorithm (over the font's native hinter).
            </summary>
        </member>
        <member name="F:FlaxEngine.FontHinting.AutoLight">
            <summary>
            Force the use of an automatic light hinting algorithm, optimized for non-monochrome displays.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontHinting.Monochrome">
            <summary>
            Force the use of an automatic hinting algorithm optimized for monochrome displays.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontHinting.None">
            <summary>
            Do not use hinting. This generally generates 'blurrier' bitmap glyphs when the glyph are rendered in any of the anti-aliased modes.
            </summary>
        </member>
        <member name="T:FlaxEngine.FontFlags">
            <summary>
            The font flags used when rendering characters.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontFlags.None">
            <summary>
            No options.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontFlags.AntiAliasing">
            <summary>
            Enables using anti-aliasing for font characters. Otherwise font will use monochrome data.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontFlags.Bold">
            <summary>
            Enables artificial embolden effect.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontFlags.Italic">
            <summary>
            Enables slant effect, emulating italic style.
            </summary>
        </member>
        <member name="T:FlaxEngine.FontOptions">
            <summary>
            The font asset options.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontOptions.Hinting">
            <summary>
            The hinting.
            </summary>
        </member>
        <member name="F:FlaxEngine.FontOptions.Flags">
            <summary>
            The flags.
            </summary>
        </member>
        <member name="M:FlaxEngine.FontOptions.Equals(FlaxEngine.FontOptions)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="other">The other object to compare.</param>
            <returns><c>true</c> if this object has the same value as <paramref name="other" />; otherwise, <c>false</c> </returns>
        </member>
        <member name="M:FlaxEngine.FontOptions.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.FontOptions.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.FontOptions.op_Equality(FlaxEngine.FontOptions,FlaxEngine.FontOptions)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.FontOptions.op_Inequality(FlaxEngine.FontOptions,FlaxEngine.FontOptions)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise,<c>false</c>.</returns>
        </member>
        <member name="T:FlaxEngine.FontAsset">
            <summary>
            Font asset contains glyph collection and cached data used to render text.
            </summary>
        </member>
        <member name="M:FlaxEngine.FontAsset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FontAsset"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.FontAsset.FamilyName">
            <summary>
            Gets the font family name.
            </summary>
        </member>
        <member name="P:FlaxEngine.FontAsset.StyleName">
            <summary>
            Gets the font style name.
            </summary>
        </member>
        <member name="P:FlaxEngine.FontAsset.Options">
            <summary>
            Gets or sets the font options.
            </summary>
        </member>
        <member name="M:FlaxEngine.FontAsset.CreateFont(System.Int32)">
            <summary>
            Creates the font object of given characters size.
            </summary>
            <param name="size">The font characters size.</param>
            <returns>The created font object.</returns>
        </member>
        <member name="M:FlaxEngine.FontAsset.Invalidate">
            <summary>
            Invalidates all cached dynamic font atlases using this font. Can be used to reload font characters after changing font asset options.
            </summary>
        </member>
        <member name="T:FlaxEngine.FontTextureAtlas">
            <summary>
            Texture resource that contains an atlas of cached font glyphs.
            </summary>
        </member>
        <member name="M:FlaxEngine.FontTextureAtlas.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FontTextureAtlas"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.Render2D">
            <summary>
            Rendering 2D shapes and text using Graphics Device.
            </summary>
        </member>
        <member name="P:FlaxEngine.Render2D.Features">
            <summary>
            The active rendering features flags.
            </summary>
        </member>
        <member name="M:FlaxEngine.Render2D.Begin(FlaxEngine.GPUContext,FlaxEngine.GPUTexture,FlaxEngine.GPUTexture)">
            <summary>
            Begins the rendering phrase.
            </summary>
            <param name="context">The GPU commands context to use.</param>
            <param name="output">The output target.</param>
            <param name="depthBuffer">The depth buffer.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.Begin(FlaxEngine.GPUContext,FlaxEngine.GPUTexture,FlaxEngine.GPUTexture,FlaxEngine.Matrix@)">
            <summary>
            Begins the rendering phrase.
            </summary>
            <param name="context">The GPU commands context to use.</param>
            <param name="output">The output target.</param>
            <param name="depthBuffer">The depth buffer.</param>
            <param name="viewProjection">The View*Projection matrix. Allows to render GUI in 3D or with custom transformations.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.Begin(FlaxEngine.GPUContext,FlaxEngine.GPUTextureView,FlaxEngine.GPUTextureView,FlaxEngine.Viewport@)">
            <summary>
            Begins the rendering phrase.
            </summary>
            <param name="context">The GPU commands context to use.</param>
            <param name="output">The output target.</param>
            <param name="depthBuffer">The depth buffer.</param>
            <param name="viewport">The output viewport.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.Begin(FlaxEngine.GPUContext,FlaxEngine.GPUTextureView,FlaxEngine.GPUTextureView,FlaxEngine.Viewport@,FlaxEngine.Matrix@)">
            <summary>
            Begins the rendering phrase.
            </summary>
            <param name="context">The GPU commands context to use.</param>
            <param name="output">The output target.</param>
            <param name="depthBuffer">The depth buffer.</param>
            <param name="viewport">The output viewport.</param>
            <param name="viewProjection">The View*Projection matrix. Allows to render GUI in 3D or with custom transformations.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.End">
            <summary>
            Ends the rendering phrase.
            </summary>
        </member>
        <member name="M:FlaxEngine.Render2D.PushTransform(FlaxEngine.Matrix3x3@)">
            <summary>
            Pushes transformation layer.
            </summary>
            <param name="transform">The transformation to apply.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.PeekTransform(FlaxEngine.Matrix3x3@)">
            <summary>
            Peeks the current transformation layer.
            </summary>
            <param name="transform">The output transformation to apply combined from all the transformations together (pushed into the transformation stack).</param>
        </member>
        <member name="M:FlaxEngine.Render2D.PopTransform">
            <summary>
            Pops transformation layer.
            </summary>
        </member>
        <member name="M:FlaxEngine.Render2D.PushClip(FlaxEngine.Rectangle@)">
            <summary>
            Pushes clipping rectangle mask.
            </summary>
            <param name="clipRect">The axis aligned clipping mask rectangle.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.PeekClip(FlaxEngine.Rectangle@)">
            <summary>
            Peeks the current clipping rectangle mask.
            </summary>
            <param name="clipRect">The output axis aligned clipping mask rectangle combined from all the masks together (pushed into the masking stack).</param>
        </member>
        <member name="M:FlaxEngine.Render2D.PopClip">
            <summary>
            Pops clipping rectangle mask.
            </summary>
        </member>
        <member name="M:FlaxEngine.Render2D.PushTint(FlaxEngine.Color@,System.Boolean)">
            <summary>
            Pushes tint color.
            </summary>
            <param name="tint">The tint color.</param>
            <param name="inherit">Multiply <paramref ref="tint"/> by the last tint on the stack.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.PeekTint(FlaxEngine.Color@)">
            <summary>
            Peeks the current tint color.
            </summary>
            <param name="tint">The output tint color.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.PopTint">
            <summary>
            Pops tint color.
            </summary>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawText(FlaxEngine.Font,System.String,FlaxEngine.Color,FlaxEngine.Vector2,FlaxEngine.MaterialBase)">
            <summary>
            Draws a text.
            </summary>
            <param name="font">The font to use.</param>
            <param name="text">The text to render.</param>
            <param name="color">The text color.</param>
            <param name="location">The text location.</param>
            <param name="customMaterial">The custom material for font characters rendering. It must contain texture parameter named Font used to sample font texture.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawText(FlaxEngine.Font,System.String,FlaxEngine.TextRange@,FlaxEngine.Color,FlaxEngine.Vector2,FlaxEngine.MaterialBase)">
            <summary>
            Draws a text.
            </summary>
            <param name="font">The font to use.</param>
            <param name="text">The text to render.</param>
            <param name="textRange">The input text range (substring range of the input text parameter).</param>
            <param name="color">The text color.</param>
            <param name="location">The text location.</param>
            <param name="customMaterial">The custom material for font characters rendering. It must contain texture parameter named Font used to sample font texture.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawText(FlaxEngine.Font,System.String,FlaxEngine.Color,FlaxEngine.TextLayoutOptions@,FlaxEngine.MaterialBase)">
            <summary>
            Draws a text with formatting.
            </summary>
            <param name="font">The font to use.</param>
            <param name="text">The text to render.</param>
            <param name="color">The text color.</param>
            <param name="layout">The text layout properties.</param>
            <param name="customMaterial">The custom material for font characters rendering. It must contain texture parameter named Font used to sample font texture.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawText(FlaxEngine.Font,System.String,FlaxEngine.TextRange@,FlaxEngine.Color,FlaxEngine.TextLayoutOptions@,FlaxEngine.MaterialBase)">
            <summary>
            Draws a text with formatting.
            </summary>
            <param name="font">The font to use.</param>
            <param name="text">The text to render.</param>
            <param name="textRange">The input text range (substring range of the input text parameter).</param>
            <param name="color">The text color.</param>
            <param name="layout">The text layout properties.</param>
            <param name="customMaterial">The custom material for font characters rendering. It must contain texture parameter named Font used to sample font texture.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.FillRectangle(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Fills a rectangle area.
            </summary>
            <param name="rect">The rectangle to fill.</param>
            <param name="color">The color to use.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.FillRectangle(FlaxEngine.Rectangle,FlaxEngine.Color,FlaxEngine.Color,FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Fills a rectangle area.
            </summary>
            <param name="rect">The rectangle to fill.</param>
            <param name="color1">The color to use for upper left vertex.</param>
            <param name="color2">The color to use for upper right vertex.</param>
            <param name="color3">The color to use for bottom right vertex.</param>
            <param name="color4">The color to use for bottom left vertex.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawRectangle(FlaxEngine.Rectangle,FlaxEngine.Color,System.Single)">
            <summary>
            Draws a rectangle borders.
            </summary>
            <param name="rect">The rectangle to draw.</param>
            <param name="color">The color to use.</param>
            <param name="thickness">The line thickness.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawRectangle(FlaxEngine.Rectangle,FlaxEngine.Color,FlaxEngine.Color,FlaxEngine.Color,FlaxEngine.Color,System.Single)">
            <summary>
            Draws a rectangle borders.
            </summary>
            <param name="rect">The rectangle to fill.</param>
            <param name="color1">The color to use for upper left vertex.</param>
            <param name="color2">The color to use for upper right vertex.</param>
            <param name="color3">The color to use for bottom right vertex.</param>
            <param name="color4">The color to use for bottom left vertex.</param>
            <param name="thickness">The line thickness.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawTexture(FlaxEngine.GPUTextureView,FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draws the render target.
            </summary>
            <param name="rt">The render target handle to draw.</param>
            <param name="rect">The rectangle to draw.</param>
            <param name="color">The color to multiply all texture pixels.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawTexture(FlaxEngine.GPUTexture,FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draws the texture.
            </summary>
            <param name="t">The texture to draw.</param>
            <param name="rect">The rectangle to draw.</param>
            <param name="color">The color to multiply all texture pixels.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawTexture(FlaxEngine.TextureBase,FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draws the texture.
            </summary>
            <param name="t">The texture to draw.</param>
            <param name="rect">The rectangle to draw.</param>
            <param name="color">The color to multiply all texture pixels.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawSprite(FlaxEngine.SpriteHandle,FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draws a sprite.
            </summary>
            <param name="spriteHandle">The sprite to draw.</param>
            <param name="rect">The rectangle to draw.</param>
            <param name="color">The color to multiply all texture pixels.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawTexturePoint(FlaxEngine.GPUTexture,FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draws the texture (uses point sampler).
            </summary>
            <param name="t">The texture to draw.</param>
            <param name="rect">The rectangle to draw.</param>
            <param name="color">The color to multiply all texture pixels.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawSpritePoint(FlaxEngine.SpriteHandle,FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draws a sprite (uses point sampler).
            </summary>
            <param name="spriteHandle">The sprite to draw.</param>
            <param name="rect">The rectangle to draw.</param>
            <param name="color">The color to multiply all texture pixels.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.Draw9SlicingTexture(FlaxEngine.TextureBase,FlaxEngine.Rectangle,FlaxEngine.Vector4,FlaxEngine.Vector4,FlaxEngine.Color)">
            <summary>
            Draws the texture using 9-slicing.
            </summary>
            <param name="t">The texture to draw.</param>
            <param name="rect">The rectangle to draw.</param>
            <param name="border">The borders for 9-slicing (inside rectangle, ordered: left, right, top, bottom).</param>
            <param name="borderUVs">The borders UVs for 9-slicing (inside rectangle UVs, ordered: left, right, top, bottom).</param>
            <param name="color">The color to multiply all texture pixels.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.Draw9SlicingTexturePoint(FlaxEngine.TextureBase,FlaxEngine.Rectangle,FlaxEngine.Vector4,FlaxEngine.Vector4,FlaxEngine.Color)">
            <summary>
            Draws the texture using 9-slicing (uses point sampler).
            </summary>
            <param name="t">The texture to draw.</param>
            <param name="rect">The rectangle to draw.</param>
            <param name="border">The borders for 9-slicing (inside rectangle, ordered: left, right, top, bottom).</param>
            <param name="borderUVs">The borders UVs for 9-slicing (inside rectangle UVs, ordered: left, right, top, bottom).</param>
            <param name="color">The color to multiply all texture pixels.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.Draw9SlicingSprite(FlaxEngine.SpriteHandle,FlaxEngine.Rectangle,FlaxEngine.Vector4,FlaxEngine.Vector4,FlaxEngine.Color)">
            <summary>
            Draws a sprite using 9-slicing.
            </summary>
            <param name="spriteHandle">The sprite to draw.</param>
            <param name="rect">The rectangle to draw.</param>
            <param name="border">The borders for 9-slicing (inside rectangle, ordered: left, right, top, bottom).</param>
            <param name="borderUVs">The borders UVs for 9-slicing (inside rectangle UVs, ordered: left, right, top, bottom).</param>
            <param name="color">The color to multiply all texture pixels.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.Draw9SlicingSpritePoint(FlaxEngine.SpriteHandle,FlaxEngine.Rectangle,FlaxEngine.Vector4,FlaxEngine.Vector4,FlaxEngine.Color)">
            <summary>
            Draws a sprite using 9-slicing (uses point sampler).
            </summary>
            <param name="spriteHandle">The sprite to draw.</param>
            <param name="rect">The rectangle to draw.</param>
            <param name="border">The borders for 9-slicing (inside rectangle, ordered: left, right, top, bottom).</param>
            <param name="borderUVs">The borders UVs for 9-slicing (inside rectangle UVs, ordered: left, right, top, bottom).</param>
            <param name="color">The color to multiply all texture pixels.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawCustom(FlaxEngine.GPUTexture,FlaxEngine.Rectangle,FlaxEngine.GPUPipelineState,FlaxEngine.Color)">
            <summary>
            Performs custom rendering.
            </summary>
            <param name="t">The texture to use.</param>
            <param name="rect">The rectangle area to draw.</param>
            <param name="ps">The custom pipeline state to use (input must match default Render2D vertex shader and can use single texture).</param>
            <param name="color">The color to multiply all texture pixels.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawLine(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Color,System.Single)">
            <summary>
            Draws a line.
            </summary>
            <param name="p1">The start point.</param>
            <param name="p2">The end point.</param>
            <param name="color">The line color.</param>
            <param name="thickness">The line thickness.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawLine(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Color,FlaxEngine.Color,System.Single)">
            <summary>
            Draws a line.
            </summary>
            <param name="p1">The start point.</param>
            <param name="p2">The end point.</param>
            <param name="color1">The line start color.</param>
            <param name="color2">The line end color.</param>
            <param name="thickness">The line thickness.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawBezier(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Color,System.Single)">
            <summary>
            Draws a Bezier curve.
            </summary>
            <param name="p1">The start point.</param>
            <param name="p2">The first control point.</param>
            <param name="p3">The second control point.</param>
            <param name="p4">The end point.</param>
            <param name="color">The line color</param>
            <param name="thickness">The line thickness.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawMaterial(FlaxEngine.MaterialBase,FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draws the GUI material.
            </summary>
            <param name="material">The material to render. Must be a GUI material type.</param>
            <param name="rect">The target rectangle to draw.</param>
            <param name="color">The color to use.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawBlur(FlaxEngine.Rectangle,System.Single)">
            <summary>
            Draws the background blur.
            </summary>
            <param name="rect">The target rectangle to draw (blurs its background).</param>
            <param name="blurStrength">The blur strength defines how blurry the background is. Larger numbers increase blur, resulting in a larger runtime cost on the GPU.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawTexturedTriangles(FlaxEngine.GPUTexture,FlaxEngine.Vector2[],FlaxEngine.Vector2[])">
            <summary>
            Draws vertices array.
            </summary>
            <param name="t">The texture.</param>
            <param name="vertices">The vertices array.</param>
            <param name="uvs">The uvs array.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawTexturedTriangles(FlaxEngine.GPUTexture,FlaxEngine.Vector2[],FlaxEngine.Vector2[],FlaxEngine.Color)">
            <summary>
            Draws vertices array.
            </summary>
            <param name="t">The texture.</param>
            <param name="vertices">The vertices array.</param>
            <param name="uvs">The uvs array.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawTexturedTriangles(FlaxEngine.GPUTexture,FlaxEngine.Vector2[],FlaxEngine.Vector2[],FlaxEngine.Color[])">
            <summary>
            Draws vertices array.
            </summary>
            <param name="t">The texture.</param>
            <param name="vertices">The vertices array.</param>
            <param name="uvs">The uvs array.</param>
            <param name="colors">The colors array.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.FillTriangles(FlaxEngine.Vector2[],FlaxEngine.Color[],System.Boolean)">
            <summary>
            Draws vertices array.
            </summary>
            <param name="vertices">The vertices array.</param>
            <param name="colors">The colors array.</param>
            <param name="useAlpha">If true alpha blending will be enabled.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.FillTriangle(FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Vector2,FlaxEngine.Color)">
            <summary>
            Fills a triangular area.
            </summary>
            <param name="p0">The first point.</param>
            <param name="p1">The second point.</param>
            <param name="p2">The third point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="T:FlaxEngine.Render2D.RenderingFeatures">
            <summary>
            The rendering features and options flags.
            </summary>
        </member>
        <member name="F:FlaxEngine.Render2D.RenderingFeatures.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.Render2D.RenderingFeatures.VertexSnapping">
            <summary>
            Enables automatic geometry vertices snapping to integer coordinates in screen space. Reduces aliasing and sampling artifacts. Might be disabled for 3D projection viewport or for complex UI transformations.
            </summary>
        </member>
        <member name="M:FlaxEngine.Render2D.PushTransform(FlaxEngine.Matrix3x3)">
            <summary>
            Pushes transformation layer.
            </summary>
            <param name="transform">The transformation to apply.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.PushClip(FlaxEngine.Rectangle)">
            <summary>
            Pushes clipping rectangle mask.
            </summary>
            <param name="clipRect">The axis aligned clipping mask rectangle.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawTexture(FlaxEngine.GPUTextureView,FlaxEngine.Rectangle)">
            <summary>
            Draws the render target.
            </summary>
            <param name="rt">The render target handle to draw.</param>
            <param name="rect">The rectangle to draw.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawTexture(FlaxEngine.GPUTexture,FlaxEngine.Rectangle)">
            <summary>
            Draws the texture.
            </summary>
            <param name="t">The texture to draw.</param>
            <param name="rect">The rectangle to draw.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawTexture(FlaxEngine.TextureBase,FlaxEngine.Rectangle)">
            <summary>
            Draws the texture.
            </summary>
            <param name="t">The texture to draw.</param>
            <param name="rect">The rectangle to draw.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawSprite(FlaxEngine.SpriteHandle,FlaxEngine.Rectangle)">
            <summary>
            Draws a sprite.
            </summary>
            <param name="spriteHandle">The sprite to draw.</param>
            <param name="rect">The rectangle to draw.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawTexturePoint(FlaxEngine.GPUTexture,FlaxEngine.Rectangle)">
            <summary>
            Draws the texture (uses point sampler).
            </summary>
            <param name="t">The texture to draw.</param>
            <param name="rect">The rectangle to draw.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawSpritePoint(FlaxEngine.SpriteHandle,FlaxEngine.Rectangle)">
            <summary>
            Draws a sprite (uses point sampler).
            </summary>
            <param name="spriteHandle">The sprite to draw.</param>
            <param name="rect">The rectangle to draw.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawMaterial(FlaxEngine.MaterialBase,FlaxEngine.Rectangle)">
            <summary>
            Draws the GUI material.
            </summary>
            <param name="material">The material to render. Must be a GUI material type.</param>
            <param name="rect">The target rectangle to draw.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawText(FlaxEngine.Font,System.String,FlaxEngine.Rectangle,FlaxEngine.Color,FlaxEngine.TextAlignment,FlaxEngine.TextAlignment,FlaxEngine.TextWrapping,System.Single,System.Single)">
            <summary>
            Draws a text.
            </summary>
            <param name="font">The font to use.</param>
            <param name="text">The text to render.</param>
            <param name="layoutRect">The size and position of the area in which the text is drawn.</param>
            <param name="color">The text color.</param>
            <param name="horizontalAlignment">The horizontal alignment of the text in a layout rectangle.</param>
            <param name="verticalAlignment">The vertical alignment of the text in a layout rectangle.</param>
            <param name="textWrapping">Describes how wrap text inside a layout rectangle.</param>
            <param name="baseLinesGapScale">The scale for distance one baseline from another. Default is 1.</param>
            <param name="scale">The text drawing scale. Default is 1.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.DrawText(FlaxEngine.Font,FlaxEngine.MaterialBase,System.String,FlaxEngine.Rectangle,FlaxEngine.Color,FlaxEngine.TextAlignment,FlaxEngine.TextAlignment,FlaxEngine.TextWrapping,System.Single,System.Single)">
            <summary>
            Draws a text using a custom material shader. Given material must have GUI domain and a public parameter named Font (texture parameter used for a font atlas sampling).
            </summary>
            <param name="font">The font to use.</param>
            <param name="customMaterial">Custom material for font characters rendering. It must contain texture parameter named Font used to sample font texture.</param>
            <param name="text">The text to render.</param>
            <param name="layoutRect">The size and position of the area in which the text is drawn.</param>
            <param name="color">The text color.</param>
            <param name="horizontalAlignment">The horizontal alignment of the text in a layout rectangle.</param>
            <param name="verticalAlignment">The vertical alignment of the text in a layout rectangle.</param>
            <param name="textWrapping">Describes how wrap text inside a layout rectangle.</param>
            <param name="baseLinesGapScale">The scale for distance one baseline from another. Default is 1.</param>
            <param name="scale">The text drawing scale. Default is 1.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.CallDrawing(FlaxEngine.IDrawable,FlaxEngine.GPUContext,FlaxEngine.GPUTexture)">
            <summary>
            Calls drawing GUI to the texture.
            </summary>
            <param name="drawableElement">The root container for Draw methods.</param>
            <param name="context">The GPU context to handle graphics commands.</param>
            <param name="output">The output render target.</param>
        </member>
        <member name="M:FlaxEngine.Render2D.CallDrawing(FlaxEngine.IDrawable,FlaxEngine.GPUContext,FlaxEngine.GPUTexture,FlaxEngine.GPUTexture,FlaxEngine.Matrix@)">
            <summary>
            Calls drawing GUI to the texture using custom View*Projection matrix.
            If depth buffer texture is provided there will be depth test performed during rendering.
            </summary>
            <param name="drawableElement">The root container for Draw methods.</param>
            <param name="context">The GPU context to handle graphics commands.</param>
            <param name="output">The output render target.</param>
            <param name="depthBuffer">The depth buffer render target. It's optional parameter but if provided must match output texture.</param>
            <param name="viewProjection">The View*Projection matrix used to transform all rendered vertices.</param>
        </member>
        <member name="T:FlaxEngine.Sprite">
            <summary>
            Contains information about single atlas slot with sprite texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.Sprite.Area">
            <summary>
            The normalized area of the sprite in the atlas (in range [0;1]).
            </summary>
        </member>
        <member name="F:FlaxEngine.Sprite.Name">
            <summary>
            The sprite name.
            </summary>
        </member>
        <member name="T:FlaxEngine.SpriteHandle">
            <summary>
            Handle to sprite atlas slot with a single sprite texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.SpriteHandle.Atlas">
            <summary>
            The parent atlas.
            </summary>
        </member>
        <member name="F:FlaxEngine.SpriteHandle.Index">
            <summary>
            The atlas sprites array index.
            </summary>
        </member>
        <member name="F:FlaxEngine.SpriteHandle.Invalid">
            <summary>
            Invalid sprite handle.
            </summary>
        </member>
        <member name="M:FlaxEngine.SpriteHandle.#ctor(FlaxEngine.SpriteAtlas,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Sprite"/> struct.
            </summary>
            <param name="atlas">The atlas.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:FlaxEngine.SpriteHandle.IsValid">
            <summary>
            Returns true if sprite is valid.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpriteHandle.Name">
            <summary>
            Gets or sets the sprite name.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpriteHandle.Location">
            <summary>
            Gets or sets the sprite location (in pixels).
            </summary>
        </member>
        <member name="P:FlaxEngine.SpriteHandle.Size">
            <summary>
            Gets or sets the sprite size (in pixels).
            </summary>
        </member>
        <member name="P:FlaxEngine.SpriteHandle.Area">
            <summary>
            Gets or sets the sprite area in atlas (in normalized atlas coordinates [0;1]).
            </summary>
        </member>
        <member name="T:FlaxEngine.SpriteAtlas">
            <summary>
            Sprite atlas asset that contains collection of sprites combined into a single texture.
            </summary>
            <seealso cref="T:FlaxEngine.TextureBase" />
        </member>
        <member name="M:FlaxEngine.SpriteAtlas.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SpriteAtlas"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpriteAtlas.Sprites">
            <summary>
            List with all tiles in the sprite atlas.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpriteAtlas.SpritesCount">
            <summary>
            Gets the sprites count.
            </summary>
        </member>
        <member name="M:FlaxEngine.SpriteAtlas.GetSprite(System.Int32)">
            <summary>
            Gets the sprite data.
            </summary>
            <param name="index">The index.</param>
            <returns>The sprite data.</returns>
        </member>
        <member name="M:FlaxEngine.SpriteAtlas.SetSprite(System.Int32,FlaxEngine.Sprite@)">
            <summary>
            Sets the sprite data.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The sprite data.</param>
        </member>
        <member name="M:FlaxEngine.SpriteAtlas.FindSprite(System.String)">
            <summary>
            Finds the sprite by the name.
            </summary>
            <param name="name">The name.</param>
            <returns>The sprite handle.</returns>
        </member>
        <member name="M:FlaxEngine.SpriteAtlas.AddSprite(FlaxEngine.Sprite)">
            <summary>
            Adds the sprite.
            </summary>
            <param name="sprite">The sprite.</param>
            <returns>The sprite handle.</returns>
        </member>
        <member name="M:FlaxEngine.SpriteAtlas.RemoveSprite(System.Int32)">
            <summary>
            Removes the sprite.
            </summary>
            <param name="index">The sprite index.</param>
        </member>
        <member name="T:FlaxEngine.TextAlignment">
            <summary>
            Specifies the alignment of the text along horizontal or vertical direction in the layout box.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextAlignment.Near">
            <summary>
            Align text near the edge.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextAlignment.Center">
            <summary>
            Align text to the center.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextAlignment.Far">
            <summary>
            Align text to the far edge.
            </summary>
        </member>
        <member name="T:FlaxEngine.TextWrapping">
            <summary>
            Specifies text wrapping to be used in a particular multiline paragraph.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextWrapping.NoWrap">
            <summary>
            No text wrapping.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextWrapping.WrapWords">
            <summary>
            Wrap only whole words that overflow.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextWrapping.WrapChars">
            <summary>
            Wrap single characters that overflow.
            </summary>
        </member>
        <member name="T:FlaxEngine.TextLayoutOptions">
            <summary>
            Structure which describes text layout properties.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextLayoutOptions.Bounds">
            <summary>
            The layout rectangle (text bounds).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextLayoutOptions.HorizontalAlignment">
            <summary>
            The horizontal alignment mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextLayoutOptions.VerticalAlignment">
            <summary>
            The vertical alignment mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextLayoutOptions.TextWrapping">
            <summary>
            The text wrapping mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextLayoutOptions.Scale">
            <summary>
            The text scale factor. Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextLayoutOptions.BaseLinesGapScale">
            <summary>
            Base line gap scale. Default is 1.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextLayoutOptions.Default">
            <summary>
            Gets the default layout.
            </summary>
        </member>
        <member name="T:FlaxEngine.LightmapSettings">
            <summary>
            Describes lightmap generation options
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.IndirectLightingIntensity">
            <summary>
            Controls how much all lights will contribute indirect lighting.
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.GlobalObjectsScale">
            <summary>
            Global scale for objects in lightmap to increase quality
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.ChartsPadding">
            <summary>
            Amount of pixels space between charts in lightmap atlas
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.AtlasSize">
            <summary>
            Single lightmap atlas size (width and height in pixels)
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.BounceCount">
            <summary>
            Amount of indirect light GI bounce passes
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.CompressLightmaps">
            <summary>
            Enable/disable compressing lightmap textures (3 textures per lightmap with RGBA data in HDR)
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.UseGeometryWithNoMaterials">
            <summary>
            Enable/disable rendering static light for geometry with missing or empty material slots
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.Quality">
            <summary>
            GI quality (range  [0;100])
            </summary>
        </member>
        <member name="T:FlaxEngine.LightmapSettings.AtlasSizes">
            <summary>
            Lightmap atlas sizes (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.AtlasSizes._64">
            <summary>
            64x64
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.AtlasSizes._128">
            <summary>
            128x128
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.AtlasSizes._256">
            <summary>
            256x256
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.AtlasSizes._512">
            <summary>
            512x512
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.AtlasSizes._1024">
            <summary>
            1024x1024
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.AtlasSizes._2048">
            <summary>
            2048x2048
            </summary>
        </member>
        <member name="F:FlaxEngine.LightmapSettings.AtlasSizes._4096">
            <summary>
            4096x4096
            </summary>
        </member>
        <member name="T:FlaxEngine.Renderer">
            <summary>
            High-level rendering service.
            </summary>
        </member>
        <member name="M:FlaxEngine.Renderer.DrawSceneDepth(FlaxEngine.GPUContext,FlaxEngine.SceneRenderTask,FlaxEngine.GPUTexture,FlaxEngine.Actor[])">
            <summary>
            Draws scene objects depth (to the output Z buffer). The output must be depth texture to write hardware depth to it.
            </summary>
            <param name="context">The GPU commands context to use.</param>
            <param name="task">Render task to use it's view description and the render buffers.</param>
            <param name="output">The output texture. Must be valid and created.</param>
            <param name="customActors">The custom set of actors to render. If empty, the loaded scenes will be rendered.</param>
        </member>
        <member name="M:FlaxEngine.Renderer.DrawPostFxMaterial(FlaxEngine.GPUContext,FlaxEngine.RenderContext@,FlaxEngine.MaterialBase,FlaxEngine.GPUTexture,FlaxEngine.GPUTextureView)">
            <summary>
            Draws postFx material to the render target.
            </summary>
            <param name="context">The GPU commands context to use.</param>
            <param name="renderContext">The rendering context.</param>
            <param name="material">The material to render. It must be a post fx material.</param>
            <param name="output">The output texture. Must be valid and created.</param>
            <param name="input">The input texture. It's optional.</param>
        </member>
        <member name="M:FlaxEngine.Renderer.DrawSceneDepth(FlaxEngine.GPUContext,FlaxEngine.SceneRenderTask,FlaxEngine.GPUTexture,System.Collections.Generic.List{FlaxEngine.Actor})">
            <summary>
            Draws scene objects depth (to the output Z buffer). The output must be depth texture to write hardware depth to it.
            </summary>
            <param name="context">The GPU commands context to use.</param>
            <param name="task">Render task to use it's view description and the render buffers.</param>
            <param name="output">The output texture. Must be valid and created.</param>
            <param name="customActors">The custom set of actors to render. If empty, the loaded scenes will be rendered.</param>
        </member>
        <member name="T:FlaxEngine.DrawCallsListType">
            <summary>
            The draw calls list types.
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawCallsListType.Depth">
            <summary>
            Hardware depth rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawCallsListType.GBuffer">
            <summary>
            GBuffer rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawCallsListType.GBufferNoDecals">
            <summary>
            GBuffer rendering after decals.
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawCallsListType.Forward">
            <summary>
            Transparency rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawCallsListType.Distortion">
            <summary>
            Distortion accumulation rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawCallsListType.MotionVectors">
            <summary>
            Motion vectors rendering.
            </summary>
        </member>
        <member name="F:FlaxEngine.DrawCallsListType.MAX">
            <summary>
            The count of items in the DrawCallsListType enum.
            </summary>
        </member>
        <member name="T:FlaxEngine.RenderList">
            <summary>
            Rendering cache container object for the draw calls collecting, sorting and executing.
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.RenderList"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.RenderList.GetFromPool">
            <summary>
            Allocates the new renderer list object or reuses already allocated one.
            </summary>
            <returns>The cache object.</returns>
        </member>
        <member name="M:FlaxEngine.RenderList.ReturnToPool(FlaxEngine.RenderList)">
            <summary>
            Frees the list back to the pool.
            </summary>
            <param name="cache">The cache.</param>
        </member>
        <member name="M:FlaxEngine.RenderList.SortDrawCalls(FlaxEngine.RenderContext@,System.Boolean,FlaxEngine.DrawCallsListType)">
            <summary>
            Sorts the collected draw calls list.
            </summary>
            <param name="renderContext">The rendering context.</param>
            <param name="reverseDistance">If set to <c>true</c> reverse draw call distance to the view. Results in back to front sorting.</param>
            <param name="listType">The collected draw calls list type.</param>
        </member>
        <member name="M:FlaxEngine.RenderList.ExecuteDrawCalls(FlaxEngine.RenderContext@,FlaxEngine.DrawCallsListType)">
            <summary>
            Executes the collected draw calls.
            </summary>
            <param name="renderContext">The rendering context.</param>
            <param name="listType">The collected draw calls list type.</param>
        </member>
        <member name="T:FlaxEngine.PluginManager">
            <summary>
            Game and Editor plugins management service.
            </summary>
        </member>
        <member name="P:FlaxEngine.PluginManager.GamePlugins">
            <summary>
            Gets the game plugins.
            </summary>
        </member>
        <member name="P:FlaxEngine.PluginManager.EditorPlugins">
            <summary>
            Gets the editor plugins.
            </summary>
        </member>
        <member name="E:FlaxEngine.PluginManager.PluginLoading">
            <summary>
            Occurs before loading plugin.
            </summary>
        </member>
        <member name="E:FlaxEngine.PluginManager.PluginLoaded">
            <summary>
            Occurs when plugin gets loaded and initialized.
            </summary>
        </member>
        <member name="E:FlaxEngine.PluginManager.PluginUnloading">
            <summary>
            Occurs before unloading plugin.
            </summary>
        </member>
        <member name="E:FlaxEngine.PluginManager.PluginUnloaded">
            <summary>
            Occurs when plugin gets unloaded. It should not be used anymore.
            </summary>
        </member>
        <member name="E:FlaxEngine.PluginManager.PluginsChanged">
            <summary>
            Occurs when plugins collection gets edited (added or removed plugin).
            </summary>
        </member>
        <member name="T:FlaxEngine.PluginManager.CanLoadPluginDelegate">
            <summary>
            Determines whether can load the specified plugin.
            </summary>
            <param name="pluginDesc">The plugin description.</param>
            <returns>True if load it, otherwise false.</returns>
        </member>
        <member name="F:FlaxEngine.PluginManager.CanLoadPlugin">
            <summary>
            Determines whether can load the specified plugin.
            </summary>
        </member>
        <member name="T:FlaxEngine.PluginManager.PluginDelegate">
            <summary>
            Plugin related event delegate type.
            </summary>
            <param name="plugin">The plugin.</param>
        </member>
        <member name="M:FlaxEngine.PluginManager.DefaultCanLoadPlugin(FlaxEngine.PluginDescription@)">
            <summary>
            The default implementation for <see cref="F:FlaxEngine.PluginManager.CanLoadPlugin"/>.
            </summary>
            <param name="pluginDesc">The plugin description.</param>
            <returns>True if load it, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.PluginManager.GetPlugin``1">
            <summary>
            Returns the first plugin of the provided type.
            </summary>
            <typeparam name="T">The plugin type.</typeparam>
            <returns>The plugin, or null if not loaded.</returns>
        </member>
        <member name="M:FlaxEngine.PluginManager.GetPlugin(System.String)">
            <summary>
            Return the first plugin using the provided name.
            </summary>
            /// <param name="name">The plugin name.</param>
            <returns>The plugin, or null if not loaded.</returns>
        </member>
        <member name="T:FlaxEngine.Script">
            <summary>
            Base class for all scripts.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Script"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Script.Enabled">
            <summary>
            Gets or sets value indicating if script is active.
            </summary>
        </member>
        <member name="P:FlaxEngine.Script.Actor">
            <summary>
            Gets or sets the actor owning that script.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnAwake">
            <summary>
            Called after the object is loaded.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnEnable">
            <summary>
            Called when object becomes enabled and active.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnDisable">
            <summary>
            Called when object becomes disabled and inactive.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnDestroy">
            <summary>
            Called before the object will be destroyed..
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnStart">
            <summary>
            Called when a script is enabled just before any of the Update methods is called for the first time.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnUpdate">
            <summary>
            Called every frame if object is enabled.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnLateUpdate">
            <summary>
            Called every frame (after gameplay Update) if object is enabled.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnFixedUpdate">
            <summary>
            Called every fixed framerate frame if object is enabled.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnDebugDraw">
            <summary>
            Called during drawing debug shapes in editor. Use <see cref="T:FlaxEngine.DebugDraw"/> to draw debug shapes and other visualization.
            </summary>
        </member>
        <member name="M:FlaxEngine.Script.OnDebugDrawSelected">
            <summary>
            Called during drawing debug shapes in editor when object is selected. Use <see cref="T:FlaxEngine.DebugDraw"/> to draw debug shapes and other visualization.
            </summary>
        </member>
        <member name="P:FlaxEngine.Script.Scene">
            <summary>
            Gets the scene object which contains this script.
            </summary>
        </member>
        <member name="P:FlaxEngine.Script.Transform">
            <summary>
            Gets or sets the world space transformation of the actors owning this script.
            </summary>
        </member>
        <member name="P:FlaxEngine.Script.LocalTransform">
            <summary>
            Gets or sets the local space transformation of the actors owning this script.
            </summary>
        </member>
        <member name="T:FlaxEngine.Json.JsonSerializer">
            <summary>
            Objects serialization tool (json format).
            </summary>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.SaveToBytes(FlaxEngine.ISerializable)">
            <summary>
            Performs object Json serialization to the raw bytes.
            </summary>
            <param name="obj">The object to serialize (can be null).</param>
            <returns>The output data.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.LoadFromBytes(FlaxEngine.ISerializable,System.Byte[],System.Int32)">
            <summary>
            Performs object Json deserialization from the raw bytes.
            </summary>
            <param name="obj">The object to deserialize (can be null).</param>
            <param name="data">The source data to read from.</param>
            <param name="engineBuild">The engine build number of the saved data. Used to resolve old object formats when loading deprecated data.</param>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.ValueEquals(System.Object,System.Object)">
            <summary>
            The default implementation of the values comparision function used by the serialization system.
            </summary>
            <param name="objA">The object a.</param>
            <param name="objB">The object b.</param>
            <returns>True if both objects are equal, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.Serialize(System.Object,System.Boolean)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="isManagedOnly">True if serialize only C# members and skip C++ members (marked with <see cref="T:FlaxEngine.UnmanagedAttribute"/>).</param>
            <returns>The output json string.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Boolean)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="type">The object type. Can be typeof(object) to handle generic object serialization.</param>
            <param name="isManagedOnly">True if serialize only C# members and skip C++ members (marked with <see cref="T:FlaxEngine.UnmanagedAttribute"/>).</param>
            <returns>The output json string.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.SerializeDiff(System.Object,System.Object,System.Boolean)">
            <summary>
            Serializes the specified object difference to the other object of the same type. Used to serialize modified properties of the object during prefab instance serialization.
            </summary>
            <param name="obj">The object.</param>
            <param name="other">The reference object.</param>
            <param name="isManagedOnly">True if serialize only C# members and skip C++ members (marked with <see cref="T:FlaxEngine.UnmanagedAttribute"/>).</param>
            <returns>The output json string.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.Deserialize(System.Object,System.String)">
            <summary>
            Deserializes the specified object (from the input json data).
            </summary>
            <param name="input">The object.</param>
            <param name="json">The input json data.</param>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes the specified .NET object type (from the input json data).
            </summary>
            <param name="json">The input json data.</param>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.Deserialize(System.String,System.Type)">
            <summary>
            Deserializes the specified .NET object type (from the input json data).
            </summary>
            <param name="json">The input json data.</param>
            <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.Deserialize(System.String)">
            <summary>
            Deserializes the .NET object (from the input json data).
            </summary>
            <param name="json">The input json data.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.Deserialize(System.Object,System.Byte*,System.Int32)">
            <summary>
            Deserializes the specified object (from the input json data).
            </summary>
            <param name="input">The object.</param>
            <param name="jsonBuffer">The input json data buffer (raw, fixed memory buffer).</param>
            <param name="jsonLength">The input json data buffer length (characters count).</param>
        </member>
        <member name="T:FlaxEngine.Json.JsonSerializer.GuidInterop">
            <summary>
            Guid type in Flax format (the same as C++ layer).
            </summary>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.GetStringID(System.Guid)">
            <summary>
            Gets the string representation of the given object ID. It matches the internal serialization formatting rules.
            </summary>
            <param name="id">The object identifier.</param>
            <returns>The serialized ID.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.GetStringID(System.Guid*)">
            <summary>
            Gets the string representation of the given object ID. It matches the internal serialization formatting rules.
            </summary>
            <param name="id">The object identifier.</param>
            <returns>The serialized ID.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.GetStringID(FlaxEngine.Object)">
            <summary>
            Gets the string representation of the given object. It matches the internal serialization formatting rules.
            </summary>
            <param name="obj">The object.</param>
            <returns>The serialized ID.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.ParseID(System.String)">
            <summary>
            Parses the given object identifier represented in the internal serialization format.
            </summary>
            <param name="str">The ID string.</param>
            <returns>The identifier.</returns>
        </member>
        <member name="M:FlaxEngine.Json.JsonSerializer.ParseID(System.String,System.Guid@)">
            <summary>
            Parses the given object identifier represented in the internal serialization format.
            </summary>
            <param name="str">The ID string.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="T:FlaxEngine.Json.FlaxObjectConverter">
            <summary>
            Serialize references to the FlaxEngine.Object as Guid.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:FlaxEngine.Json.FlaxObjectConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.FlaxObjectConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.FlaxObjectConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Json.SceneReferenceConverter">
            <summary>
            Serialize SceneReference as Guid in internal format.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:FlaxEngine.Json.SceneReferenceConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.SceneReferenceConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.SceneReferenceConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Json.SoftObjectReferenceConverter">
            <summary>
            Serialize SoftObjectReference as Guid in internal format.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:FlaxEngine.Json.SoftObjectReferenceConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.SoftObjectReferenceConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.SoftObjectReferenceConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Json.MarginConverter">
            <summary>
            Serialize SoftObjectReference as Guid in internal format.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:FlaxEngine.Json.MarginConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.MarginConverter.WriteJsonDiff(Newtonsoft.Json.JsonWriter,System.Object,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.MarginConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.MarginConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.Json.MarginConverter.CanRead">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.Json.MarginConverter.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.Json.MarginConverter.CanWriteDiff">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Json.LocalizedStringConverter">
            <summary>
            Serialize LocalizedString as inlined text is not using localization (Id member is empty).
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:FlaxEngine.Json.LocalizedStringConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.LocalizedStringConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.LocalizedStringConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.JsonCustomSerializers.ExtendedDefaultContractResolver.CreateContract(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.JsonCustomSerializers.ExtendedDefaultContractResolver.CreateDictionaryContract(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Json.UnmanagedMemoryStream">
            <summary>
            Implements a <see cref="T:System.IO.Stream" /> that reads from unmanaged buffer (provided as raw pointer and length).
            </summary>
        </member>
        <member name="T:FlaxEngine.Json.UnmanagedStringReader">
            <summary>
            Implements a <see cref="T:System.IO.TextReader" /> that reads from unmanaged UTF8 string buffer (provided as raw pointer and length).
            </summary>
        </member>
        <member name="M:FlaxEngine.Json.UnmanagedStringReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Json.UnmanagedStringReader"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.Json.UnmanagedStringReader.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Json.UnmanagedStringReader"/> class.
            </summary>
            <param name="buffer">The text buffer pointer (raw, fixed memory).</param>
            <param name="length">The text length (characters count).</param>
        </member>
        <member name="M:FlaxEngine.Json.UnmanagedStringReader.Initialize(System.Void*,System.Int32)">
            <summary>
            Initializes the reader with the specified text buffer.
            </summary>
            <param name="buffer">The text buffer pointer (raw, fixed memory).</param>
            <param name="length">The text length (characters count).</param>
        </member>
        <member name="M:FlaxEngine.Json.UnmanagedStringReader.Initialize(System.IntPtr,System.Int32)">
            <summary>
            Initializes the reader with the specified text buffer.
            </summary>
            <param name="buffer">The text buffer pointer (raw, fixed memory).</param>
            <param name="length">The text length (characters count).</param>
        </member>
        <member name="M:FlaxEngine.Json.UnmanagedStringReader.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.UnmanagedStringReader.Peek">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Json.UnmanagedStringReader.Read">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.StreamingStats">
            <summary>
            Streaming service statistics container.
            </summary>
        </member>
        <member name="F:FlaxEngine.StreamingStats.ResourcesCount">
            <summary>
            Amount of active streamable resources.
            </summary>
        </member>
        <member name="F:FlaxEngine.StreamingStats.StreamingResourcesCount">
            <summary>
            Amount of resources that are during streaming in (target residency is higher that the current). Zero if all resources are streamed in.
            </summary>
        </member>
        <member name="T:FlaxEngine.Streaming">
            <summary>
            The content streaming service.
            </summary>
        </member>
        <member name="P:FlaxEngine.Streaming.TextureGroups">
            <summary>
            Textures streaming configuration (per-group).
            </summary>
        </member>
        <member name="P:FlaxEngine.Streaming.Stats">
            <summary>
            Gets streaming statistics.
            </summary>
        </member>
        <member name="M:FlaxEngine.Streaming.RequestStreamingUpdate">
            <summary>
            Requests the streaming update for all the loaded resources. Use it to refresh content streaming after changing configuration.
            </summary>
        </member>
        <member name="M:FlaxEngine.Streaming.GetTextureGroupSampler(System.Int32)">
            <summary>
            Gets the texture sampler for a given texture group. Sampler objects is managed and cached by streaming service. Returned value is always valid (uses fallback object).
            </summary>
            <param name="index">The texture group index.</param>
            <returns>The texture sampler (always valid).</returns>
        </member>
        <member name="T:FlaxEngine.TextureGroup">
            <summary>
            Settings container for a group of textures. Defines the data streaming options and resource quality.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureGroup.Name">
            <summary>
            The name of the group.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureGroup.SamplerFilter">
            <summary>
            The default filtering method for samplers using this texture group.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureGroup.MaxAnisotropy">
            <summary>
            The maximum number of samples that can be used to improve the quality of sample footprints that are anisotropic. Higher values improve texturing but reduce performance. Limited by GPU capabilities and used only if SamplerFilter is Anisotropic.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureGroup.Quality">
            <summary>
            The quality scale factor applied to textures in this group. Can be used to increase or decrease textures resolution. In range 0-1 where 0 means lowest quality, 1 means full quality.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureGroup.QualityIfInvisible">
            <summary>
            The quality scale factor applied when texture is invisible for some time (defined by TimeToInvisible). Used to decrease texture quality when it's not rendered.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureGroup.TimeToInvisible">
            <summary>
            The time (in seconds) after which texture is considered to be invisible (if it's not rendered by a certain amount of time).
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureGroup.MipLevelsMin">
            <summary>
            The minimum amount of loaded mip levels for textures in this group. Defines the amount of the mips that should be always loaded. Higher values decrease streaming usage and keep more mips loaded.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureGroup.MipLevelsMax">
            <summary>
            The maximum amount of loaded mip levels for textures in this group. Defines the maximum amount of the mips that can be loaded. Overriden per-platform. Lower values reduce textures quality and improve performance.
            </summary>
        </member>
        <member name="F:FlaxEngine.TextureGroup.MipLevelsBias">
            <summary>
            The loaded mip levels bias for textures in this group. Can be used to increase or decrease quality of the streaming for textures in this group (eg. bump up the quality during cinematic sequence).
            </summary>
        </member>
        <member name="T:FlaxEngine.Terrain">
            <summary>
            Represents a single terrain object.
            </summary>
            <seealso cref="T:FlaxEngine.Actor" />
            <seealso cref="T:FlaxEngine.PhysicsColliderActor" />
        </member>
        <member name="M:FlaxEngine.Terrain.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Terrain"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.Material">
            <summary>
            The default material used for terrain rendering (chunks can override this).
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.PhysicalMaterial">
            <summary>
            The physical material used to define the terrain collider physical properties.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.DrawModes">
            <summary>
            The draw passes to use for rendering this object.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.LODBias">
            <summary>
            Gets or sets the terrain Level Of Detail bias value. Allows to increase or decrease rendered terrain quality.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.ForcedLOD">
            <summary>
            Gets or sets the terrain forced Level Of Detail index. Allows to bind the given chunks LOD to show. Value -1 disables this feature.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.LODDistribution">
            <summary>
            Gets or sets the terrain LODs distribution parameter. Adjusts terrain chunks transitions distances. Use lower value to increase terrain quality or higher value to increase performance. Default value is 0.75.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.ScaleInLightmap">
            <summary>
            Gets or sets the terrain scale in lightmap (applied to all the chunks). Use value higher than 1 to increase baked lighting resolution.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.BoundsExtent">
            <summary>
            Gets or sets the terrain chunks bounds extent. Values used to expand terrain chunks bounding boxes. Use it when your terrain material is performing vertex offset operations on a GPU.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.CollisionLOD">
            <summary>
            Gets or sets the terrain geometry LOD index used for collision.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.LODCount">
            <summary>
            Gets the terrain Level Of Detail count.
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.ChunkSize">
            <summary>
            Gets the terrain chunk vertices amount per edge (square).
            </summary>
        </member>
        <member name="P:FlaxEngine.Terrain.PatchesCount">
            <summary>
            Gets the terrain patches count. Each patch contains 16 chunks arranged into a 4x4 square.
            </summary>
        </member>
        <member name="M:FlaxEngine.Terrain.HasPatch(FlaxEngine.Int2@)">
            <summary>
            Checks if terrain has the patch at the given coordinates.
            </summary>
            <param name="patchCoord">The patch location (x and z).</param>
            <returns>True if has patch added, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.GetPatchIndex(FlaxEngine.Int2@)">
            <summary>
            Gets the zero-based index of the terrain patch in the terrain patches collection.
            </summary>
            <param name="patchCoord">The patch location (x and z).</param>
            <returns>The zero-based index of the terrain patch in the terrain patches collection. Returns -1 if patch coordinates are invalid.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.GetPatchCoord(System.Int32,FlaxEngine.Int2@)">
            <summary>
            Gets the terrain patch coordinates (x and z) at the given index.
            </summary>
            <param name="patchIndex">The zero-based index of the terrain patch in the terrain patches collection.</param>
            <param name="patchCoord">The patch location (x and z).</param>
        </member>
        <member name="M:FlaxEngine.Terrain.GetPatchBounds(System.Int32,FlaxEngine.BoundingBox@)">
            <summary>
            Gets the terrain patch world bounds at the given index.
            </summary>
            <param name="patchIndex">The zero-based index of the terrain patch in the terrain patches collection.</param>
            <param name="bounds">The patch world bounds.</param>
        </member>
        <member name="M:FlaxEngine.Terrain.GetChunkBounds(System.Int32,System.Int32,FlaxEngine.BoundingBox@)">
            <summary>
            Gets the terrain chunk world bounds at the given index.
            </summary>
            <param name="patchIndex">The zero-based index of the terrain patch in the terrain patches collection.</param>
            <param name="chunkIndex">The zero-based index of the terrain chunk in the terrain patch chunks collection (in range 0-15).</param>
            <param name="bounds">The chunk world bounds.</param>
        </member>
        <member name="M:FlaxEngine.Terrain.GetChunkOverrideMaterial(FlaxEngine.Int2@,FlaxEngine.Int2@)">
            <summary>
            Gets the chunk material that overrides the terrain default one.
            </summary>
            <param name="patchCoord">The patch coordinates (x and z).</param>
            <param name="chunkCoord">The chunk coordinates (x and z).</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.SetChunkOverrideMaterial(FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.MaterialBase)">
            <summary>
            Sets the chunk material to override the terrain default one.
            </summary>
            <param name="patchCoord">The patch coordinates (x and z).</param>
            <param name="chunkCoord">The chunk coordinates (x and z).</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:FlaxEngine.Terrain.SetupPatchHeightMap(FlaxEngine.Int2@,System.Int32,System.Single*,System.Byte*,System.Boolean)">
            <summary>
            Setups the terrain patch using the specified heightmap data.
            </summary>
            <param name="patchCoord">The patch coordinates (x and z).</param>
            <param name="heightMapLength">The height map array length. It must match the terrain descriptor, so it should be (chunkSize*4+1)^2. Patch is a 4 by 4 square made of chunks. Each chunk has chunkSize quads on edge.</param>
            <param name="heightMap">The height map. Each array item contains a height value.</param>
            <param name="holesMask">The holes mask (optional). Normalized to 0-1 range values with holes mask per-vertex. Must match the heightmap dimensions.</param>
            <param name="forceUseVirtualStorage">If set to <c>true</c> patch will use virtual storage by force. Otherwise it can use normal texture asset storage on drive (valid only during Editor). Runtime-created terrain can only use virtual storage (in RAM).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.SetupPatchSplatMap(FlaxEngine.Int2@,System.Int32,System.Int32,FlaxEngine.Color32*,System.Boolean)">
            <summary>
            Setups the terrain patch layer weights using the specified splatmaps data.
            </summary>
            <param name="patchCoord">The patch coordinates (x and z).</param>
            <param name="index">The zero-based index of the splatmap texture.</param>
            <param name="splatMapLength">The splatmap map array length. It must match the terrain descriptor, so it should be (chunkSize*4+1)^2. Patch is a 4 by 4 square made of chunks. Each chunk has chunkSize quads on edge.</param>
            <param name="splatMap">The splat map. Each array item contains 4 layer weights.</param>
            <param name="forceUseVirtualStorage">If set to <c>true</c> patch will use virtual storage by force. Otherwise it can use normal texture asset storage on drive (valid only during Editor). Runtime-created terrain can only use virtual storage (in RAM).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.Setup(System.Int32,System.Int32)">
            <summary>
            Setups the terrain. Clears the existing data.
            </summary>
            <param name="lodCount">The LODs count. The actual amount of LODs may be lower due to provided chunk size (each LOD has 4 times less quads).</param>
            <param name="chunkSize">The size of the chunk (amount of quads per edge for the highest LOD). Must be power of two minus one (eg. 63 or 127).</param>
        </member>
        <member name="M:FlaxEngine.Terrain.AddPatches(FlaxEngine.Int2@)">
            <summary>
            Adds the patches to the terrain (clears existing ones).
            </summary>
            <param name="numberOfPatches">The number of patches (x and z axis).</param>
        </member>
        <member name="M:FlaxEngine.Terrain.AddPatch(FlaxEngine.Int2@)">
            <summary>
            Adds the patch.
            </summary>
            <param name="patchCoord">The patch location (x and z).</param>
        </member>
        <member name="M:FlaxEngine.Terrain.RemovePatch(FlaxEngine.Int2@)">
            <summary>
            Removes the patch.
            </summary>
            <param name="patchCoord">The patch location (x and z).</param>
        </member>
        <member name="M:FlaxEngine.Terrain.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single,System.Single)">
            <summary>
            Performs a raycast against this terrain collision shape.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="resultHitDistance">The raycast result hit position distance from the ray origin. Valid only if raycast hits anything.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <returns>True if ray hits an object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.RayCast(FlaxEngine.Ray,System.Single@,FlaxEngine.Int2@,FlaxEngine.Int2@,System.Single)">
            <summary>
            Performs a raycast against this terrain collision shape. Returns the hit chunk.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="resultHitDistance">The raycast result hit position distance from the ray origin. Valid only if raycast hits anything.</param>
            <param name="resultPatchCoord">The raycast result hit terrain patch coordinates (x and z). Valid only if raycast hits anything.</param>
            <param name="resultChunkCoord">The raycast result hit terrain chunk coordinates (relative to the patch, x and z). Valid only if raycast hits anything.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <returns>True if ray hits an object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.RayCast(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.RayCastHit@,System.Single)">
            <summary>
            Performs a raycast against terrain collision, returns results in a RayCastHit structure.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
            <param name="hitInfo">The result hit information. Valid only when method returns true.</param>
            <param name="maxDistance">The maximum distance the ray should check for collisions.</param>
            <returns>True if ray hits an object, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.ClosestPoint(FlaxEngine.Vector3,FlaxEngine.Vector3@)">
            <summary>
            Gets a point on the terrain collider that is closest to a given location. Can be used to find a hit location or position to apply explosion force or any other special effects.
            </summary>
            <param name="position">The position to find the closest point to it.</param>
            <param name="result">The result point on the collider that is closest to the specified location.</param>
        </member>
        <member name="M:FlaxEngine.Terrain.DrawPatch(FlaxEngine.RenderContext@,FlaxEngine.Int2@,FlaxEngine.MaterialBase,System.Int32)">
            <summary>
            Draws the terrain patch.
            </summary>
            <param name="renderContext">The rendering context.</param>
            <param name="patchCoord">The patch location (x and z).</param>
            <param name="material">The material to use for rendering.</param>
            <param name="lodIndex">The LOD index.</param>
        </member>
        <member name="M:FlaxEngine.Terrain.DrawChunk(FlaxEngine.RenderContext@,FlaxEngine.Int2@,FlaxEngine.Int2@,FlaxEngine.MaterialBase,System.Int32)">
            <summary>
            Draws the terrain chunk.
            </summary>
            <param name="renderContext">The rendering context.</param>
            <param name="patchCoord">The patch location (x and z).</param>
            <param name="chunkCoord">The chunk location (x and z).</param>
            <param name="material">The material to use for rendering.</param>
            <param name="lodIndex">The LOD index.</param>
        </member>
        <member name="F:FlaxEngine.Terrain.UnitsPerVertex">
            <summary>
            The constant amount of units per terrain geometry vertex (can be adjusted per terrain instance using non-uniform scale factor).
            </summary>
        </member>
        <member name="F:FlaxEngine.Terrain.MaxLODs">
            <summary>
            The maximum amount of levels of detail for the terrain chunks.
            </summary>
        </member>
        <member name="F:FlaxEngine.Terrain.PatchChunksCount">
            <summary>
            The constant amount of terrain chunks per terrain patch object.
            </summary>
        </member>
        <member name="F:FlaxEngine.Terrain.PatchEdgeChunksCount">
            <summary>
            The constant amount of terrain chunks on terrain patch object edge.
            </summary>
        </member>
        <member name="F:FlaxEngine.Terrain.MaxSplatmapsCount">
            <summary>
            The terrain splatmaps amount limit. Each splatmap can hold up to 4 layer weights.
            </summary>
        </member>
        <member name="M:FlaxEngine.Terrain.SetupPatchHeightMap(FlaxEngine.Int2@,System.Single[],System.Byte[],System.Boolean)">
            <summary>
            Setups the terrain patch using the specified heightmap data.
            </summary>
            <param name="patchCoord">The patch location (x and z coordinates).</param>
            <param name="heightMap">The height map. Each array item contains a height value (2D inlined array). It should has size equal (chunkSize*4+1)^2.</param>
            <param name="holesMask">The holes mask (optional). Normalized to 0-1 range values with holes mask per-vertex. Must match the heightmap dimensions.</param>
            <param name="forceUseVirtualStorage">If set to <c>true</c> patch will use virtual storage by force. Otherwise it can use normal texture asset storage on drive (valid only during Editor). Runtime-created terrain can only use virtual storage (in RAM).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Terrain.SetupPatchSplatMap(FlaxEngine.Int2@,System.Int32,FlaxEngine.Color32[],System.Boolean)">
            <summary>
            Setups the terrain patch using the specified heightmap data.
            </summary>
            <param name="patchCoord">The patch location (x and z coordinates).</param>
            <param name="index">The zero-based index of the splatmap texture.</param>
            <param name="splatMap">The splat map. Each array item contains 4 layer weights. It must match the terrain descriptor, so it should be (chunkSize*4+1)^2. Patch is a 4 by 4 square made of chunks. Each chunk has chunkSize quads on edge.</param>
            <param name="forceUseVirtualStorage">If set to <c>true</c> patch will use virtual storage by force. Otherwise it can use normal texture asset storage on drive (valid only during Editor). Runtime-created terrain can only use virtual storage (in RAM).</param>
            <returns>True if failed, otherwise false.</returns>
        </member>
        <member name="T:FlaxEngine.JobSystem">
            <summary>
            Lightweight multi-threaded jobs execution scheduler. Uses a pool of threads and supports work-stealing concept.
            </summary>
        </member>
        <member name="M:FlaxEngine.JobSystem.Dispatch(System.Action{System.Int32},System.Int32)">
            <summary>
            Dispatches the job for the execution.
            </summary>
            <param name="job">The job. Argument is an index of the job execution.</param>
            <param name="jobCount">The job executions count.</param>
            <returns>The label identifying this dispatch. Can be used to wait for the execution end.</returns>
        </member>
        <member name="M:FlaxEngine.JobSystem.Wait">
            <summary>
            Waits for all dispatched jobs to finish.
            </summary>
        </member>
        <member name="M:FlaxEngine.JobSystem.Wait(System.Int64)">
            <summary>
            Waits for all dispatched jobs until a given label to finish (i.e. waits for a Dispatch that returned that label).
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="M:FlaxEngine.JobSystem.SetJobStartingOnDispatch(System.Boolean)">
            <summary>
            Sets whether automatically start jobs execution on Dispatch. If disabled jobs won't be executed until it gets re-enabled. Can be used to optimize execution of multiple dispatches that should overlap.
            </summary>
        </member>
        <member name="T:FlaxEngine.TaskGraphSystem">
            <summary>
            System that can generate work into Task Graph for asynchronous execution.
            </summary>
        </member>
        <member name="M:FlaxEngine.TaskGraphSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.TaskGraphSystem"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.TaskGraphSystem.Order">
            <summary>
            The execution order of the system (systems with higher order are executed later, lower first).
            </summary>
        </member>
        <member name="M:FlaxEngine.TaskGraphSystem.AddDependency(FlaxEngine.TaskGraphSystem)">
            <summary>
            Adds the dependency on the system execution. Before this system can be executed the given dependant system has to be executed first.
            </summary>
            <param name="system">The system to depend on.</param>
        </member>
        <member name="M:FlaxEngine.TaskGraphSystem.PreExecute(FlaxEngine.TaskGraph)">
            <summary>
            Called before executing any systems of the graph. Can be used to initialize data (synchronous).
            </summary>
            <param name="graph">The graph executing the system.</param>
        </member>
        <member name="M:FlaxEngine.TaskGraphSystem.Execute(FlaxEngine.TaskGraph)">
            <summary>
            Executes the system logic and schedules the asynchronous work.
            </summary>
            <param name="graph">The graph executing the system.</param>
        </member>
        <member name="M:FlaxEngine.TaskGraphSystem.PostExecute(FlaxEngine.TaskGraph)">
            <summary>
            Called after executing all systems of the graph. Can be used to cleanup data (synchronous).
            </summary>
            <param name="graph">The graph executing the system.</param>
        </member>
        <member name="T:FlaxEngine.TaskGraph">
            <summary>
            Graph-based asynchronous tasks scheduler for high-performance computing and processing.
            </summary>
        </member>
        <member name="M:FlaxEngine.TaskGraph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.TaskGraph"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.TaskGraph.Systems">
            <summary>
            Gets the list of systems.
            </summary>
        </member>
        <member name="M:FlaxEngine.TaskGraph.AddSystem(FlaxEngine.TaskGraphSystem)">
            <summary>
            Adds the system to the graph for the execution.
            </summary>
            <param name="system">The system to add.</param>
        </member>
        <member name="M:FlaxEngine.TaskGraph.RemoveSystem(FlaxEngine.TaskGraphSystem)">
            <summary>
            Removes the system from the graph.
            </summary>
            <param name="system">The system to add.</param>
        </member>
        <member name="M:FlaxEngine.TaskGraph.Execute">
            <summary>
            Schedules the asynchronous systems execution including ordering and dependencies handling.
            </summary>
        </member>
        <member name="M:FlaxEngine.TaskGraph.DispatchJob(System.Action{System.Int32},System.Int32)">
            <summary>
            Dispatches the job for the execution.
            </summary>
            <remarks>Call only from system's Execute method to properly schedule job.</remarks>
            <param name="job">The job. Argument is an index of the job execution.</param>
            <param name="jobCount">The job executions count.</param>
        </member>
        <member name="T:FlaxEngine.SpriteRender">
            <summary>
            Sprite rendering object.
            </summary>
        </member>
        <member name="M:FlaxEngine.SpriteRender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SpriteRender"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpriteRender.Image">
            <summary>
            The sprite texture to draw.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpriteRender.Material">
            <summary>
            The material used for the sprite rendering. It should contain texture parameter named Image and color parameter named Color. For showing sprites from sprite atlas ensure to add Vector4 param ImageMAD for UVs transformation.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpriteRender.FaceCamera">
            <summary>
            If checked, the sprite will automatically face the view camera, otherwise it will be oriented as an actor.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpriteRender.DrawModes">
            <summary>
            The draw passes to use for rendering this object. Uncheck `Depth` to disable sprite casting shadows.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpriteRender.Size">
            <summary>
            Gets or sets the size of the sprite.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpriteRender.Color">
            <summary>
            Gets or sets the color of the sprite. Passed to the sprite material in parameter named `Color`.
            </summary>
        </member>
        <member name="P:FlaxEngine.SpriteRender.Sprite">
            <summary>
            Gets or sets the sprite to draw. Used only if Image is unset.
            </summary>
        </member>
        <member name="T:FlaxEngine.TextRender">
            <summary>
            Text rendering object.
            </summary>
        </member>
        <member name="M:FlaxEngine.TextRender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.TextRender"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.Material">
            <summary>
            The material used for the text rendering. It must contain texture parameter named Font used to sample font texture.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.Font">
            <summary>
            The font asset used as a text characters source.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.DrawModes">
            <summary>
            The draw passes to use for rendering this object.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.ShadowsMode">
            <summary>
            The shadows casting mode by this visual element.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.Color">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.FontSize">
            <summary>
            Gets or sets the font characters size.
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.LayoutOptions">
            <summary>
            Gets or sets the layout options. Layout is defined in local space of the object (on XY plane).
            </summary>
        </member>
        <member name="P:FlaxEngine.TextRender.LocalBox">
            <summary>
            Gets the axis=aligned bounding box of the text vertices in the local-space of the actor.
            </summary>
        </member>
        <member name="M:FlaxEngine.TextRender.UpdateLayout">
            <summary>
            Updates the text vertex buffer layout and cached data if its dirty.
            </summary>
        </member>
        <member name="T:FlaxEngine.UICanvas">
            <summary>
            Root of the UI structure. Renders GUI and handles input events forwarding.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.RenderMode">
            <summary>
            Gets or sets the canvas rendering mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.RenderLocation">
            <summary>
            Gets or sets the canvas rendering location within rendering pipeline. Used only in <see cref="F:FlaxEngine.CanvasRenderMode.CameraSpace"/> or <see cref="F:FlaxEngine.CanvasRenderMode.WorldSpace"/> or <see cref="F:FlaxEngine.CanvasRenderMode.WorldSpaceFaceCamera"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.Order">
            <summary>
            Gets or sets the canvas rendering and input events gather order. Created GUI canvas objects are sorted before rendering (from the lowest order to the highest order). Canvas with the highest order can handle input event first.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.ReceivesEvents">
            <summary>
            Gets or sets a value indicating whether canvas can receive the input events.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.Size">
            <summary>
            Gets or sets the size of the canvas. Used only in <see cref="F:FlaxEngine.CanvasRenderMode.WorldSpace"/> or <see cref="F:FlaxEngine.CanvasRenderMode.WorldSpaceFaceCamera"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.IgnoreDepth">
            <summary>
            Gets or sets a value indicating whether ignore scene depth when rendering the GUI (scene objects won't cover the interface).
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.RenderCamera">
            <summary>
            Gets or sets the camera used to place the GUI when render mode is set to <see cref="F:FlaxEngine.CanvasRenderMode.CameraSpace"/> or <see cref="F:FlaxEngine.CanvasRenderMode.WorldSpaceFaceCamera"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.Distance">
            <summary>
            Gets or sets the distance from the <see cref="P:FlaxEngine.UICanvas.RenderCamera"/> to place the plane with GUI. If the screen is resized, changes resolution, or the camera frustum changes, the Canvas will automatically change size to match as well.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.GUI">
            <summary>
            Gets the canvas GUI root control.
            </summary>
        </member>
        <member name="T:FlaxEngine.UICanvas.TestCanvasIntersectionDelegate">
            <summary>
            Delegate schema for the callback used to perform custom canvas intersection test. Can be used to implement a canvas that has a holes or non-rectangular shape.
            </summary>
            <param name="location">The location of the point to test in coordinates of the canvas root control (see <see cref="P:FlaxEngine.UICanvas.GUI"/>).</param>
            <returns>True if canvas was hit, otherwise false.</returns>
        </member>
        <member name="F:FlaxEngine.UICanvas.TestCanvasIntersection">
            <summary>
            The callback used to perform custom canvas intersection test. Can be used to implement a canvas that has a holes or non-rectangular shape.
            </summary>
        </member>
        <member name="T:FlaxEngine.UICanvas.CalculateRayDelegate">
            <summary>
            Delegate schema for callback used to evaluate the world-space ray from the screen-space position (eg. project mouse position).
            </summary>
            <param name="location">The location in screen-space.</param>
            <param name="ray">The output ray in world-space.</param>
        </member>
        <member name="F:FlaxEngine.UICanvas.CalculateRay">
            <summary>
            The current implementation of the <see cref="T:FlaxEngine.UICanvas.CalculateRayDelegate"/> used to calculate the mouse ray in 3D from the 2D location. Cannot be null.
            </summary>
        </member>
        <member name="M:FlaxEngine.UICanvas.DefaultCalculateRay(FlaxEngine.Vector2@,FlaxEngine.Ray@)">
            <summary>
            The default implementation of the <see cref="T:FlaxEngine.UICanvas.CalculateRayDelegate"/> that uses the <see cref="P:FlaxEngine.Camera.MainCamera"/> to evaluate the 3D ray.
            </summary>
            <param name="location">The location in screen-space.</param>
            <param name="ray">The output ray in world-space.</param>
        </member>
        <member name="P:FlaxEngine.UICanvas.NavigationInputRepeatDelay">
            <summary>
            The delay (in seconds) before a navigation input event starts repeating if input control is held down (Input Action mode is set to Pressing).
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.NavigationInputRepeatRate">
            <summary>
            The delay (in seconds) between successive repeated navigation input events after the first one.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.NavigationInputActionUp">
            <summary>
            The name of the input action for performing UI navigation Up (from Input Settings).
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.NavigationInputActionDown">
            <summary>
            The name of the input action for performing UI navigation Down (from Input Settings).
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.NavigationInputActionLeft">
            <summary>
            The name of the input action for performing UI navigation Left (from Input Settings).
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.NavigationInputActionRight">
            <summary>
            The name of the input action for performing UI navigation Right (from Input Settings).
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.NavigationInputActionSubmit">
            <summary>
            The name of the input action for performing UI navigation Submit (from Input Settings).
            </summary>
        </member>
        <member name="M:FlaxEngine.UICanvas.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.UICanvas"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.UICanvas.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:FlaxEngine.UICanvas"/> class.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.Bounds">
            <summary>
            Gets the world-space oriented bounding box that contains a 3D canvas.
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.Is2D">
            <summary>
            Gets a value indicating whether canvas is 2D (screen-space).
            </summary>
        </member>
        <member name="P:FlaxEngine.UICanvas.Is3D">
            <summary>
            Gets a value indicating whether canvas is 3D (world-space or camera-space).
            </summary>
        </member>
        <member name="M:FlaxEngine.UICanvas.GetWorldMatrix(FlaxEngine.Matrix@)">
            <summary>
            Gets the world matrix used to transform the GUI from the local space to the world space. Handles canvas rendering mode
            </summary>
            <param name="world">The world.</param>
        </member>
        <member name="T:FlaxEngine.UIControl">
            <summary>
            Contains a single GUI control (on C# side).
            </summary>
        </member>
        <member name="M:FlaxEngine.UIControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.UIControl"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.UIControl.Control">
            <summary>
            Gets or sets the GUI control used by this actor.
            </summary>
            <remarks>
            When changing the control, the previous one is disposed. Use <see cref="M:FlaxEngine.UIControl.UnlinkControl"/> to manage it on your own.
            </remarks>
        </member>
        <member name="P:FlaxEngine.UIControl.HasControl">
            <summary>
            Gets a value indicating whether this actor has control.
            </summary>
        </member>
        <member name="P:FlaxEngine.UIControl.Bounds">
            <summary>
            Gets the world-space oriented bounding box that contains a 3D control.
            </summary>
        </member>
        <member name="M:FlaxEngine.UIControl.Get``1">
            <summary>
            Gets the control object cased to the given type.
            </summary>
            <typeparam name="T">The type of the control.</typeparam>
            <returns>The control object.</returns>
        </member>
        <member name="M:FlaxEngine.UIControl.Is``1">
            <summary>
            Checks if the control object is of the given type.
            </summary>
            <typeparam name="T">The type of the control.</typeparam>
            <returns>True if control object is of the given type.</returns>
        </member>
        <member name="M:FlaxEngine.UIControl.AddChildControl``1">
            <summary>
            Creates a new UIControl with the control of the given type and links it to this control as a child.
            </summary>
            <remarks>
            The current actor has to have a valid container control.
            </remarks>
            <typeparam name="T">Type of the child control to add.</typeparam>
            <returns>The created UIControl that contains a new control of the given type.</returns>
        </member>
        <member name="M:FlaxEngine.UIControl.UnlinkControl">
            <summary>
            Unlinks the control from the actor without disposing it or modifying.
            </summary>
        </member>
        <member name="P:FlaxEngine.UIControl.NavTargetUp">
            <summary>
            The explicitly specified target navigation control for <see cref="F:FlaxEngine.GUI.NavDirection.Up"/> direction.
            </summary>
        </member>
        <member name="P:FlaxEngine.UIControl.NavTargetDown">
            <summary>
            The explicitly specified target navigation control for <see cref="F:FlaxEngine.GUI.NavDirection.Down"/> direction.
            </summary>
        </member>
        <member name="P:FlaxEngine.UIControl.NavTargetLeft">
            <summary>
            The explicitly specified target navigation control for <see cref="F:FlaxEngine.GUI.NavDirection.Left"/> direction.
            </summary>
        </member>
        <member name="P:FlaxEngine.UIControl.NavTargetRight">
            <summary>
            The explicitly specified target navigation control for <see cref="F:FlaxEngine.GUI.NavDirection.Right"/> direction.
            </summary>
        </member>
        <member name="F:FlaxEngine.UIControl.FallbackParentGetDelegate">
            <summary>
            The fallback callback used to handle <see cref="T:FlaxEngine.UIControl"/> parent container control to link when it fails to find the default parent. Can be used to link the controls into a custom control.
            </summary>
        </member>
        <member name="T:FlaxEngine.Screenshot">
            <summary>
            The utility class for capturing game screenshots.
            </summary>
        </member>
        <member name="M:FlaxEngine.Screenshot.Capture(FlaxEngine.GPUTexture,System.String)">
            <summary>
            Captures the specified render target contents and saves it to the file.
            Remember that downloading data from the GPU may take a while so screenshot may be taken one or more frames later due to latency.
            Staging textures are saved immediately.
            </summary>
            <param name="target">The target render target to capture it's contents.</param>
            <param name="path">The custom file location. Use null or empty to use default one.</param>
        </member>
        <member name="M:FlaxEngine.Screenshot.Capture(FlaxEngine.SceneRenderTask,System.String)">
            <summary>
            Captures the specified render task backbuffer contents and saves it to the file.
            Remember that downloading data from the GPU may take a while so screenshot may be taken one or more frames later due to latency.
            </summary>
            <param name="target">The target task to capture it's backbuffer.</param>
            <param name="path">The custom file location. Use null or empty to use default one.</param>
        </member>
        <member name="M:FlaxEngine.Screenshot.Capture(System.String)">
            <summary>
            Captures the main render task backbuffer contents and saves it to the file.
            Remember that downloading data from the GPU may take a while so screenshot may be taken one or more frames later due to latency.
            </summary>
            <param name="path">The custom file location. Use null or empty to use default one.</param>
        </member>
        <member name="T:FlaxEngine.ChannelMask">
            <summary>
            The channel mask modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.ChannelMask.Red">
            <summary>
            The red channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.ChannelMask.Green">
            <summary>
            The green channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.ChannelMask.Blue">
            <summary>
            The blue channel.
            </summary>
        </member>
        <member name="F:FlaxEngine.ChannelMask.Alpha">
            <summary>
            The alpha channel.
            </summary>
        </member>
        <member name="T:FlaxEngine.GraphParameter">
            <summary>
            Represents a parameter in the Graph.
            </summary>
        </member>
        <member name="M:FlaxEngine.GraphParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GraphParameter"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GraphParameter.Type">
            <summary>
            Parameter type
            </summary>
        </member>
        <member name="P:FlaxEngine.GraphParameter.Identifier">
            <summary>
            Parameter unique ID
            </summary>
        </member>
        <member name="P:FlaxEngine.GraphParameter.Name">
            <summary>
            Parameter name
            </summary>
        </member>
        <member name="P:FlaxEngine.GraphParameter.Value">
            <summary>
            Parameter value
            </summary>
        </member>
        <member name="P:FlaxEngine.GraphParameter.IsPublic">
            <summary>
            True if is exposed outside
            </summary>
        </member>
        <member name="P:FlaxEngine.GraphParameter.TypeTypeName">
            <summary>
            Gets the typename of the parameter type (excluding in-build types).
            </summary>
        </member>
        <member name="M:FlaxEngine.GraphParameter.GetMetaData(System.Int32)">
            <summary>
            Gets the data of the Visject Meta entry assigned to this parameter.
            </summary>
            <param name="typeID">Entry type ID</param>
            <returns>The entry data or empty if missing or not loaded.</returns>
        </member>
        <member name="T:FlaxEngine.VisjectGraphParameter">
            <summary>
            Visject graph parameter.
            </summary>
            <seealso cref="T:FlaxEngine.GraphParameter" />
        </member>
        <member name="M:FlaxEngine.VisjectGraphParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.VisjectGraphParameter"/>.
            </summary>
        </member>
        <member name="T:FlaxEngine.CurveBase`1">
            <summary>
            An animation spline represented by a set of keyframes, each representing an endpoint of an curve.
            </summary>
            <typeparam name="T">The animated value type.</typeparam>
        </member>
        <member name="T:FlaxEngine.CurveBase`1.IKeyframeAccess`1">
            <summary>
            The keyframes data access interface.
            </summary>
            <typeparam name="U">The type of the keyframe data.</typeparam>
        </member>
        <member name="M:FlaxEngine.CurveBase`1.IKeyframeAccess`1.GetTangent(`1@,`1@,System.Single,`1@)">
            <summary>
            Gets the Bezier curve tangent.
            </summary>
            <param name="value">The value.</param>
            <param name="tangent">The tangent.</param>
            <param name="lengthThird">The length divided by 3.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.CurveBase`1.IKeyframeAccess`1.Linear(`1@,`1@,System.Single,`1@)">
            <summary>
            Calculates the linear interpolation at the specified alpha.
            </summary>
            <param name="a">The start value (alpha=0).</param>
            <param name="b">The end value (alpha=1).</param>
            <param name="alpha">The alpha.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.CurveBase`1.IKeyframeAccess`1.Bezier(`1@,`1@,`1@,`1@,System.Single,`1@)">
            <summary>
            Calculates the Bezier curve value at the specified alpha.
            </summary>
            <param name="p0">The p0.</param>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="alpha">The alpha.</param>
            <param name="result">The result.</param>
        </member>
        <member name="F:FlaxEngine.CurveBase`1._accessor">
            <summary>
            The keyframes data accessor.
            </summary>
        </member>
        <member name="M:FlaxEngine.CurveBase`1.Evaluate(`0@,System.Single,System.Boolean)">
            <summary>
            Evaluates the animation curve value at the specified time.
            </summary>
            <param name="result">The interpolated value from the curve at provided time.</param>
            <param name="time">The time to evaluate the curve at.</param>
            <param name="loop">If true the curve will loop when it goes past the end or beginning. Otherwise the curve value will be clamped.</param>
        </member>
        <member name="M:FlaxEngine.CurveBase`1.Trim(System.Single,System.Single)">
            <summary>
            Trims the curve keyframes to the specified time range.
            </summary>
            <param name="start">The time start.</param>
            <param name="end">The time end.</param>
        </member>
        <member name="M:FlaxEngine.CurveBase`1.TransformTime(System.Single,System.Single)">
            <summary>
            Applies the linear transformation (scale and offset) to the keyframes time values.
            </summary>
            <param name="timeScale">The time scale.</param>
            <param name="timeOffset">The time offset.</param>
        </member>
        <member name="M:FlaxEngine.CurveBase`1.FindKeys(System.Single,System.Int32@,System.Int32@)">
            <summary>
            Returns a pair of keys that can be used for interpolating to field the value at the provided time.
            </summary>
            <param name="time">The time for which to find the relevant keys from. It is expected to be clamped to a valid range within the curve.</param>
            <param name="leftKey">The index of the key to interpolate from.</param>
            <param name="rightKey">The index of the key to interpolate to.</param>
        </member>
        <member name="M:FlaxEngine.CurveBase`1.WrapTime(System.Single@,System.Single,System.Single,System.Boolean)">
            <summary>
            Wraps the time for the curve sampling with looping mode.
            </summary>
            <param name="time">The time to wrap.</param>
            <param name="start">The start time.</param>
            <param name="end">The end time.</param>
            <param name="loop">If set to <c>true</c> loops the curve.</param>
        </member>
        <member name="T:FlaxEngine.LinearCurve`1">
            <summary>
            An animation spline represented by a set of keyframes, each representing an endpoint of a linear curve.
            </summary>
            <typeparam name="T">The animated value type.</typeparam>
        </member>
        <member name="T:FlaxEngine.LinearCurve`1.Keyframe">
            <summary>
            A single keyframe that can be injected into linear curve.
            </summary>
        </member>
        <member name="F:FlaxEngine.LinearCurve`1.Keyframe.Time">
            <summary>
            The time of the keyframe.
            </summary>
        </member>
        <member name="F:FlaxEngine.LinearCurve`1.Keyframe.Value">
            <summary>
            The value of the curve at keyframe.
            </summary>
        </member>
        <member name="M:FlaxEngine.LinearCurve`1.Keyframe.#ctor(System.Single,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.LinearCurve`1.Keyframe"/> struct.
            </summary>
            <param name="time">The time.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEngine.LinearCurve`1.Keyframe.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.LinearCurve`1.Keyframe.CompareTo(FlaxEngine.LinearCurve{`0}.Keyframe)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.LinearCurve`1.Keyframe.ToString">
            <inheritdoc />
        </member>
        <member name="F:FlaxEngine.LinearCurve`1.Keyframes">
            <summary>
            The keyframes collection. Can be directly modified but ensure to sort it after editing so keyframes are organized by ascending time value.
            </summary>
        </member>
        <member name="M:FlaxEngine.LinearCurve`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.LinearCurve`1"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.LinearCurve`1.#ctor(FlaxEngine.LinearCurve{`0}.Keyframe[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.LinearCurve`1"/> class.
            </summary>
            <param name="keyframes">The keyframes.</param>
        </member>
        <member name="M:FlaxEngine.LinearCurve`1.#ctor(System.Collections.Generic.IEnumerable{FlaxEngine.LinearCurve{`0}.Keyframe})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.LinearCurve`1"/> class.
            </summary>
            <param name="keyframes">The keyframes.</param>
        </member>
        <member name="M:FlaxEngine.LinearCurve`1.EvaluateKey(FlaxEngine.LinearCurve{`0}.Keyframe@,System.Single,System.Boolean)">
            <summary>
            Evaluates the animation curve key at the specified time.
            </summary>
            <param name="result">The interpolated key from the curve at provided time.</param>
            <param name="time">The time to evaluate the curve at.</param>
            <param name="loop">If true the curve will loop when it goes past the end or beginning. Otherwise the curve value will be clamped.</param>
        </member>
        <member name="M:FlaxEngine.LinearCurve`1.Evaluate(`0@,System.Single,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.LinearCurve`1.Trim(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.LinearCurve`1.TransformTime(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.LinearCurve`1.FindKeys(System.Single,System.Int32@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.BezierCurve`1">
            <summary>
            An animation spline represented by a set of keyframes, each representing an endpoint of a Bezier curve.
            </summary>
            <typeparam name="T">The animated value type.</typeparam>
        </member>
        <member name="T:FlaxEngine.BezierCurve`1.Keyframe">
            <summary>
            A single keyframe that can be injected into Bezier curve.
            </summary>
        </member>
        <member name="F:FlaxEngine.BezierCurve`1.Keyframe.Time">
            <summary>
            The time of the keyframe.
            </summary>
        </member>
        <member name="F:FlaxEngine.BezierCurve`1.Keyframe.Value">
            <summary>
            The value of the curve at keyframe.
            </summary>
        </member>
        <member name="F:FlaxEngine.BezierCurve`1.Keyframe.TangentIn">
            <summary>
            The input tangent (going from the previous key to this one) of the key.
            </summary>
        </member>
        <member name="F:FlaxEngine.BezierCurve`1.Keyframe.TangentOut">
            <summary>
            The output tangent (going from this key to next one) of the key.
            </summary>
        </member>
        <member name="M:FlaxEngine.BezierCurve`1.Keyframe.#ctor(System.Single,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.BezierCurve`1.Keyframe"/> struct.
            </summary>
            <param name="time">The time.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEngine.BezierCurve`1.Keyframe.#ctor(System.Single,`0,`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.BezierCurve`1.Keyframe"/> struct.
            </summary>
            <param name="time">The time.</param>
            <param name="value">The value.</param>
            <param name="tangentIn">The start tangent.</param>
            <param name="tangentOut">The end tangent.</param>
        </member>
        <member name="M:FlaxEngine.BezierCurve`1.Keyframe.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.BezierCurve`1.Keyframe.CompareTo(FlaxEngine.BezierCurve{`0}.Keyframe)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.BezierCurve`1.Keyframe.ToString">
            <inheritdoc />
        </member>
        <member name="F:FlaxEngine.BezierCurve`1.Keyframes">
            <summary>
            The keyframes collection. Can be directly modified but ensure to sort it after editing so keyframes are organized by ascending time value.
            </summary>
        </member>
        <member name="M:FlaxEngine.BezierCurve`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.BezierCurve`1"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.BezierCurve`1.#ctor(FlaxEngine.BezierCurve{`0}.Keyframe[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.BezierCurve`1"/> class.
            </summary>
            <param name="keyframes">The keyframes.</param>
        </member>
        <member name="M:FlaxEngine.BezierCurve`1.#ctor(System.Collections.Generic.IEnumerable{FlaxEngine.BezierCurve{`0}.Keyframe})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.BezierCurve`1"/> class.
            </summary>
            <param name="keyframes">The keyframes.</param>
        </member>
        <member name="M:FlaxEngine.BezierCurve`1.EvaluateKey(FlaxEngine.BezierCurve{`0}.Keyframe@,System.Single,System.Boolean)">
            <summary>
            Evaluates the animation curve key at the specified time.
            </summary>
            <param name="result">The interpolated key from the curve at provided time.</param>
            <param name="time">The time to evaluate the curve at.</param>
            <param name="loop">If true the curve will loop when it goes past the end or beginning. Otherwise the curve value will be clamped.</param>
        </member>
        <member name="M:FlaxEngine.BezierCurve`1.Evaluate(`0@,System.Single,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.BezierCurve`1.Trim(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.BezierCurve`1.TransformTime(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.BezierCurve`1.FindKeys(System.Single,System.Int32@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Collections.CircularBuffer`1">
            <summary>
            Creates new structure array like, with fast front and back insertion.
            <para>Every overflow of this buffer removes last item form other side of insertion</para>
            </summary>
            <remarks>This collection is NOT thread-safe.</remarks>
            <typeparam name="T">Type of items inserted into buffer</typeparam>
        </member>
        <member name="T:FlaxEngine.Collections.CircularBuffer`1.ItemAddedEventArgs">
            <summary>
            Arguments for new item added event
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.ItemAddedEventArgs.Index">
            <summary>
            Gets Index of new element in buffer
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.ItemAddedEventArgs.Item">
            <summary>
            Gets added item
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.ItemAddedEventArgs.#ctor(System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Collections.CircularBuffer`1.ItemAddedEventArgs"/> class.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="T:FlaxEngine.Collections.CircularBuffer`1.ItemRemovedEventArgs">
            <summary>
            Arguments for item removed event
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.ItemRemovedEventArgs.WasFrontItem">
            <summary>
            Gets if item removed was item from front of the buffer
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.ItemRemovedEventArgs.Item">
            <summary>
            Gets removed item
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.ItemRemovedEventArgs.#ctor(System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Collections.CircularBuffer`1.ItemRemovedEventArgs"/> class.
            </summary>
            <param name="wasFrontItem">if set to <c>true</c> [was front item].</param>
            <param name="item">The item.</param>
        </member>
        <member name="T:FlaxEngine.Collections.CircularBuffer`1.ItemOverflownEventArgs">
            <summary>
            Arguments for item being replaced because of buffer was overflown with data
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.ItemOverflownEventArgs.WasFrontItem">
            <summary>
            Gets if item removed was item from front of the buffer
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.ItemOverflownEventArgs.Item">
            <summary>
            Gets overflown item
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.ItemOverflownEventArgs.#ctor(System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Collections.CircularBuffer`1.ItemOverflownEventArgs"/> class.
            </summary>
            <param name="wasFrontItem">if set to <c>true</c> [was front item].</param>
            <param name="item">The item.</param>
        </member>
        <member name="E:FlaxEngine.Collections.CircularBuffer`1.OnItemRemoved">
            <summary>
            Executes an action when item is removed
            </summary>
        </member>
        <member name="T:FlaxEngine.Collections.CircularBuffer`1.ItemRemovedEventHandler">
            <see cref="T:FlaxEngine.Collections.CircularBuffer`1.ItemRemovedEventHandler" />
        </member>
        <member name="E:FlaxEngine.Collections.CircularBuffer`1.OnItemAdded">
            <summary>
            Executes an action when item is added
            </summary>
        </member>
        <member name="T:FlaxEngine.Collections.CircularBuffer`1.ItemAddedEventHandler">
            <see cref="T:FlaxEngine.Collections.CircularBuffer`1.ItemAddedEventHandler" />
        </member>
        <member name="E:FlaxEngine.Collections.CircularBuffer`1.OnItemOverflown">
            <summary>
            Executes an action when item is removed because of overflow in buffer
            </summary>
        </member>
        <member name="T:FlaxEngine.Collections.CircularBuffer`1.ItemOverflownEventHandler">
            <see cref="T:FlaxEngine.Collections.CircularBuffer`1.ItemOverflownEventHandler" />
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.Count">
            <summary>
            Amount of items currently in buffer
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.Capacity">
            <summary>
            Current capacity of internal buffer
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.IsEmpty">
            <summary>
            Returns true if there are no items in structure, or false if there are
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.IsFull">
            <summary>
            Returns true if buffer is filled with whole of its capacity with items
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)">
            <summary>
            Creates new instance of object with given capacity, copies given array as a framework
            </summary>
            <param name="buffer">Buffer to insert into</param>
            <param name="frontItem">First index of an item in provided buffer</param>
            <param name="backItem">Last index on an item in provided buffer</param>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.#ctor(System.Int32)">
            <summary>
            Creates new instance of object with given capacity
            </summary>
            <param name="capacity">Capacity of internal structure</param>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.#ctor(System.Int32,`0[],System.Int32)">
            <summary>
            Creates new instance of object with given capacity and adds array of items to internal buffer
            </summary>
            <param name="capacity">Capacity of internal structure</param>
            <param name="items">Items to input</param>
            <param name="arrayIndex">Index of items to input at in internal buffer</param>
        </member>
        <member name="P:FlaxEngine.Collections.CircularBuffer`1.Item(System.Int32)">
            <summary>
            Gets or sets item from list at given index.
            <remarks>All items are in order of input regardless of overflow that may occur</remarks>
            </summary>
            <param name="index">Index to item required</param>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.PushFront(`0)">
            <summary>
            Adds item to the front of the buffer
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.PushBack(`0)">
            <summary>
            Adds item to the back of the buffer
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.Front">
            <summary>
            Gets top first element form collection
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.Back">
            <summary>
            Gets bottom first element form collection
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.PopFront">
            <summary>
            Removes first item from the front of the buffer
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.PopBack">
            <summary>
            Removes first item from the back of the buffer
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.ToArray">
            <summary>
            Copies the buffer contents to an array, according to the logical
            contents of the buffer (i.e. independent of the internal
            order/contents)
            </summary>
            <returns>A new array with a copy of the buffer contents.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.CopyTo(`0[],System.Int32)">
            <summary>
            CopyTo copies a collection into an Array, starting at a particular index into the array.
            </summary>
            <returns>A new array with a copy of the buffer contents.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.Clear">
            <summary>
            Clears buffer and remains capacity
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.Clear(System.Int32)">
            <summary>
            Clears buffer and changes its capacity.
            </summary>
            <param name="newCapacity">The new capacity of the buffer.</param>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.DecreaseBackIndex">
            <summary>
            Decrease index of _backItem and warp it round if fall below 0
            <para>Move _frontItem back index if they've met</para>
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.DecreaseFrontIndex">
            <summary>
            Decrease index of _frontItem and warp it round if fall below 0
            <para>Move _backItem back index if they've met</para>
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.IncreaseBackIndex">
            <summary>
            Increases index of _backItem and warp it round if exceded capacity
            <para>Move _frontItem forward index if they've met</para>
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.CircularBuffer`1.IncreaseFrontIndex">
            <summary>
            Increases index of _frontItem and warp it round if exceded capacity
            <para>Move _backItem forward index if they've met</para>
            </summary>
        </member>
        <member name="T:FlaxEngine.Collections.IOrderedDictionary`2">
            <summary>
            Interface for a dictionary object that allows rapid hash lookups using keys, but also maintains the key insertion order so that values can be retrieved by key index.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="P:FlaxEngine.Collections.IOrderedDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:FlaxEngine.Collections.IOrderedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get or set.</param>
            <returns>The element with the specified key.</returns>
        </member>
        <member name="P:FlaxEngine.Collections.IOrderedDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.IOrderedDictionary`2.Keys">
            <summary>
            Gets the collection of the keys.
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.IOrderedDictionary`2.Values">
            <summary>
            Gets the collection of the values.
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the collection.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.IndexOf(`0)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="key">The object to locate in the current dictionary. The element to locate can be null for reference types.</param>
            <returns>The index of the item.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the dictionary contains the specified value.
            </summary>
            <param name="value">The value to check.</param>
            <returns><c>true</c> if the dictionary contains the specified value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.ContainsValue(`1,System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Determines whether the dictionary contains the specified value.
            </summary>
            <param name="value">The value to check.</param>
            <param name="comparer">The equality comparer.</param>
            <returns><c>true</c> if the dictionary contains the specified value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains the specified key.
            </summary>
            <param name="key">The key to check.</param>
            <returns><c>true</c> if the dictionary contains the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the collection.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns><see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="key" /> was not found in the original collection.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <returns><see langword="true" /> if the object that implements collection contains an element with the specified key; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.GetValue(`0)">
            <summary>
            Gets the value by the key.
            </summary>
            <param name="key">The key.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.SetValue(`0,`1)">
            <summary>
            Sets the 0 by the key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.GetItem(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The key-value pair.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.IOrderedDictionary`2.SetItem(System.Int32,`1)">
            <summary>
            Sets the value.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:FlaxEngine.Collections.OrderedDictionary`2">
            <summary>
            A dictionary object that allows rapid hash lookups using keys, but also maintains the key insertion order so that values can be retrieved by key index.
            </summary>
        </member>
        <member name="P:FlaxEngine.Collections.OrderedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key associated with the value to get or set.</param>
        </member>
        <member name="P:FlaxEngine.Collections.OrderedDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The index of the value to get or set.</param>
        </member>
        <member name="P:FlaxEngine.Collections.OrderedDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.
            </summary>
            <returns>The number of elements contained in the T:System.Collections.ICollection.</returns>
        </member>
        <member name="P:FlaxEngine.Collections.OrderedDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys in the
            <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.ICollection" /> object containing the keys in the
            <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> object.
            </returns>
        </member>
        <member name="P:FlaxEngine.Collections.OrderedDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> object containing the values in the
            <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.ICollection" /> object containing the values in the
            <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> object.
            </returns>
        </member>
        <member name="P:FlaxEngine.Collections.OrderedDictionary`2.Comparer">
            <summary>
            The keys equality comparer.
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.#ctor">
            <summary>
            A dictionary object that allows rapid hash lookups using keys, but also
            maintains the key insertion order so that values can be retrieved by
            key index.
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            <inheritdoc cref="T:FlaxEngine.Collections.OrderedDictionary`2" />
            </summary>
            <remarks>Allows custom comparer for items</remarks>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.#ctor(FlaxEngine.Collections.IOrderedDictionary{`0,`1})">
            <summary>
            <inheritdoc cref="T:FlaxEngine.Collections.OrderedDictionary`2" />
            </summary>
            <remarks>Copy constructor</remarks>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.#ctor(FlaxEngine.Collections.IOrderedDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            <inheritdoc cref="T:FlaxEngine.Collections.OrderedDictionary`2" />
            </summary>
            <remarks>Copy constructor with custom items comparer</remarks>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.Add(`0,`1)">
            <summary>Adds an element with the specified key and value into the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.</summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.Clear">
            <summary>
            Clears the contents of the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> instance.
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            Performs additional custom processes before inserting a new element into the
            <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> instance.
            </summary>
            <param name="index">The index.</param>
            <param name="key">The key of the element to insert.</param>
            <param name="value">The value of the element to insert.</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.IndexOf(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.
            </summary>
            <param name="key">The object to locate in the current dictionary. The element to locate can be null for reference types.</param>
            <returns>The index of the item.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> contains a specific value.
            </summary>
            <param name="value">The value to locate in the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.</param>
            <returns>True if the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> contains an element with the specified value; otherwise, false.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.ContainsValue(`1,System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Determines whether the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> contains a specific value.
            </summary>
            <param name="value">The value to locate in the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.</param>
            <param name="comparer">The custom <see cref="T:System.Collections.IEqualityComparer" /> for this search</param>
            <returns>True if the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> contains an element with the specified value; otherwise, false.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.</param>
            <returns>True if the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.GetItem(System.Int32)">
            <summary>
            Gets item at given index.
            </summary>
            <param name="index">Requested key at index</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the index specified does not refer to a KeyValuePair in this object
            </exception>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.SetItem(System.Int32,`1)">
            <summary>
            Sets the value at the index specified.
            </summary>
            <param name="index">The index of the value desired</param>
            <param name="value">The value to set</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the index specified does not refer to a KeyValuePair in this object
            </exception>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the
            <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" />.</returns>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.Remove(`0)">
            <summary>
            Performs additional custom processes before removing an element from the
            <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> instance.
            </summary>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:FlaxEngine.Collections.OrderedDictionary`2" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.GetValue(`0)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key associated with the value to get.</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.SetValue(`0,`1)">
            <summary>
            Sets the value associated with the specified key.
            </summary>
            <param name="key">The key associated with the value to set.</param>
            <param name="value">The the value to set.</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get value at specified key.
            </summary>
            <param name="key">The key associated with the value to find.</param>
            <param name="value">Found value.</param>
            <returns>true if value existed, false if not</returns>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.SortKeys">
            <summary>
            Sorts the keys.
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.SortKeys(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the keys.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.SortKeys(System.Comparison{`0})">
            <summary>
            Sorts the keys.
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.SortValues">
            <summary>
            Sorts the values.
            </summary>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.SortValues(System.Collections.Generic.IComparer{`1})">
            <summary>
            Sorts the values.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:FlaxEngine.Collections.OrderedDictionary`2.SortValues(System.Comparison{`1})">
            <summary>
            Sorts the values.
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:FlaxEngine.Collections.ComparerInternal`1.#ctor(System.Comparison{`0})">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Collections.ComparerInternal`1.Compare(`0,`0)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Collections.DictionaryEnumerator`2">
            <summary>
            The enumerator implementation for dictionary
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <seealso cref="T:System.Collections.IDictionaryEnumerator" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:FlaxEngine.Collections.DictionaryEnumerator`2.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Collections.DictionaryEnumerator`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Collections.DictionaryEnumerator`2"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEngine.Collections.DictionaryEnumerator`2.Reset">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Collections.DictionaryEnumerator`2.MoveNext">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.Collections.DictionaryEnumerator`2.Entry">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.Collections.DictionaryEnumerator`2.Key">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.Collections.DictionaryEnumerator`2.Value">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.Collections.DictionaryEnumerator`2.Current">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.BoundingFrustum">
            <summary>
            Defines a frustum which can be used in frustum culling, zoom to Extents (zoom to fit) operations,
            (matrix, frustum, camera) interchange, and many kind of intersection testing.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.Matrix">
            <summary>
            Gets or sets the Matrix that describes this bounding frustum.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.Near">
            <summary>
            Gets the near plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.Far">
            <summary>
            Gets the far plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.Left">
            <summary>
            Gets the left plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.Right">
            <summary>
            Gets the right plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.Top">
            <summary>
            Gets the top plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.Bottom">
            <summary>
            Gets the bottom plane of the BoundingFrustum.
            </summary>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.#ctor(FlaxEngine.Matrix)">
            <summary>
            Creates a new instance of BoundingFrustum.
            </summary>
            <param name="matrix">Combined matrix that usually takes view × projection matrix.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Equals(FlaxEngine.BoundingFrustum@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.BoundingFrustum" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.BoundingFrustum" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.BoundingFrustum" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Equals(FlaxEngine.BoundingFrustum)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.BoundingFrustum" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.BoundingFrustum" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.BoundingFrustum" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.op_Equality(FlaxEngine.BoundingFrustum,FlaxEngine.BoundingFrustum)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.op_Inequality(FlaxEngine.BoundingFrustum,FlaxEngine.BoundingFrustum)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetPlane(System.Int32)">
            <summary>
            Returns one of the 6 planes related to this frustum.
            </summary>
            <param name="index">Plane index where 0 fro Left, 1 for Right, 2 for Top, 3 for Bottom, 4 for Near, 5 for Far</param>
            <returns></returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.FromCamera(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new frustum relaying on perspective camera parameters
            </summary>
            <param name="cameraPos">The camera pos.</param>
            <param name="lookDir">The look dir.</param>
            <param name="upDir">Up dir.</param>
            <param name="fov">The fov.</param>
            <param name="znear">The znear.</param>
            <param name="zfar">The zfar.</param>
            <param name="aspect">The aspect.</param>
            <returns>The bounding frustum calculated from perspective camera</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetCorners">
            <summary>
            Returns the 8 corners of the frustum, element0 is Near1 (near right down corner)
            , element1 is Near2 (near right top corner)
            , element2 is Near3 (near Left top corner)
            , element3 is Near4 (near Left down corner)
            , element4 is Far1 (far right down corner)
            , element5 is Far2 (far right top corner)
            , element6 is Far3 (far left top corner)
            , element7 is Far4 (far left down corner)
            </summary>
            <returns>The 8 corners of the frustum</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetCorners(FlaxEngine.Vector3[])">
            <summary>
            Returns the 8 corners of the frustum, element0 is Near1 (near right down corner)
            , element1 is Near2 (near right top corner)
            , element2 is Near3 (near Left top corner)
            , element3 is Near4 (near Left down corner)
            , element4 is Far1 (far right down corner)
            , element5 is Far2 (far right top corner)
            , element6 is Far3 (far left top corner)
            , element7 is Far4 (far left down corner)
            </summary>
            <returns>The 8 corners of the frustum</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.Vector3@)">
            <summary>
            Checks whether a point lay inside, intersects or lay outside the frustum.
            </summary>
            <param name="point">The point.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.Vector3)">
            <summary>
            Checks whether a point lay inside, intersects or lay outside the frustum.
            </summary>
            <param name="point">The point.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.Vector3[])">
            <summary>
            Checks whether a group of points lay totally inside the frustum (Contains), or lay partially inside the frustum
            (Intersects), or lay outside the frustum (Disjoint).
            </summary>
            <param name="points">The points.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.Vector3[],FlaxEngine.ContainmentType@)">
            <summary>
            Checks whether a group of points lay totally inside the frustum (Contains), or lay partially inside the frustum
            (Intersects), or lay outside the frustum (Disjoint).
            </summary>
            <param name="points">The points.</param>
            <param name="result">Type of the containment.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingBox@)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding box.
            </summary>
            <param name="box">The box.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingBox)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding box.
            </summary>
            <param name="box">The box.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingBox@,FlaxEngine.ContainmentType@)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding box.
            </summary>
            <param name="box">The box.</param>
            <param name="result">Type of the containment.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingSphere@)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingSphere)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingSphere@,FlaxEngine.ContainmentType@)">
            <summary>
            Determines the intersection relationship between the frustum and a bounding sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">Type of the containment.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingFrustum@)">
            <summary>
            Determines the intersection relationship between the frustum and another bounding frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingFrustum)">
            <summary>
            Determines the intersection relationship between the frustum and another bounding frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Contains(FlaxEngine.BoundingFrustum@,System.Boolean@)">
            <summary>
            Determines the intersection relationship between the frustum and another bounding frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <param name="result">Type of the containment.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.BoundingSphere@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingSphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>Type of the containment</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.BoundingSphere@,System.Boolean@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingSphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">Set to <c>true</c> if the current BoundingFrustum intersects a BoundingSphere.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.BoundingBox@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingBox.
            </summary>
            <param name="box">The box.</param>
            <returns><c>true</c> if the current BoundingFrustum intersects a BoundingSphere.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.BoundingBox@,System.Boolean@)">
            <summary>
            Checks whether the current BoundingFrustum intersects a BoundingBox.
            </summary>
            <param name="box">The box.</param>
            <param name="result"><c>true</c> if the current BoundingFrustum intersects a BoundingSphere.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.Plane@)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Plane.
            </summary>
            <param name="plane">The plane.</param>
            <returns>Plane intersection type.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.Plane@,FlaxEngine.PlaneIntersectionType@)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="result">Plane intersection type.</param>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetWidthAtDepth(System.Single)">
            <summary>
            Get the width of the frustum at specified depth.
            </summary>
            <param name="depth">the depth at which to calculate frustum width.</param>
            <returns>With of the frustum at the specified depth</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetHeightAtDepth(System.Single)">
            <summary>
            Get the height of the frustum at specified depth.
            </summary>
            <param name="depth">the depth at which to calculate frustum height.</param>
            <returns>Height of the frustum at the specified depth</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.Ray@)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Ray.
            </summary>
            <param name="ray">The ray.</param>
            <returns><c>true</c> if the current BoundingFrustum intersects the specified Ray.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.Intersects(FlaxEngine.Ray@,System.Nullable{System.Single}@,System.Nullable{System.Single}@)">
            <summary>
            Checks whether the current BoundingFrustum intersects the specified Ray.
            </summary>
            <param name="ray">The Ray to check for intersection with.</param>
            <param name="inDistance">
            The distance at which the ray enters the frustum if there is an intersection and the ray
            starts outside the frustum.
            </param>
            <param name="outDistance">The distance at which the ray exits the frustum if there is an intersection.</param>
            <returns><c>true</c> if the current BoundingFrustum intersects the specified Ray.</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetZoomToExtentsShiftDistance(FlaxEngine.Vector3[])">
            <summary>
            Get the distance which when added to camera position along the lookat direction will do the effect of zoom to extents
            (zoom to fit) operation,
            so all the passed points will fit in the current view.
            if the returned value is positive, the camera will move toward the lookat direction (ZoomIn).
            if the returned value is negative, the camera will move in the reverse direction of the lookat direction (ZoomOut).
            </summary>
            <param name="points">The points.</param>
            <returns>The zoom to fit distance</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetZoomToExtentsShiftDistance(FlaxEngine.BoundingBox@)">
            <summary>
            Get the distance which when added to camera position along the lookat direction will do the effect of zoom to extents
            (zoom to fit) operation,
            so all the passed points will fit in the current view.
            if the returned value is positive, the camera will move toward the lookat direction (ZoomIn).
            if the returned value is negative, the camera will move in the reverse direction of the lookat direction (ZoomOut).
            </summary>
            <param name="boundingBox">The bounding box.</param>
            <returns>The zoom to fit distance</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetZoomToExtentsShiftVector(FlaxEngine.Vector3[])">
            <summary>
            Get the vector shift which when added to camera position will do the effect of zoom to extents (zoom to fit)
            operation,
            so all the passed points will fit in the current view.
            </summary>
            <param name="points">The points.</param>
            <returns>The zoom to fit vector</returns>
        </member>
        <member name="M:FlaxEngine.BoundingFrustum.GetZoomToExtentsShiftVector(FlaxEngine.BoundingBox@)">
            <summary>
            Get the vector shift which when added to camera position will do the effect of zoom to extents (zoom to fit)
            operation,
            so all the passed points will fit in the current view.
            </summary>
            <param name="boundingBox">The bounding box.</param>
            <returns>The zoom to fit vector</returns>
        </member>
        <member name="P:FlaxEngine.BoundingFrustum.IsOrthographic">
            <summary>
            Indicate whether the current BoundingFrustum is Orthographic.
            </summary>
            <value>
            <c>true</c> if the current BoundingFrustum is Orthographic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:FlaxEngine.ContainmentType">
            <summary>
            Describes how one bounding volume contains another.
            </summary>
        </member>
        <member name="F:FlaxEngine.ContainmentType.Disjoint">
            <summary>
            The two bounding volumes don't intersect at all.
            </summary>
        </member>
        <member name="F:FlaxEngine.ContainmentType.Contains">
            <summary>
            One bounding volume completely contains another.
            </summary>
        </member>
        <member name="F:FlaxEngine.ContainmentType.Intersects">
            <summary>
            The two bounding volumes overlap.
            </summary>
        </member>
        <member name="T:FlaxEngine.PlaneIntersectionType">
            <summary>
            Describes the result of an intersection with a plane in three dimensions.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlaneIntersectionType.Back">
            <summary>
            The object is behind the plane.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlaneIntersectionType.Front">
            <summary>
            The object is in front of the plane.
            </summary>
        </member>
        <member name="F:FlaxEngine.PlaneIntersectionType.Intersecting">
            <summary>
            The object is intersecting the plane.
            </summary>
        </member>
        <member name="T:FlaxEngine.CollisionsHelper">
            <summary>
            Contains static methods to help in determining intersections, containment, etc.
            </summary>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.ClosestPointPointLine(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Determines the closest point between a point and a line segment.
            </summary>
            <param name="point">The point to test.</param>
            <param name="p0">The line first point.</param>
            <param name="p1">The line second point.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.ClosestPointPointLine(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines the closest point between a point and a line.
            </summary>
            <param name="point">The point to test.</param>
            <param name="p0">The line first point.</param>
            <param name="p1">The line second point.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.ClosestPointPointTriangle(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines the closest point between a point and a triangle.
            </summary>
            <param name="point">The point to test.</param>
            <param name="vertex1">The first vertex to test.</param>
            <param name="vertex2">The second vertex to test.</param>
            <param name="vertex3">The third vertex to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.ClosestPointPlanePoint(FlaxEngine.Plane@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:FlaxEngine.Plane" /> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.ClosestPointBoxPoint(FlaxEngine.BoundingBox@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:FlaxEngine.BoundingBox" /> and a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.ClosestPointRectanglePoint(FlaxEngine.Rectangle@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Determines the closest point between a <see cref="T:FlaxEngine.Rectangle" /> and a point.
            </summary>
            <param name="rect">The rectangle to test.</param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.ClosestPointSpherePoint(FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:FlaxEngine.BoundingSphere" /> and a point.
            </summary>
            <param name="sphere"></param>
            <param name="point">The point to test.</param>
            <param name="result">
            When the method completes, contains the closest point between the two objects;
            or, if the point is directly in the center of the sphere, contains <see cref="F:FlaxEngine.Vector3.Zero" />.
            </param>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.ClosestPointSphereSphere(FlaxEngine.BoundingSphere@,FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:FlaxEngine.BoundingSphere" /> and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <param name="result">
            When the method completes, contains the closest point between the two objects;
            or, if the point is directly in the center of the sphere, contains <see cref="F:FlaxEngine.Vector3.Zero" />.
            </param>
            <remarks>
            If the two spheres are overlapping, but not directly on top of each other, the closest point
            is the 'closest' point of intersection. This can also be considered is the deepest point of
            intersection.
            </remarks>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.DistancePlanePoint(FlaxEngine.Plane@,FlaxEngine.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:FlaxEngine.Plane" /> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.DistanceBoxPoint(FlaxEngine.BoundingBox@,FlaxEngine.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:FlaxEngine.BoundingBox" /> and a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.DistanceBoxBox(FlaxEngine.BoundingBox@,FlaxEngine.BoundingBox@)">
            <summary>
            Determines the distance between a <see cref="T:FlaxEngine.BoundingBox" /> and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.DistanceSpherePoint(FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:FlaxEngine.BoundingSphere" /> and a point.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.DistanceSphereSphere(FlaxEngine.BoundingSphere@,FlaxEngine.BoundingSphere@)">
            <summary>
            Determines the distance between a <see cref="T:FlaxEngine.BoundingSphere" /> and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsPoint(FlaxEngine.Ray@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a point.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersect.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsRay(FlaxEngine.Ray@,FlaxEngine.Ray@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.Ray" />.
            </summary>
            <param name="ray1">The first ray to test.</param>
            <param name="ray2">The second ray to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersect.</returns>
            <remarks>
            This method performs a ray vs ray intersection test based on the following formula
            from Goldman.
            <code>s = det([o_2 - o_1, d_2, d_1 x d_2]) / ||d_1 x d_2||^2</code>
            <code>t = det([o_2 - o_1, d_1, d_1 x d_2]) / ||d_1 x d_2||^2</code>
            Where o_1 is the position of the first ray, o_2 is the position of the second ray,
            d_1 is the normalized direction of the first ray, d_2 is the normalized direction
            of the second ray, det denotes the determinant of a matrix, x denotes the cross
            product, [ ] denotes a matrix, and || || denotes the length or magnitude of a vector.
            </remarks>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsPlane(FlaxEngine.Ray@,FlaxEngine.Plane@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="plane">The plane to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersect.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsPlane(FlaxEngine.Ray@,FlaxEngine.Plane@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="plane">The plane to test</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsTriangle(FlaxEngine.Ray@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a triangle.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            This method tests if the ray intersects either the front or back of the triangle.
            If the ray is parallel to the triangle's plane, no intersection is assumed to have
            happened. If the intersection of the ray and the triangle is behind the origin of
            the ray, no intersection is assumed to have happened. In both cases of assumptions,
            this method returns false.
            </remarks>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsTriangle(FlaxEngine.Ray@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a triangle.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsBox(FlaxEngine.Ray@,FlaxEngine.BoundingBox@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="box">The box to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsBox(FlaxEngine.Ray@,FlaxEngine.BoundingBox@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="box">The box to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsSphere(FlaxEngine.Ray@,FlaxEngine.BoundingSphere@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="sphere">The sphere to test.</param>
            <param name="distance">
            When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.RayIntersectsSphere(FlaxEngine.Ray@,FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="sphere">The sphere to test.</param>
            <param name="point">
            When the method completes, contains the point of intersection,
            or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.PlaneIntersectsPoint(FlaxEngine.Plane@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Plane" /> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.PlaneIntersectsPlane(FlaxEngine.Plane@,FlaxEngine.Plane@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Plane" /> and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane1">The first plane to test.</param>
            <param name="plane2">The second plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.PlaneIntersectsPlane(FlaxEngine.Plane@,FlaxEngine.Plane@,FlaxEngine.Ray@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Plane" /> and a <see cref="T:FlaxEngine.Plane" />.
            </summary>
            <param name="plane1">The first plane to test.</param>
            <param name="plane2">The second plane to test.</param>
            <param name="line">
            When the method completes, contains the line of intersection
            as a <see cref="T:FlaxEngine.Ray" />, or a zero ray if there was no intersection.
            </param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            Although a ray is set to have an origin, the ray returned by this method is really
            a line in three dimensions which has no real origin. The ray is considered valid when
            both the positive direction is used and when the negative direction is used.
            </remarks>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.PlaneIntersectsTriangle(FlaxEngine.Plane@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Plane" /> and a triangle.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.PlaneIntersectsBox(FlaxEngine.Plane@,FlaxEngine.BoundingBox@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Plane" /> and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.PlaneIntersectsSphere(FlaxEngine.Plane@,FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Plane" /> and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.BoxIntersectsBox(FlaxEngine.BoundingBox@,FlaxEngine.BoundingBox@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.BoundingBox" /> and a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.BoxIntersectsSphere(FlaxEngine.BoundingBox@,FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.BoundingBox" /> and a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="box">The box to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.SphereIntersectsTriangle(FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.BoundingSphere" /> and a triangle.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.SphereIntersectsSphere(FlaxEngine.BoundingSphere@,FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.BoundingSphere" /> and a
            <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere1">First sphere to test.</param>
            <param name="sphere2">Second sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.BoxContainsPoint(FlaxEngine.BoundingBox@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.BoundingBox" /> contains a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.BoxContainsBox(FlaxEngine.BoundingBox@,FlaxEngine.BoundingBox@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.BoundingBox" /> contains a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.BoxContainsSphere(FlaxEngine.BoundingBox@,FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.BoundingBox" /> contains a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="box">The box to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.SphereContainsPoint(FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.BoundingSphere" /> contains a point.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.SphereContainsTriangle(FlaxEngine.BoundingSphere@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.BoundingSphere" /> contains a triangle.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.SphereContainsBox(FlaxEngine.BoundingSphere@,FlaxEngine.BoundingBox@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.BoundingSphere" /> contains a <see cref="T:FlaxEngine.BoundingBox" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.SphereContainsSphere(FlaxEngine.BoundingSphere@,FlaxEngine.BoundingSphere@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.BoundingSphere" /> contains a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.LineIntersectsLine(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Determines whether a line intersects with the other line.
            </summary>
            <param name="l1p1">The first line point 0.</param>
            <param name="l1p2">The first line point 1.</param>
            <param name="l2p1">The second line point 0.</param>
            <param name="l2p2">The second line point 1.</param>
            <returns>True if line intersects with the other line</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.LineIntersectsRect(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Rectangle@)">
            <summary>
            Determines whether a line intersects with the rectangle.
            </summary>
            <param name="p1">The line point 0.</param>
            <param name="p2">The line point 1.</param>
            <param name="rect">The rectangle.</param>
            <returns>True if line intersects with the rectangle</returns>
        </member>
        <member name="M:FlaxEngine.CollisionsHelper.IsPointInTriangle(FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Determines whether the given 2D point is inside the specified triangle.
            </summary>
            <param name="point">The point to check.</param>
            <param name="a">The first vertex of the triangle.</param>
            <param name="b">The second vertex of the triangle.</param>
            <param name="c">The third vertex of the triangle.</param>
            <returns><c>true</c> if point is inside the triangle; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:FlaxEngine.Color32">
            <summary>
            Representation of RGBA colors in 32 bit format.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Color32" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.Transparent">
            <summary>
            The transparent color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.Black">
            <summary>
            The black color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.White">
            <summary>
            The white color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.R">
            <summary>
            Red component of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.G">
            <summary>
            Green component of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.B">
            <summary>
            Blue component of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.Color32.A">
            <summary>
            Alpha component of the color.
            </summary>
        </member>
        <member name="P:FlaxEngine.Color32.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the red, green, blue, and alpha components, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the alpha component, 1 for the red component, 2 for the green component, and 3 for the blue component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="M:FlaxEngine.Color32.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs a new Color32 with given r, g, b, a components.
            </summary>
            <param name="r">The red component value.</param>
            <param name="g">The green component value.</param>
            <param name="b">The blue component value.</param>
            <param name="a">The alpha component value.</param>
        </member>
        <member name="M:FlaxEngine.Color32.Lerp(FlaxEngine.Color32,FlaxEngine.Color32,System.Single)">
            <summary>
            Linearly interpolates between colors a and b by t.
            </summary>
            <param name="a">Color a</param>
            <param name="b">Color b</param>
            <param name="t">Float for combining a and b</param>
        </member>
        <member name="M:FlaxEngine.Color32.Lerp(FlaxEngine.Color32@,FlaxEngine.Color32@,System.Single,FlaxEngine.Color32@)">
            <summary>
            Linearly interpolates between colors a and b by t.
            </summary>
            <param name="a">Color a</param>
            <param name="b">Color b</param>
            <param name="t">Float for combining a and b</param>
            <param name="result">Result</param>
        </member>
        <member name="M:FlaxEngine.Color32.op_Addition(FlaxEngine.Color32,FlaxEngine.Color32)">
            <summary>
            Adds two colors.
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The second color.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color32.op_Division(FlaxEngine.Color32,System.Single)">
            <summary>
            Divides color by the scale factor.
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The division factor.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color32.op_Multiply(FlaxEngine.Color32,FlaxEngine.Color32)">
            <summary>
            Multiplies color components by the other color components.
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The second color.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color32.op_Multiply(FlaxEngine.Color32,System.Single)">
            <summary>
            Multiplies color components by the scale factor.
            </summary>
            <param name="a">The color.</param>
            <param name="b">The scale.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color32.op_Multiply(System.Single,FlaxEngine.Color32)">
            <summary>
            Multiplies color components by the scale factor.
            </summary>
            <param name="b">The scale.</param>
            <param name="a">The color.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color32.op_Subtraction(FlaxEngine.Color32,FlaxEngine.Color32)">
            <summary>
            Subtracts one color from the another.
            </summary>
            <param name="a">The first color.</param>
            <param name="b">The second color.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Color32.op_Implicit(FlaxEngine.Color)~FlaxEngine.Color32">
            <summary>
            Performs an implicit conversion from <see cref="T:FlaxEngine.Color"/> to <see cref="T:FlaxEngine.Color32"/>.
            </summary>
            <param name="c">The color.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:FlaxEngine.Color32.op_Implicit(FlaxEngine.Color32)~FlaxEngine.Color">
            <summary>
            Performs an implicit conversion from <see cref="T:FlaxEngine.Color32"/> to <see cref="T:FlaxEngine.Color"/>.
            </summary>
            <param name="c">The color.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:FlaxEngine.Color32.op_Explicit(FlaxEngine.Color32)~FlaxEngine.Int4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Color32" /> to <see cref="T:FlaxEngine.Int4" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Color32.op_Explicit(FlaxEngine.Color32)~FlaxEngine.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Color32"/> to <see cref="T:FlaxEngine.Vector4"/>.
            </summary>
            <param name="c">The color.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Color32.ToString">
            <summary>
            Returns a nicely formatted string of this color.
            </summary>
        </member>
        <member name="M:FlaxEngine.Color32.ToString(System.String)">
            <summary>
            Returns a nicely formatted string of this color.
            </summary>
            <param name="format"></param>
        </member>
        <member name="T:FlaxEngine.ColorHSV">
            <summary>
            Represents a color in the form of Hue, Saturation, Value, Alpha.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorHSV.H">
            <summary>
            The Hue of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorHSV.S">
            <summary>
            The Saturation of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorHSV.V">
            <summary>
            The Value of the color.
            </summary>
        </member>
        <member name="F:FlaxEngine.ColorHSV.A">
            <summary>
            The alpha component of the color.
            </summary>
        </member>
        <member name="M:FlaxEngine.ColorHSV.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.ColorHSV"/> struct.
            </summary>
            <param name="h">The hue.</param>
            <param name="s">The saturation.</param>
            <param name="v">The value.</param>
            <param name="a">The alpha.</param>
        </member>
        <member name="M:FlaxEngine.ColorHSV.ToColor">
            <summary>
            Converts the color into a three component vector.
            </summary>
            <returns>A three component vector containing the red, green, and blue components of the color.</returns>
        </member>
        <member name="M:FlaxEngine.ColorHSV.FromColor(FlaxEngine.Color)">
            <summary>
            Converts the color into a HSV color.
            </summary>
            <param name="color">The color.</param>
            <returns>A HSV color</returns>
        </member>
        <member name="M:FlaxEngine.ColorHSV.Equals(FlaxEngine.ColorHSV)">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEngine.ColorHSV.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEngine.ColorHSV.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:FlaxEngine.ColorHSV.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.ColorHSV.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.ColorHSV.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.ColorHSV.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:FlaxEngine.FloatR10G10B10A2">
            <summary>
            Packed vector, layout: R:10 bytes, G:10 bytes, B:10 bytes, A:2 bytes, all values are stored as floats in range [0;1]
            </summary>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref = "T:FlaxEngine.FloatR10G10B10A2" /> structure.
            </summary>
            <param name="x">The floating point value that should be stored in R component (10 bit format).</param>
            <param name="y">The floating point value that should be stored in G component (10 bit format).</param>
            <param name="z">The floating point value that should be stored in B component (10 bit format).</param>
            <param name="w">The floating point value that should be stored in A component (2 bit format).</param>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.#ctor(FlaxEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref = "T:FlaxEngine.FloatR10G10B10A2" /> structure.
            </summary>
            <param name="value">The floating point value that should be stored in 10 bit format.</param>
            <param name="w">The floating point value that should be stored in alpha component (2 bit format).</param>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.#ctor(FlaxEngine.Vector4)">
            <summary>
            Initializes a new instance of the <see cref = "T:FlaxEngine.FloatR10G10B10A2" /> structure.
            </summary>
            <param name = "value">The floating point value that should be stored in 10 bit format.</param>
        </member>
        <member name="P:FlaxEngine.FloatR10G10B10A2.RawValue">
            <summary>
            Gets or sets the raw 32 bit value used to back this vector.
            </summary>
        </member>
        <member name="P:FlaxEngine.FloatR10G10B10A2.R">
            <summary>
            Gets the R component.
            </summary>
        </member>
        <member name="P:FlaxEngine.FloatR10G10B10A2.G">
            <summary>
            Gets the G component.
            </summary>
        </member>
        <member name="P:FlaxEngine.FloatR10G10B10A2.B">
            <summary>
            Gets the B component.
            </summary>
        </member>
        <member name="P:FlaxEngine.FloatR10G10B10A2.A">
            <summary>
            Gets the A component.
            </summary>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.op_Explicit(FlaxEngine.Vector4)~FlaxEngine.FloatR10G10B10A2">
            <summary>
            Performs an explicit conversion from <see cref = "T:FlaxEngine.Vector4" /> to <see cref = "T:FlaxEngine.FloatR10G10B10A2" />.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.op_Implicit(FlaxEngine.FloatR10G10B10A2)~FlaxEngine.Vector4">
            <summary>
            Performs an implicit conversion from <see cref = "T:FlaxEngine.FloatR10G10B10A2" /> to <see cref = "T:FlaxEngine.Vector4" />.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.op_Equality(FlaxEngine.FloatR10G10B10A2,FlaxEngine.FloatR10G10B10A2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.op_Inequality(FlaxEngine.FloatR10G10B10A2,FlaxEngine.FloatR10G10B10A2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.Equals(FlaxEngine.FloatR10G10B10A2@,FlaxEngine.FloatR10G10B10A2@)">
            <summary>
            Determines whether the specified object instances are considered equal.
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns><c>true</c> if <paramref name = "value1" /> is the same instance as <paramref name = "value2" /> or if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.Equals(FlaxEngine.FloatR10G10B10A2)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object.
            </summary>
            <param name = "other">Object to make the comparison with.</param>
            <returns><c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns><c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.ToVector3">
            <summary>
            Unpacks vector to Vector3.
            </summary>
            <returns>Vector3 value</returns>
        </member>
        <member name="M:FlaxEngine.FloatR10G10B10A2.ToVector4">
            <summary>
            Unpacks vector to Vector4.
            </summary>
            <returns>Vector4 value</returns>
        </member>
        <member name="T:FlaxEngine.FloatR11G11B10">
            <summary>
            Packed vector, layout: R:11 bytes, G:11 bytes, B:10 bytes.
            The 3D vector is packed into 32 bits as follows: a 5-bit biased exponent
            and 6-bit mantissa for x component, a 5-bit biased exponent and
            6-bit mantissa for y component, a 5-bit biased exponent and a 5-bit
            mantissa for z. The z component is stored in the most significant bits
            and the x component in the least significant bits. No sign bits so
            all partial-precision numbers are positive.
            (Z10Y11X11): [32] ZZZZZzzz zzzYYYYY yyyyyyXX XXXxxxxx [0]
            </summary>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref = "T:FlaxEngine.FloatR11G11B10" /> structure.
            </summary>
            <param name="x">The floating point value that should be stored in R component (11 bits format).</param>
            <param name="y">The floating point value that should be stored in G component (11 bits format).</param>
            <param name="z">The floating point value that should be stored in B component (10 bits format).</param>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.#ctor(FlaxEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref = "T:FlaxEngine.FloatR11G11B10" /> structure.
            </summary>
            <param name="value">The floating point value that should be stored in compressed format.</param>
        </member>
        <member name="P:FlaxEngine.FloatR11G11B10.RawValue">
            <summary>
            Gets or sets the raw 32 bit value used to back this vector.
            </summary>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.op_Explicit(FlaxEngine.Vector3)~FlaxEngine.FloatR11G11B10">
            <summary>
            Performs an explicit conversion from <see cref = "T:FlaxEngine.Vector4" /> to <see cref = "T:FlaxEngine.FloatR11G11B10" />.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.op_Implicit(FlaxEngine.FloatR11G11B10)~FlaxEngine.Vector3">
            <summary>
            Performs an implicit conversion from <see cref = "T:FlaxEngine.FloatR11G11B10" /> to <see cref = "T:FlaxEngine.Vector4" />.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.op_Equality(FlaxEngine.FloatR11G11B10,FlaxEngine.FloatR11G11B10)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.op_Inequality(FlaxEngine.FloatR11G11B10,FlaxEngine.FloatR11G11B10)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.Equals(FlaxEngine.FloatR11G11B10@,FlaxEngine.FloatR11G11B10@)">
            <summary>
            Determines whether the specified object instances are considered equal.
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns><c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.Equals(FlaxEngine.FloatR11G11B10)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object.
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns><c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns><c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.FloatR11G11B10.ToVector3">
            <summary>
            Unpacks vector to Vector3.
            </summary>
            <returns>Vector3 value</returns>
        </member>
        <member name="T:FlaxEngine.Half">
            <summary>
            A half precision (16 bit) floating point value.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.PrecisionDigits">
            <summary>
            Number of decimal digits of precision.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.MantissaBits">
            <summary>
            Number of bits in the mantissa.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.MaximumDecimalExponent">
            <summary>
            Maximum decimal exponent.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.MaximumBinaryExponent">
            <summary>
            Maximum binary exponent.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.MinimumDecimalExponent">
            <summary>
            Minimum decimal exponent.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.MinimumBinaryExponent">
            <summary>
            Minimum binary exponent.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.ExponentRadix">
            <summary>
            Exponent radix.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.AdditionRounding">
            <summary>
            Additional rounding.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.Epsilon">
            <summary>
            Smallest such that 1.0 + epsilon != 1.0
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.MaxValue">
            <summary>
            Maximum value of the number.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.MinValue">
            <summary>
            Minimum value of the number.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Half"/> whose value is 0.0f.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half.One">
            <summary>
            A <see cref="T:FlaxEngine.Half"/> whose value is 1.0f.
            </summary>
        </member>
        <member name="M:FlaxEngine.Half.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref = "T:FlaxEngine.Half" /> structure.
            </summary>
            <param name = "value">The floating point value that should be stored in 16 bit format.</param>
        </member>
        <member name="P:FlaxEngine.Half.RawValue">
            <summary>
            Gets or sets the raw 16 bit value used to back this half-float.
            </summary>
        </member>
        <member name="M:FlaxEngine.Half.ConvertToFloat(FlaxEngine.Half[])">
            <summary>
            Converts an array of half precision values into full precision values.
            </summary>
            <param name = "values">The values to be converted.</param>
            <returns>An array of converted values.</returns>
        </member>
        <member name="M:FlaxEngine.Half.ConvertToHalf(System.Single[])">
            <summary>
            Converts an array of full precision values into half precision values.
            </summary>
            <param name = "values">The values to be converted.</param>
            <returns>An array of converted values.</returns>
        </member>
        <member name="M:FlaxEngine.Half.op_Explicit(System.Single)~FlaxEngine.Half">
            <summary>
            Performs an explicit conversion from <see cref = "T:System.Single" /> to <see cref = "T:FlaxEngine.Half" />.
            </summary>
            <param name = "value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:FlaxEngine.Half.op_Implicit(FlaxEngine.Half)~System.Single">
            <summary>
            Performs an implicit conversion from <see cref = "T:FlaxEngine.Half" /> to <see cref = "T:System.Single" />.
            </summary>
            <param name = "value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:FlaxEngine.Half.op_Equality(FlaxEngine.Half,FlaxEngine.Half)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name = "left" /> has the same value as <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half.op_Inequality(FlaxEngine.Half,FlaxEngine.Half)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name = "left">The first value to compare.</param>
            <param name = "right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name = "left" /> has a different value than <paramref name = "right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half.ToString">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Half.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:FlaxEngine.Half.Equals(FlaxEngine.Half@,FlaxEngine.Half@)">
            <summary>
            Determines whether the specified object instances are considered equal.
            </summary>
            <param name = "value1" />
            <param name = "value2" />
            <returns><c>true</c> if <paramref name = "value1" /> is the same instance as <paramref name = "value2" /> or  if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half.Equals(FlaxEngine.Half)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object.
            </summary>
            <param name = "other">Object to make the comparison with.</param>
            <returns><c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Half.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name = "obj">Object to make the comparison with.</param>
            <returns><c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:FlaxEngine.Half2">
            <summary>
            Defines a two component vector, using half precision floating point coordinates.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half2.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:FlaxEngine.Half2.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="M:FlaxEngine.Half2.#ctor(FlaxEngine.Half,FlaxEngine.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half2" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
        </member>
        <member name="M:FlaxEngine.Half2.#ctor(FlaxEngine.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half2" /> structure.
            </summary>
            <param name="value">The value to set for both the X and Y components.</param>
        </member>
        <member name="M:FlaxEngine.Half2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half2" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
        </member>
        <member name="M:FlaxEngine.Half2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half2" /> structure.
            </summary>
            <param name="value">The value to set for both the X and Y components.</param>
        </member>
        <member name="M:FlaxEngine.Half2.op_Equality(FlaxEngine.Half2,FlaxEngine.Half2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half2.op_Inequality(FlaxEngine.Half2,FlaxEngine.Half2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:FlaxEngine.Half2.Equals(FlaxEngine.Half2@,FlaxEngine.Half2@)">
            <summary>
            Determines whether the specified object instances are considered equal. 
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
            <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half2.Equals(FlaxEngine.Half2)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object. 
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Half2.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object. 
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Half2.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Half2.op_Explicit(FlaxEngine.Vector2)~FlaxEngine.Half2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector3"/> to <see cref="T:FlaxEngine.Half3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Half2.op_Explicit(FlaxEngine.Half2)~FlaxEngine.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector3"/> to <see cref="T:FlaxEngine.Half3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:FlaxEngine.Half3">
            <summary>
            Defines a three component vector, using half precision floating point coordinates.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half3.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:FlaxEngine.Half3.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="F:FlaxEngine.Half3.Z">
            <summary>
            Gets or sets the Z component of the vector.
            </summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="M:FlaxEngine.Half3.#ctor(FlaxEngine.Half,FlaxEngine.Half,FlaxEngine.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half3" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="M:FlaxEngine.Half3.#ctor(FlaxEngine.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half3" /> structure.
            </summary>
            <param name="value">The value to set for the X, Y, and Z components.</param>
        </member>
        <member name="M:FlaxEngine.Half3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half3" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="M:FlaxEngine.Half3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half3" /> structure.
            </summary>
            <param name="value">The value to set for the X, Y, and Z components.</param>
        </member>
        <member name="M:FlaxEngine.Half3.op_Equality(FlaxEngine.Half3,FlaxEngine.Half3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half3.op_Inequality(FlaxEngine.Half3,FlaxEngine.Half3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:FlaxEngine.Half3.Equals(FlaxEngine.Half3@,FlaxEngine.Half3@)">
            <summary>
            Determines whether the specified object instances are considered equal. 
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
            <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half3.Equals(FlaxEngine.Half3)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object. 
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Half3.op_Explicit(FlaxEngine.Vector3)~FlaxEngine.Half3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector3"/> to <see cref="T:FlaxEngine.Half3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Half3.op_Explicit(FlaxEngine.Half3)~FlaxEngine.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector3"/> to <see cref="T:FlaxEngine.Half3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Half3.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object. 
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Half3.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:FlaxEngine.Half4">
            <summary>
            Defines a four component vector, using half precision floating point coordinates.
            </summary>
        </member>
        <member name="F:FlaxEngine.Half4.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="F:FlaxEngine.Half4.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="F:FlaxEngine.Half4.Z">
            <summary>
            Gets or sets the Z component of the vector.
            </summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="F:FlaxEngine.Half4.W">
            <summary>
            Gets or sets the W component of the vector.
            </summary>
            <value>The W component of the vector.</value>
        </member>
        <member name="M:FlaxEngine.Half4.#ctor(FlaxEngine.Half,FlaxEngine.Half,FlaxEngine.Half,FlaxEngine.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half4" /> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
            <param name="w">The W component.</param>
        </member>
        <member name="M:FlaxEngine.Half4.#ctor(FlaxEngine.Half)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Half4" /> structure.
            </summary>
            <param name="value">The value to set for the X, Y, Z, and W components.</param>
        </member>
        <member name="M:FlaxEngine.Half4.op_Equality(FlaxEngine.Half4,FlaxEngine.Half4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half4.op_Inequality(FlaxEngine.Half4,FlaxEngine.Half4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:FlaxEngine.Half4.Equals(FlaxEngine.Half4@,FlaxEngine.Half4@)">
            <summary>
            Determines whether the specified object instances are considered equal. 
            </summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
            <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Half4.Equals(FlaxEngine.Half4)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object. 
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Half4.op_Explicit(FlaxEngine.Vector4)~FlaxEngine.Half4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector4"/> to <see cref="T:FlaxEngine.Half4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Half4.op_Explicit(FlaxEngine.Half4)~FlaxEngine.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:FlaxEngine.Vector4"/> to <see cref="T:FlaxEngine.Half4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FlaxEngine.Half4.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object. 
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FlaxEngine.Half4.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:FlaxEngine.HalfUtils">
            <summary>
            Helper class to perform Half/Float conversion.
            Code extract from paper : www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf by Jeroen van der Zijp
            </summary>
        </member>
        <member name="M:FlaxEngine.HalfUtils.Unpack(System.UInt16)">
            <summary>
            Unpacks the specified half value.
            </summary>
            <param name="h">The half value.</param>
            <returns>The float value</returns>
        </member>
        <member name="M:FlaxEngine.HalfUtils.Pack(System.Single)">
            <summary>
            Packs the specified float value.
            </summary>
            <param name="f">The float value.</param>
            <returns>The half value</returns>
        </member>
        <member name="T:FlaxEngine.Mathd">
            <summary>
            A collection of common math functions on double floating-points.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathd.Epsilon">
            <summary>
            The value for which all absolute numbers smaller than are considered equal to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathd.Pi">
            <summary>
            A value specifying the approximation of π which is 180 degrees.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathd.TwoPi">
            <summary>
            A value specifying the approximation of 2π which is 360 degrees.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathd.PiOverTwo">
            <summary>
            A value specifying the approximation of π/2 which is 90 degrees.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathd.PiOverFour">
            <summary>
            A value specifying the approximation of π/4 which is 45 degrees.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathd.GoldenRatio">
            <summary>
            A value specifying the golden mean
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathd.Abs(System.Double)">
            <summary>
            Returns the absolute value of f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.Acos(System.Double)">
            <summary>
            Returns the arc-cosine of f - the angle in radians whose cosine is f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.Approximately(System.Double,System.Double)">
            <summary>
            Compares two floating point values if they are similar.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.Asin(System.Double)">
            <summary>
            Returns the arc-sine of f - the angle in radians whose sine is f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.Atan(System.Double)">
            <summary>
            Returns the arc-tangent of f - the angle in radians whose tangent is f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.Atan2(System.Double,System.Double)">
            <summary>
            Returns the angle in radians whose Tan is y/x.
            </summary>
            <param name="y"></param>
            <param name="x"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.Ceil(System.Double)">
            <summary>
            Returns the smallest integer greater to or equal to f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.CeilToInt(System.Double)">
            <summary>
            Returns the smallest integer greater to or equal to f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.Saturate(System.Double)">
            <summary>
            Clamps value between 0 and 1 and returns value.
            </summary>
            <param name="value">Value to clamp</param>
            <returns>Result value</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.Cos(System.Double)">
            <summary>
            Returns the cosine of angle f in radians.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.DeltaAngle(System.Double,System.Double)">
            <summary>
            Calculates the shortest difference between two given angles given in degrees.
            </summary>
            <param name="current"></param>
            <param name="target"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.Exp(System.Double)">
            <summary>
            Returns e raised to the specified power.
            </summary>
            <param name="power"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.Floor(System.Double)">
            <summary>
            Returns the largest integer smaller to or equal to f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.FloorToInt(System.Double)">
            <summary>
            Returns the largest integer smaller to or equal to f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.Remap(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Remaps the specified value from the specified range to another.
            </summary>
            <param name="value">The value to remap.</param>
            <param name="fromMin">The source range minimum.</param>
            <param name="fromMax">The source range maximum.</param>
            <param name="toMin">The destination range minimum.</param>
            <param name="toMax">The destination range maximum.</param>
            <returns>The remapped value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.InverseLerp(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the linear parameter t that produces the interpolation value within the range [a, b].
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="value"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.LerpAngle(System.Double,System.Double,System.Double)">
            <summary>
            Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.Log(System.Double,System.Double)">
            <summary>
            Returns the logarithm of a specified number in a specified base.
            </summary>
            <param name="f"></param>
            <param name="p"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.Log(System.Double)">
            <summary>
            Returns the natural (base e) logarithm of a specified number.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.Log10(System.Double)">
            <summary>
            Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.Max(System.Double,System.Double)">
            <summary>
            Returns largest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.Max(System.Double[])">
            <summary>
            Returns largest of two or more values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.Min(System.Double,System.Double)">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.Min(System.Double[])">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.MoveTowards(System.Double,System.Double,System.Double)">
            <summary>
            Moves a value current towards target.
            </summary>
            <param name="current">The current value.</param>
            <param name="target">The value to move towards.</param>
            <param name="maxDelta">The maximum change that should be applied to the value.</param>
        </member>
        <member name="M:FlaxEngine.Mathd.MoveTowardsAngle(System.Double,System.Double,System.Double)">
            <summary>
            Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="maxDelta"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.PingPong(System.Double,System.Double)">
            <summary>
            PingPongs the value t, so that it is never larger than length and never smaller than 0.
            </summary>
            <param name="t"></param>
            <param name="length"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.Pow(System.Double,System.Double)">
            <summary>
            Returns f raised to power p.
            </summary>
            <param name="f"></param>
            <param name="p"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.Repeat(System.Double,System.Double)">
            <summary>
            Loops the value t, so that it is never larger than length and never smaller than 0.
            </summary>
            <param name="t"></param>
            <param name="length"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.Round(System.Double)">
            <summary>
            Returns f rounded to the nearest integer.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.RoundToInt(System.Double)">
            <summary>
            Returns f rounded to the nearest integer.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.RoundToLong(System.Double)">
            <summary>
            Returns f rounded to the nearest integer.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.Sign(System.Double)">
            <summary>
            Returns the sign of f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.Sin(System.Double)">
            <summary>
            Returns the sine of angle f in radians.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.SmoothDamp(System.Double,System.Double,System.Double@,System.Double,System.Double)">
            <summary>
            Gradually changes a value towards a desired goal over time with smoothing.
            </summary>
            <param name="current">The current value.</param>
            <param name="target">The target value.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smoothing time. Smaller values increase blending time.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <returns>The smoothed value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.SmoothDamp(System.Double,System.Double,System.Double@,System.Double)">
            <summary>
            Gradually changes a value towards a desired goal over time with smoothing.
            </summary>
            <param name="current">The current value.</param>
            <param name="target">The target value.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smoothing time. Smaller values increase blending time.</param>
            <returns>The smoothed value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.SmoothDamp(System.Double,System.Double,System.Double@,System.Double,System.Double,System.Double)">
            <summary>
            Gradually changes a value towards a desired goal over time with smoothing.
            </summary>
            <param name="current">The current value.</param>
            <param name="target">The target value.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smoothing time. Smaller values increase blending time.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <param name="deltaTime">The delta time (in seconds) since last update.</param>
            <returns>The smoothed value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.SmoothDampAngle(System.Double,System.Double,System.Double@,System.Double,System.Double)">
            <summary>
            Gradually changes an angle towards a desired goal over time with smoothing.
            </summary>
            <param name="current">The current angle.</param>
            <param name="target">The target angle.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smoothing time. Smaller values increase blending time.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <returns>The smoothed value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.SmoothDampAngle(System.Double,System.Double,System.Double@,System.Double)">
            <summary>
            Gradually changes an angle towards a desired goal over time with smoothing.
            </summary>
            <param name="current">The current angle.</param>
            <param name="target">The target angle.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smoothing time. Smaller values increase blending time.</param>
            <returns>The smoothed value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.SmoothDampAngle(System.Double,System.Double,System.Double@,System.Double,System.Double,System.Double)">
            <summary>
            Gradually changes an angle towards a desired goal over time with smoothing.
            </summary>
            <param name="current">The current angle.</param>
            <param name="target">The target angle.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smoothing time. Smaller values increase blending time.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <param name="deltaTime">The delta time (in seconds) since last update.</param>
            <returns>The smoothed value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.SmoothStep(System.Double,System.Double,System.Double)">
            <summary>
            Interpolates between min and max with smoothing at the limits.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="t"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.CubicInterp(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Performs a cubic interpolation.
            </summary>
            <param name="p0">The first point.</param>
            <param name="t0">The tangent direction at first point.</param>
            <param name="p1">The second point.</param>
            <param name="t1">The tangent direction at second point.</param>
            <param name="alpha">The distance along the spline.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.InterpEaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Interpolate between A and B, applying an ease in function. Exponent controls the degree of the curve.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathd.InterpEaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Interpolate between A and B, applying an ease out function. Exponent controls the degree of the curve.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathd.InterpEaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Interpolate between A and B, applying an ease in/out function. Exponent controls the degree of the curve.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathd.InterpSinIn(System.Double,System.Double,System.Double)">
            <summary>
            Interpolation between A and B, applying a sinusoidal in function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathd.InterpSinOut(System.Double,System.Double,System.Double)">
            <summary>
            Interpolation between A and B, applying a sinusoidal out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathd.InterpSinInOut(System.Double,System.Double,System.Double)">
            <summary>
            Interpolation between A and B, applying a sinusoidal in/out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathd.InterpExpoIn(System.Double,System.Double,System.Double)">
            <summary>
            Interpolation between A and B, applying an exponential in function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathd.InterpExpoOut(System.Double,System.Double,System.Double)">
            <summary>
            Interpolation between A and B, applying an exponential out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathd.InterpExpoInOut(System.Double,System.Double,System.Double)">
            <summary>
            Interpolation between A and B, applying an exponential in/out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathd.InterpCircularIn(System.Double,System.Double,System.Double)">
            <summary>
            Interpolation between A and B, applying a circular in function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathd.InterpCircularOut(System.Double,System.Double,System.Double)">
            <summary>
            Interpolation between A and B, applying a circular out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathd.InterpCircularInOut(System.Double,System.Double,System.Double)">
            <summary>
            Interpolation between A and B, applying a circular in/out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathd.Map(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Maps the specified value from the given range into another.
            </summary>
            <param name="value">The value to map from range [fromMin; fromMax].</param>
            <param name="fromMin">The source range minimum value.</param>
            <param name="fromMax">The source range maximum value.</param>
            <param name="toMin">The destination range minimum value.</param>
            <param name="toMax">The destination range maximum value.</param>
            <returns>The mapped value in range [toMin; toMax].</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.NextPowerOfTwo(System.Double)">
            <summary>
            Get the next power of two for a size.
            </summary>
            <param name="size">The size.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.SRgbToLinear(System.Double)">
            <summary>
            Converts a float value from sRGB to linear.
            </summary>
            <param name="sRgbValue">The sRGB value.</param>
            <returns>A linear value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.LinearToSRgb(System.Double)">
            <summary>
            Converts a float value from linear to sRGB.
            </summary>
            <param name="linearValue">The linear value.</param>
            <returns>The encoded sRGB value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.Sqrt(System.Double)">
            <summary>
            Returns square root of f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.Square(System.Double)">
            <summary>
            Returns square of the given value.
            </summary>
            <param name="f">The value.</param>
            <returns>The value * value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.Tan(System.Double)">
            <summary>
            Returns the tangent of angle f in radians.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathd.NearEqual(System.Double,System.Double)">
            <summary>
            Checks if a and b are almost equals, taking into account the magnitude of floating point numbers (unlike
            <see cref="M:FlaxEngine.Mathd.WithinEpsilon(System.Double,System.Double,System.Double)" /> method). See Remarks.
            See remarks.
            </summary>
            <param name="a">The left value to compare.</param>
            <param name="b">The right value to compare.</param>
            <returns><c>true</c> if a almost equal to b, <c>false</c> otherwise</returns>
            <remarks>
            The code is using the technique described by Bruce Dawson in
            <a href="http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/">
              Comparing
              Floating point numbers 2012 edition
            </a>
            .
            </remarks>
        </member>
        <member name="M:FlaxEngine.Mathd.IsZero(System.Double)">
            <summary>
            Determines whether the specified value is close to zero (0.0f).
            </summary>
            <param name="a">The floating value.</param>
            <returns><c>true</c> if the specified value is close to zero (0.0f); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.IsOne(System.Double)">
            <summary>
            Determines whether the specified value is close to one (1.0f).
            </summary>
            <param name="a">The floating value.</param>
            <returns><c>true</c> if the specified value is close to one (1.0f); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.WithinEpsilon(System.Double,System.Double,System.Double)">
            <summary>
            Checks if a - b are almost equals within a float epsilon.
            </summary>
            <param name="a">The left value to compare.</param>
            <param name="b">The right value to compare.</param>
            <param name="epsilon">Epsilon value</param>
            <returns><c>true</c> if a almost equal to b within a float epsilon, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.IsInRange(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether the specified value is in a given range [min; max].
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>
              <c>true</c> if the specified value is in a given range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Mathd.IsNotInRange(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether the specified value is NOT in a given range [min; max].
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>
              <c>true</c> if the specified value is NOT in a given range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:FlaxEngine.Mathd.RevolutionsToDegrees">
            <summary>
            Converts revolutions to degrees.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathd.RevolutionsToRadians">
            <summary>
            Converts revolutions to radians.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathd.RevolutionsToGradians">
            <summary>
            Converts revolutions to gradians.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathd.DegreesToRevolutions">
            <summary>
            Converts degrees to revolutions.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathd.DegreesToRadians">
            <summary>
            Converts degrees to radians.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathd.RadiansToRevolutions">
            <summary>
            Converts radians to revolutions.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathd.RadiansToGradians">
            <summary>
            Converts radians to gradians.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathd.GradiansToRevolutions">
            <summary>
            Converts gradians to revolutions.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathd.GradiansToDegrees">
            <summary>
            Converts gradians to degrees.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathd.GradiansToRadians">
            <summary>
            Converts gradians to radians.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathd.RadiansToDegrees">
            <summary>
            Converts radians to degrees.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathd.UnwindRadians(System.Double)">
            <summary>
            Given a heading which may be outside the +/- PI range, 'unwind' it back into that range.
            </summary>
            <param name="angle">Angle in radians to unwind.</param>
            <returns>Valid angle in radians.</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.UnwindDegrees(System.Double)">
            <summary>
            Utility to ensure angle is between +/- 180 degrees by unwinding
            </summary>
            <param name="angle">Angle in degrees to unwind.</param>
            <returns>Valid angle in degrees.</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Interpolates between two values using a linear function by a given amount.
            </summary>
            <remarks>
            See http://www.encyclopediaofmath.org/index.php/Linear_interpolation and
            http://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/
            </remarks>
            <param name="from">Value to interpolate from.</param>
            <param name="to">Value to interpolate to.</param>
            <param name="amount">Interpolation amount.</param>
            <returns>The result of linear interpolation of values based on the amount.</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.SmoothStep(System.Double)">
            <summary>
            Performs smooth (cubic Hermite) interpolation between 0 and 1.
            </summary>
            <remarks>
            See https://en.wikipedia.org/wiki/Smoothstep
            </remarks>
            <param name="amount">Value between 0 and 1 indicating interpolation amount.</param>
        </member>
        <member name="M:FlaxEngine.Mathd.SmootherStep(System.Double)">
            <summary>
            Performs a smooth(er) interpolation between 0 and 1 with 1st and 2nd order derivatives of zero at endpoints.
            </summary>
            <remarks>
            See https://en.wikipedia.org/wiki/Smoothstep
            </remarks>
            <param name="amount">Value between 0 and 1 indicating interpolation amount.</param>
        </member>
        <member name="M:FlaxEngine.Mathd.Mod(System.Double,System.Double)">
            <summary>
            Calculates the modulo of the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="modulo">The modulo.</param>
            <returns>The result of the modulo applied to value</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.Mod2PI(System.Double)">
            <summary>
            Calculates the modulo 2*PI of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the modulo applied to value</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.Wrap(System.Double,System.Double,System.Double)">
            <summary>
            Wraps the specified value into a range [min, max]
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>Result of the wrapping.</returns>
            <exception cref="T:System.ArgumentException">Is thrown when <paramref name="min" /> is greater than <paramref name="max" />.</exception>
        </member>
        <member name="M:FlaxEngine.Mathd.Gauss(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gauss function.
            http://en.wikipedia.org/wiki/Gaussian_function#Two-dimensional_Gaussian_function
            </summary>
            <param name="amplitude">Curve amplitude.</param>
            <param name="x">Position X.</param>
            <param name="y">Position Y</param>
            <param name="centerX">Center X.</param>
            <param name="centerY">Center Y.</param>
            <param name="sigmaX">Curve sigma X.</param>
            <param name="sigmaY">Curve sigma Y.</param>
            <returns>The result of Gaussian function.</returns>
        </member>
        <member name="M:FlaxEngine.Mathd.InterpolateAlphaBlend(System.Double,FlaxEngine.AlphaBlendMode)">
            <summary>
            Converts the input alpha value from a linear 0-1 value into the output alpha described by blend mode.
            </summary>
            <param name="alpha">The alpha (normalized to 0-1).</param>
            <param name="mode">The mode.</param>
            <returns>The output alpha (normalized to 0-1).</returns>
        </member>
        <member name="T:FlaxEngine.Mathf">
            <summary>
            A collection of common math functions on single floating-points.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.Epsilon">
            <summary>
            The value for which all absolute numbers smaller than are considered equal to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.Pi">
            <summary>
            A value specifying the approximation of π which is 180 degrees.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.TwoPi">
            <summary>
            A value specifying the approximation of 2π which is 360 degrees.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.PiOverTwo">
            <summary>
            A value specifying the approximation of π/2 which is 90 degrees.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.PiOverFour">
            <summary>
            A value specifying the approximation of π/4 which is 45 degrees.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.GoldenRatio">
            <summary>
            A value specifying the golden mean
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.Abs(System.Single)">
            <summary>
            Returns the absolute value of f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Abs(System.Int32)">
            <summary>
            Returns the absolute value of value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Acos(System.Single)">
            <summary>
            Returns the arc-cosine of f - the angle in radians whose cosine is f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Approximately(System.Single,System.Single)">
            <summary>
            Compares two floating point values if they are similar.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Asin(System.Single)">
            <summary>
            Returns the arc-sine of f - the angle in radians whose sine is f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Atan(System.Single)">
            <summary>
            Returns the arc-tangent of f - the angle in radians whose tangent is f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Atan2(System.Single,System.Single)">
            <summary>
            Returns the angle in radians whose Tan is y/x.
            </summary>
            <param name="y"></param>
            <param name="x"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Ceil(System.Single)">
            <summary>
            Returns the smallest integer greater to or equal to f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.CeilToInt(System.Single)">
            <summary>
            Returns the smallest integer greater to or equal to f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Saturate(System.Single)">
            <summary>
            Clamps value between 0 and 1 and returns value.
            </summary>
            <param name="value">Value to clamp</param>
            <returns>Result value</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Cos(System.Single)">
            <summary>
            Returns the cosine of angle f in radians.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.DeltaAngle(System.Single,System.Single)">
            <summary>
            Calculates the shortest difference between two given angles given in degrees.
            </summary>
            <param name="current"></param>
            <param name="target"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Exp(System.Single)">
            <summary>
            Returns e raised to the specified power.
            </summary>
            <param name="power"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Floor(System.Single)">
            <summary>
            Returns the largest integer smaller to or equal to f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.FloorToInt(System.Single)">
            <summary>
            Returns the largest integer smaller to or equal to f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Remap(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Remaps the specified value from the specified range to another.
            </summary>
            <param name="value">The value to remap.</param>
            <param name="fromMin">The source range minimum.</param>
            <param name="fromMax">The source range maximum.</param>
            <param name="toMin">The destination range minimum.</param>
            <param name="toMax">The destination range maximum.</param>
            <returns>The remapped value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.InverseLerp(System.Single,System.Single,System.Single)">
            <summary>
            Calculates the linear parameter t that produces the interpolation value within the range [a, b].
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="value"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.LerpAngle(System.Single,System.Single,System.Single)">
            <summary>
            Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Log(System.Single,System.Single)">
            <summary>
            Returns the logarithm of a specified number in a specified base.
            </summary>
            <param name="f"></param>
            <param name="p"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Log(System.Single)">
            <summary>
            Returns the natural (base e) logarithm of a specified number.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Log10(System.Single)">
            <summary>
            Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Max(System.Single,System.Single)">
            <summary>
            Returns largest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Max(System.Double,System.Double)">
            <summary>
            Returns largest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Max(System.Int64,System.Int64)">
            <summary>
            Returns largest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Max(System.UInt64,System.UInt64)">
            <summary>
            Returns largest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Max(System.Single[])">
            <summary>
            Returns largest of two or more values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Max(System.Int32,System.Int32)">
            <summary>
            Returns the largest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Max(System.UInt32,System.UInt32)">
            <summary>
            Returns the largest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Max(System.Int32[])">
            <summary>
            Returns the largest of two or more values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Min(System.Single,System.Single)">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Min(System.Double,System.Double)">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Min(System.Int64,System.Int64)">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Min(System.UInt64,System.UInt64)">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Min(System.Single[])">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Min(System.Int32,System.Int32)">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Min(System.UInt32,System.UInt32)">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Min(System.Int32[])">
            <summary>
            Returns the smallest of two or more values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.MoveTowards(System.Single,System.Single,System.Single)">
            <summary>
            Moves a value current towards target.
            </summary>
            <param name="current">The current value.</param>
            <param name="target">The value to move towards.</param>
            <param name="maxDelta">The maximum change that should be applied to the value.</param>
        </member>
        <member name="M:FlaxEngine.Mathf.MoveTowardsAngle(System.Single,System.Single,System.Single)">
            <summary>
            Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="maxDelta"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.PingPong(System.Single,System.Single)">
            <summary>
            PingPongs the value t, so that it is never larger than length and never smaller than 0.
            </summary>
            <param name="t"></param>
            <param name="length"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Pow(System.Single,System.Single)">
            <summary>
            Returns f raised to power p.
            </summary>
            <param name="f"></param>
            <param name="p"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Repeat(System.Single,System.Single)">
            <summary>
            Loops the value t, so that it is never larger than length and never smaller than 0.
            </summary>
            <param name="t"></param>
            <param name="length"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Round(System.Single)">
            <summary>
            Returns f rounded to the nearest integer.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.RoundToInt(System.Single)">
            <summary>
            Returns f rounded to the nearest integer.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Sign(System.Single)">
            <summary>
            Returns the sign of f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Sin(System.Single)">
            <summary>
            Returns the sine of angle f in radians.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Frac(System.Single)">
            <summary>
            Returns signed fractional part of a float.
            </summary>
            <param name="value">Floating point value to convert.</param>
            <returns>A float between [0 ; 1) for nonnegative input. A float between [-1; 0) for negative input.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.SmoothDamp(System.Single,System.Single,System.Single@,System.Single,System.Single)">
            <summary>
            Gradually changes a value towards a desired goal over time with smoothing.
            </summary>
            <param name="current">The current value.</param>
            <param name="target">The target value.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smoothing time. Smaller values increase blending time.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <returns>The smoothed value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.SmoothDamp(System.Single,System.Single,System.Single@,System.Single)">
            <summary>
            Gradually changes a value towards a desired goal over time with smoothing.
            </summary>
            <param name="current">The current value.</param>
            <param name="target">The target value.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smoothing time. Smaller values increase blending time.</param>
            <returns>The smoothed value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.SmoothDamp(System.Single,System.Single,System.Single@,System.Single,System.Single,System.Single)">
            <summary>
            Gradually changes a value towards a desired goal over time with smoothing.
            </summary>
            <param name="current">The current value.</param>
            <param name="target">The target value.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smoothing time. Smaller values increase blending time.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <param name="deltaTime">The delta time (in seconds) since last update.</param>
            <returns>The smoothed value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.SmoothDampAngle(System.Single,System.Single,System.Single@,System.Single,System.Single)">
            <summary>
            Gradually changes an angle towards a desired goal over time with smoothing.
            </summary>
            <param name="current">The current angle.</param>
            <param name="target">The target angle.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smoothing time. Smaller values increase blending time.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <returns>The smoothed value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.SmoothDampAngle(System.Single,System.Single,System.Single@,System.Single)">
            <summary>
            Gradually changes an angle towards a desired goal over time with smoothing.
            </summary>
            <param name="current">The current angle.</param>
            <param name="target">The target angle.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smoothing time. Smaller values increase blending time.</param>
            <returns>The smoothed value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.SmoothDampAngle(System.Single,System.Single,System.Single@,System.Single,System.Single,System.Single)">
            <summary>
            Gradually changes an angle towards a desired goal over time with smoothing.
            </summary>
            <param name="current">The current angle.</param>
            <param name="target">The target angle.</param>
            <param name="currentVelocity">The current velocity.</param>
            <param name="smoothTime">The smoothing time. Smaller values increase blending time.</param>
            <param name="maxSpeed">The maximum speed.</param>
            <param name="deltaTime">The delta time (in seconds) since last update.</param>
            <returns>The smoothed value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.SmoothStep(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between min and max with smoothing at the limits.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="t"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.CubicInterp(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a cubic interpolation.
            </summary>
            <param name="p0">The first point.</param>
            <param name="t0">The tangent direction at first point.</param>
            <param name="p1">The second point.</param>
            <param name="t1">The tangent direction at second point.</param>
            <param name="alpha">The distance along the spline.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpEaseIn(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Interpolate between A and B, applying an ease in function. Exponent controls the degree of the curve.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpEaseOut(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Interpolate between A and B, applying an ease out function. Exponent controls the degree of the curve.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpEaseInOut(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Interpolate between A and B, applying an ease in/out function. Exponent controls the degree of the curve.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpSinIn(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying a sinusoidal in function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpSinOut(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying a sinusoidal out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpSinInOut(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying a sinusoidal in/out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpExpoIn(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying an exponential in function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpExpoOut(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying an exponential out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpExpoInOut(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying an exponential in/out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpCircularIn(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying a circular in function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpCircularOut(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying a circular out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpCircularInOut(System.Single,System.Single,System.Single)">
            <summary>
            Interpolation between A and B, applying a circular in/out function.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.Map(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Maps the specified value from the given range into another.
            </summary>
            <param name="value">The value to map from range [fromMin; fromMax].</param>
            <param name="fromMin">The source range minimum value.</param>
            <param name="fromMax">The source range maximum value.</param>
            <param name="toMin">The destination range minimum value.</param>
            <param name="toMax">The destination range maximum value.</param>
            <returns>The mapped value in range [toMin; toMax].</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.IsPowerOfTwo(System.Int32)">
            <summary>
            Determines whether the specified x is pow of 2.
            </summary>
            <param name="x">The x.</param>
            <returns><c>true</c> if the specified x is pow2; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.NextPowerOfTwo(System.Int32)">
            <summary>
            Get the next power of two for a size.
            </summary>
            <param name="size">The size.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.NextPowerOfTwo(System.Single)">
            <summary>
            Get the next power of two for a size.
            </summary>
            <param name="size">The size.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.SRgbToLinear(System.Single)">
            <summary>
            Converts a float value from sRGB to linear.
            </summary>
            <param name="sRgbValue">The sRGB value.</param>
            <returns>A linear value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.LinearToSRgb(System.Single)">
            <summary>
            Converts a float value from linear to sRGB.
            </summary>
            <param name="linearValue">The linear value.</param>
            <returns>The encoded sRGB value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Sqrt(System.Single)">
            <summary>
            Returns square root of f.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.Square(System.Int32)">
            <summary>
            Returns square of the given value.
            </summary>
            <param name="f">The value.</param>
            <returns>The value * value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Square(System.Double)">
            <summary>
            Returns square of the given value.
            </summary>
            <param name="f">The value.</param>
            <returns>The value * value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Square(System.Single)">
            <summary>
            Returns square of the given value.
            </summary>
            <param name="f">The value.</param>
            <returns>The value * value.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Tan(System.Single)">
            <summary>
            Returns the tangent of angle f in radians.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:FlaxEngine.Mathf.NearEqual(System.Single,System.Single)">
            <summary>
            Checks if a and b are almost equals, taking into account the magnitude of floating point numbers (unlike <see cref="M:FlaxEngine.Mathf.WithinEpsilon(System.Single,System.Single,System.Single)" /> method).
            </summary>
            <param name="a">The left value to compare.</param>
            <param name="b">The right value to compare.</param>
            <returns><c>true</c> if a almost equal to b, <c>false</c> otherwise</returns>
            <remarks>The code is using the technique described by Bruce Dawson in <a href="http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/">Comparing Floating point numbers 2012 edition</a>.</remarks>
        </member>
        <member name="M:FlaxEngine.Mathf.NearEqual(System.Double,System.Double)">
            <summary>
            Checks if a and b are almost equals, taking into account the magnitude of floating point numbers .
            See remarks.
            </summary>
            <param name="a">The left value to compare.</param>
            <param name="b">The right value to compare.</param>
            <returns><c>true</c> if a almost equal to b, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.IsZero(System.Single)">
            <summary>
            Determines whether the specified value is close to zero (0.0f).
            </summary>
            <param name="a">The floating value.</param>
            <returns><c>true</c> if the specified value is close to zero (0.0f); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.IsOne(System.Single)">
            <summary>
            Determines whether the specified value is close to one (1.0f).
            </summary>
            <param name="a">The floating value.</param>
            <returns><c>true</c> if the specified value is close to one (1.0f); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.WithinEpsilon(System.Single,System.Single,System.Single)">
            <summary>
            Checks if a - b are almost equals within a float epsilon.
            </summary>
            <param name="a">The left value to compare.</param>
            <param name="b">The right value to compare.</param>
            <param name="epsilon">Epsilon value</param>
            <returns><c>true</c> if a almost equal to b within a float epsilon, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.IsInRange(System.Single,System.Single,System.Single)">
            <summary>
            Determines whether the specified value is in a given range [min; max].
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns><c>true</c> if the specified value is in a given range; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.IsNotInRange(System.Single,System.Single,System.Single)">
            <summary>
            Determines whether the specified value is NOT in a given range [min; max].
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns><c>true</c> if the specified value is NOT in a given range; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.IsInRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the specified value is in a given range [min; max].
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns><c>true</c> if the specified value is in a given range; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.IsNotInRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the specified value is NOT in a given range [min; max].
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns><c>true</c> if the specified value is NOT in a given range; otherwise, <c>false</c>.</returns>
        </member>
        <member name="F:FlaxEngine.Mathf.RevolutionsToDegrees">
            <summary>
            Converts revolutions to degrees.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.RevolutionsToRadians">
            <summary>
            Converts revolutions to radians.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.RevolutionsToGradians">
            <summary>
            Converts revolutions to gradians.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.DegreesToRevolutions">
            <summary>
            Converts degrees to revolutions.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.DegreesToRadians">
            <summary>
            Converts degrees to radians.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.RadiansToRevolutions">
            <summary>
            Converts radians to revolutions.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.RadiansToGradians">
            <summary>
            Converts radians to gradians.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.GradiansToRevolutions">
            <summary>
            Converts gradians to revolutions.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.GradiansToDegrees">
            <summary>
            Converts gradians to degrees.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.GradiansToRadians">
            <summary>
            Converts gradians to radians.
            </summary>
        </member>
        <member name="F:FlaxEngine.Mathf.RadiansToDegrees">
            <summary>
            Converts radians to degrees.
            </summary>
        </member>
        <member name="M:FlaxEngine.Mathf.UnwindRadians(System.Single)">
            <summary>
            Given a heading which may be outside the +/- PI range, 'unwind' it back into that range.
            </summary>
            <param name="angle">Angle in radians to unwind.</param>
            <returns>Valid angle in radians.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.UnwindDegrees(System.Single)">
            <summary>
            Utility to ensure angle is between +/- 180 degrees by unwinding
            </summary>
            <param name="angle">Angle in degrees to unwind.</param>
            <returns>Valid angle in degrees.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Clamp(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Clamp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Clamps the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result of clamping a value between min and max</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Interpolates between two values using a linear function by a given amount.
            </summary>
            <remarks>
            See http://www.encyclopediaofmath.org/index.php/Linear_interpolation and
            http://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/
            </remarks>
            <param name="from">Value to interpolate from.</param>
            <param name="to">Value to interpolate to.</param>
            <param name="amount">Interpolation amount.</param>
            <returns>The result of linear interpolation of values based on the amount.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between two values using a linear function by a given amount.
            </summary>
            <remarks>
            See http://www.encyclopediaofmath.org/index.php/Linear_interpolation and
            http://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/
            </remarks>
            <param name="from">Value to interpolate from.</param>
            <param name="to">Value to interpolate to.</param>
            <param name="amount">Interpolation amount.</param>
            <returns>The result of linear interpolation of values based on the amount.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Lerp(System.Int32,System.Int32,System.Single)">
            <summary>
            Interpolates between two values using a linear function by a given amount.
            </summary>
            <remarks>
            See http://www.encyclopediaofmath.org/index.php/Linear_interpolation and
            http://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/
            </remarks>
            <param name="from">Value to interpolate from.</param>
            <param name="to">Value to interpolate to.</param>
            <param name="amount">Interpolation amount.</param>
            <returns>The result of linear interpolation of values based on the amount.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Lerp(System.Byte,System.Byte,System.Single)">
            <summary>
            Interpolates between two values using a linear function by a given amount.
            </summary>
            <remarks>
            See http://www.encyclopediaofmath.org/index.php/Linear_interpolation and
            http://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/
            </remarks>
            <param name="from">Value to interpolate from.</param>
            <param name="to">Value to interpolate to.</param>
            <param name="amount">Interpolation amount.</param>
            <returns>The result of linear interpolation of values based on the amount.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.SmoothStep(System.Single)">
            <summary>
            Performs smooth (cubic Hermite) interpolation between 0 and 1.
            </summary>
            <remarks>
            See https://en.wikipedia.org/wiki/Smoothstep
            </remarks>
            <param name="amount">Value between 0 and 1 indicating interpolation amount.</param>
        </member>
        <member name="M:FlaxEngine.Mathf.SmootherStep(System.Single)">
            <summary>
            Performs a smooth(er) interpolation between 0 and 1 with 1st and 2nd order derivatives of zero at endpoints.
            </summary>
            <remarks>
            See https://en.wikipedia.org/wiki/Smoothstep
            </remarks>
            <param name="amount">Value between 0 and 1 indicating interpolation amount.</param>
        </member>
        <member name="M:FlaxEngine.Mathf.Mod(System.Single,System.Single)">
            <summary>
            Calculates the modulo of the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="modulo">The modulo.</param>
            <returns>The result of the modulo applied to value</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Mod2PI(System.Single)">
            <summary>
            Calculates the modulo 2*PI of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the modulo applied to value</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Wrap(System.Int32,System.Int32,System.Int32)">
            <summary>
            Wraps the specified value into a range [min, max]
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>Result of the wrapping.</returns>
            <exception cref="T:System.ArgumentException">Is thrown when <paramref name="min" /> is greater than <paramref name="max" />.</exception>
        </member>
        <member name="M:FlaxEngine.Mathf.Wrap(System.Single,System.Single,System.Single)">
            <summary>
            Wraps the specified value into a range [min, max]
            </summary>
            <param name="value">The value.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>Result of the wrapping.</returns>
            <exception cref="T:System.ArgumentException">Is thrown when <paramref name="min" /> is greater than <paramref name="max" />.</exception>
        </member>
        <member name="M:FlaxEngine.Mathf.Gauss(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gauss function.
            http://en.wikipedia.org/wiki/Gaussian_function#Two-dimensional_Gaussian_function
            </summary>
            <param name="amplitude">Curve amplitude.</param>
            <param name="x">Position X.</param>
            <param name="y">Position Y</param>
            <param name="centerX">Center X.</param>
            <param name="centerY">Center Y.</param>
            <param name="sigmaX">Curve sigma X.</param>
            <param name="sigmaY">Curve sigma Y.</param>
            <returns>The result of Gaussian function.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.Gauss(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gauss function.
            http://en.wikipedia.org/wiki/Gaussian_function#Two-dimensional_Gaussian_function
            </summary>
            <param name="amplitude">Curve amplitude.</param>
            <param name="x">Position X.</param>
            <param name="y">Position Y</param>
            <param name="centerX">Center X.</param>
            <param name="centerY">Center Y.</param>
            <param name="sigmaX">Curve sigma X.</param>
            <param name="sigmaY">Curve sigma Y.</param>
            <returns>The result of Gaussian function.</returns>
        </member>
        <member name="M:FlaxEngine.Mathf.InterpolateAlphaBlend(System.Single,FlaxEngine.AlphaBlendMode)">
            <summary>
            Converts the input alpha value from a linear 0-1 value into the output alpha described by blend mode.
            </summary>
            <param name="alpha">The alpha (normalized to 0-1).</param>
            <param name="mode">The mode.</param>
            <returns>The output alpha (normalized to 0-1).</returns>
        </member>
        <member name="T:FlaxEngine.Matrix2x2">
            <summary>
            Represents a 2x2 Matrix (contains only scale and rotation in 2D).
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix2x2.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Matrix2x2"/> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix2x2.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Matrix2x2"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix2x2.Identity">
            <summary>
            The identity <see cref="T:FlaxEngine.Matrix2x2"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix2x2.M11">
            <summary>
            Value at row 1 column 1 of the Matrix2x2.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix2x2.M12">
            <summary>
            Value at row 1 column 2 of the Matrix2x2.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix2x2.M21">
            <summary>
            Value at row 2 column 1 of the Matrix2x2.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix2x2.M22">
            <summary>
            Value at row 2 column 2 of the Matrix2x2.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix2x2"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix2x2"/> struct.
            </summary>
            <param name="m11">The value to assign at row 1 column 1 of the Matrix2x2.</param>
            <param name="m12">The value to assign at row 1 column 2 of the Matrix2x2.</param>
            <param name="m21">The value to assign at row 2 column 1 of the Matrix2x2.</param>
            <param name="m22">The value to assign at row 2 column 2 of the Matrix2x2.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix2x2"/> struct.
            </summary>
            <param name="values">The values to assign to the components of the Matrix2x2. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.Row1">
            <summary>
            Gets or sets the first row in the Matrix2x2; that is M11, M12
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.Row2">
            <summary>
            Gets or sets the second row in the Matrix2x2; that is M21, M22
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.Column1">
            <summary>
            Gets or sets the first column in the Matrix2x2; that is M11, M21
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.Column2">
            <summary>
            Gets or sets the second column in the Matrix2x2; that is M12, M22
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.ScaleVector">
            <summary>
            Gets or sets the scale of the Matrix2x2; that is M11, M22.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity Matrix2x2.
            </summary>
            <value>
            <c>true</c> if this instance is an identity Matrix2x2; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the Matrix2x2 component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="P:FlaxEngine.Matrix2x2.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the Matrix2x2 component, depending on the index.</value>
            <param name="row">The row of the Matrix2x2 to access.</param>
            <param name="column">The column of the Matrix2x2 to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>is out of the range [0, 1].</exception>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Determinant">
            <summary>
            Calculates the determinant of the Matrix2x2.
            </summary>
            <returns>The determinant of the Matrix2x2.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.InverseDeterminant">
            <summary>
            Calculates inverse of the determinant of the Matrix2x2.
            </summary>
            <returns>The inverse determinant of the Matrix2x2.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.ToArray">
            <summary>
            Creates an array containing the elements of the Matrix2x2.
            </summary>
            <returns>A 4-element array containing the components of the Matrix2x2.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Scale(System.Single,FlaxEngine.Matrix2x2@)">
            <summary>
            Creates the uniform scale matrix.
            </summary>
            <param name="scale">The scale.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Scale(System.Single,System.Single,FlaxEngine.Matrix2x2@)">
            <summary>
            Creates the scale matrix.
            </summary>
            <param name="scaleX">The scale x.</param>
            <param name="scaleY">The scale y.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Scale(FlaxEngine.Vector2@,FlaxEngine.Matrix2x2@)">
            <summary>
            Creates the scale matrix.
            </summary>
            <param name="scale">The scale vector.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Shear(FlaxEngine.Vector2@,FlaxEngine.Matrix2x2@)">
            <summary>
            Creates the shear matrix. Represented by:
            [1 Y]
            [X 1]
            </summary>
            <param name="shearAngles">The shear angles.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Rotation(System.Single,FlaxEngine.Matrix2x2@)">
            <summary>
            Creates the rotation matrix.
            </summary>
            <param name="rotationRadians">The rotation angle (in radians).</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Transform(FlaxEngine.Vector2@,FlaxEngine.Matrix2x2@,FlaxEngine.Vector2@)">
            <summary>
            Transforms the specified vector by the given matrix.
            </summary>
            <param name="vector">The vector.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Multiply(FlaxEngine.Matrix2x2@,FlaxEngine.Matrix2x2@,FlaxEngine.Matrix2x2@)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first Matrix2x2 to multiply.</param>
            <param name="right">The second Matrix2x2 to multiply.</param>
            <param name="result">The product of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Invert(FlaxEngine.Matrix2x2@,FlaxEngine.Matrix2x2@)">
            <summary>
            Calculates the inverse of the specified Matrix2x2.
            </summary>
            <param name="value">The Matrix2x2 whose inverse is to be calculated.</param>
            <param name="result">When the method completes, contains the inverse of the specified Matrix2x2.</param>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.op_Equality(FlaxEngine.Matrix2x2,FlaxEngine.Matrix2x2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.op_Inequality(FlaxEngine.Matrix2x2,FlaxEngine.Matrix2x2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.op_Explicit(FlaxEngine.Matrix2x2)~FlaxEngine.Matrix">
            <summary>
            Convert the 2x2 Matrix to a 4x4 Matrix.
            </summary>
            <returns>A 4x4 Matrix with zero translation and M44=1</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.op_Explicit(FlaxEngine.Matrix)~FlaxEngine.Matrix2x2">
            <summary>
            Convert the 4x4 Matrix to a 3x3 Matrix.
            </summary>
            <returns>A 2x2 Matrix</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.op_Explicit(FlaxEngine.Matrix2x2)~FlaxEngine.Matrix3x3">
            <summary>
            Convert the 2x2 Matrix to a 4x4 Matrix.
            </summary>
            <returns>A 3x3 Matrix with zero translation and M44=1</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.op_Explicit(FlaxEngine.Matrix3x3)~FlaxEngine.Matrix2x2">
            <summary>
            Convert the 3x3 Matrix to a 2x2 Matrix.
            </summary>
            <returns>A 2x2 Matrix</returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Equals(FlaxEngine.Matrix2x2@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix2x2"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Matrix2x2"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Matrix2x2"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Equals(FlaxEngine.Matrix2x2)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix2x2"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Matrix2x2"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Matrix2x2"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Equals(FlaxEngine.Matrix2x2@,FlaxEngine.Matrix2x2@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix2x2"/> are equal.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix2x2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.Matrix3x3">
            <summary>
            Represents a 3x3 Matrix ( contains only Scale and Rotation ).
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.Matrix3x3"/> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.Zero">
            <summary>
            A <see cref="T:FlaxEngine.Matrix3x3"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.Identity">
            <summary>
            The identity <see cref="T:FlaxEngine.Matrix3x3"/>.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M11">
            <summary>
            Value at row 1 column 1 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M12">
            <summary>
            Value at row 1 column 2 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M13">
            <summary>
            Value at row 1 column 3 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M21">
            <summary>
            Value at row 2 column 1 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M22">
            <summary>
            Value at row 2 column 2 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M23">
            <summary>
            Value at row 2 column 3 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M31">
            <summary>
            Value at row 3 column 1 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M32">
            <summary>
            Value at row 3 column 2 of the Matrix3x3.
            </summary>
        </member>
        <member name="F:FlaxEngine.Matrix3x3.M33">
            <summary>
            Value at row 3 column 3 of the Matrix3x3.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix3x3"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix3x3"/> struct.
            </summary>
            <param name="m11">The value to assign at row 1 column 1 of the Matrix3x3.</param>
            <param name="m12">The value to assign at row 1 column 2 of the Matrix3x3.</param>
            <param name="m13">The value to assign at row 1 column 3 of the Matrix3x3.</param>
            <param name="m21">The value to assign at row 2 column 1 of the Matrix3x3.</param>
            <param name="m22">The value to assign at row 2 column 2 of the Matrix3x3.</param>
            <param name="m23">The value to assign at row 2 column 3 of the Matrix3x3.</param>
            <param name="m31">The value to assign at row 3 column 1 of the Matrix3x3.</param>
            <param name="m32">The value to assign at row 3 column 2 of the Matrix3x3.</param>
            <param name="m33">The value to assign at row 3 column 3 of the Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Matrix3x3"/> struct.
            </summary>
            <param name="values">The values to assign to the components of the Matrix3x3. This must be an array with nine elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than nine elements.</exception>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Row1">
            <summary>
            Gets or sets the first row in the Matrix3x3; that is M11, M12, M13
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Row2">
            <summary>
            Gets or sets the second row in the Matrix3x3; that is M21, M22, M23
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Row3">
            <summary>
            Gets or sets the third row in the Matrix3x3; that is M31, M32, M33
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Column1">
            <summary>
            Gets or sets the first column in the Matrix3x3; that is M11, M21, M31
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Column2">
            <summary>
            Gets or sets the second column in the Matrix3x3; that is M12, M22, M32
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Column3">
            <summary>
            Gets or sets the third column in the Matrix3x3; that is M13, M23, M33
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.ScaleVector">
            <summary>
            Gets or sets the scale of the Matrix3x3; that is M11, M22, and M33.
            </summary>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity Matrix3x3.
            </summary>
            <value>
            <c>true</c> if this instance is an identity Matrix3x3; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the Matrix3x3 component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 15].</exception>
        </member>
        <member name="P:FlaxEngine.Matrix3x3.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the Matrix3x3 component, depending on the index.</value>
            <param name="row">The row of the Matrix3x3 to access.</param>
            <param name="column">The column of the Matrix3x3 to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>is out of the range [0, 3].</exception>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Determinant">
            <summary>
            Calculates the determinant of the Matrix3x3.
            </summary>
            <returns>The determinant of the Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Invert">
            <summary>
            Inverts the Matrix3x3.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Transpose">
            <summary>
            Transposes the Matrix3x3.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Orthogonalize">
            <summary>
            Orthogonalizes the specified Matrix3x3.
            </summary>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the Matrix3x3 will be orthogonal to any other given row in the
            Matrix3x3.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Orthonormalize">
            <summary>
            Orthonormalizes the specified Matrix3x3.
            </summary>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.DecomposeQR(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Decomposes a Matrix3x3 into an orthonormalized Matrix3x3 q and a right triangular Matrix3x3 r.
            </summary>
            <param name="q">When the method completes, contains the orthonormalized Matrix3x3 of the decomposition.</param>
            <param name="r">When the method completes, contains the right triangular Matrix3x3 of the decomposition.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.DecomposeLQ(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Decomposes a Matrix3x3 into a lower triangular Matrix3x3 l and an orthonormalized Matrix3x3 q.
            </summary>
            <param name="l">When the method completes, contains the lower triangular Matrix3x3 of the decomposition.</param>
            <param name="q">When the method completes, contains the orthonormalized Matrix3x3 of the decomposition.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Decompose(FlaxEngine.Vector3@,FlaxEngine.Quaternion@)">
            <summary>
            Decomposes a Matrix3x3 into a scale, rotation, and translation.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed Matrix3x3.</param>
            <param name="rotation">When the method completes, contains the rotation component of the decomposed Matrix3x3.</param>
            <remarks>
            This method is designed to decompose an SRT transformation Matrix3x3 only.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.DecomposeUniformScale(System.Single@,FlaxEngine.Quaternion@)">
            <summary>
            Decomposes a uniform scale matrix into a scale, rotation, and translation.
            A uniform scale matrix has the same scale in every axis.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rotation component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose only an SRT transformation matrix that has the same scale in every axis.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.ExchangeRows(System.Int32,System.Int32)">
            <summary>
            Exchanges two rows in the Matrix3x3.
            </summary>
            <param name="firstRow">The first row to exchange. This is an index of the row starting at zero.</param>
            <param name="secondRow">The second row to exchange. This is an index of the row starting at zero.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.ExchangeColumns(System.Int32,System.Int32)">
            <summary>
            Exchanges two columns in the Matrix3x3.
            </summary>
            <param name="firstColumn">The first column to exchange. This is an index of the column starting at zero.</param>
            <param name="secondColumn">The second column to exchange. This is an index of the column starting at zero.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.ToArray">
            <summary>
            Creates an array containing the elements of the Matrix3x3.
            </summary>
            <returns>A 9-element array containing the components of the Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Add(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to add.</param>
            <param name="right">The second Matrix3x3 to add.</param>
            <param name="result">When the method completes, contains the sum of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Add(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to add.</param>
            <param name="right">The second Matrix3x3 to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Subtract(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to subtract.</param>
            <param name="right">The second Matrix3x3 to subtract.</param>
            <param name="result">When the method completes, contains the difference between the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Subtract(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to subtract.</param>
            <param name="right">The second Matrix3x3 to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Multiply(FlaxEngine.Matrix3x3@,System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Multiply(FlaxEngine.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Multiply(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to multiply.</param>
            <param name="right">The second Matrix3x3 to multiply.</param>
            <param name="result">The product of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Multiply(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to multiply.</param>
            <param name="right">The second Matrix3x3 to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Divide(FlaxEngine.Matrix3x3@,System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Divide(FlaxEngine.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by the given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Divide(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to divide.</param>
            <param name="right">The second Matrix3x3 to divide.</param>
            <param name="result">When the method completes, contains the quotient of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Divide(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to divide.</param>
            <param name="right">The second Matrix3x3 to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Exponent(FlaxEngine.Matrix3x3@,System.Int32,FlaxEngine.Matrix3x3@)">
            <summary>
            Performs the exponential operation on a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to perform the operation on.</param>
            <param name="exponent">The exponent to raise the Matrix3x3 to.</param>
            <param name="result">When the method completes, contains the exponential Matrix3x3.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Exponent(FlaxEngine.Matrix3x3,System.Int32)">
            <summary>
            Performs the exponential operation on a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to perform the operation on.</param>
            <param name="exponent">The exponent to raise the Matrix3x3 to.</param>
            <returns>The exponential Matrix3x3.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Negate(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Negates a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to be negated.</param>
            <param name="result">When the method completes, contains the negated Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Negate(FlaxEngine.Matrix3x3)">
            <summary>
            Negates a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to be negated.</param>
            <returns>The negated Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Lerp(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@,System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Performs a linear interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two matrices.</param>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Lerp(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3,System.Single)">
            <summary>
            Performs a linear interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two matrices.</returns>
            <remarks>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.SmoothStep(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@,System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two matrices.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.SmoothStep(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3,System.Single)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start Matrix3x3.</param>
            <param name="end">End Matrix3x3.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Transpose(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Calculates the transpose of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.TransposeByRef(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Calculates the transpose of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Transpose(FlaxEngine.Matrix3x3)">
            <summary>
            Calculates the transpose of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose transpose is to be calculated.</param>
            <returns>The transpose of the specified Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Invert(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Calculates the inverse of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose inverse is to be calculated.</param>
            <param name="result">When the method completes, contains the inverse of the specified Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Invert(FlaxEngine.Matrix3x3)">
            <summary>
            Calculates the inverse of the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 whose inverse is to be calculated.</param>
            <returns>The inverse of the specified Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Orthogonalize(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Orthogonalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthogonalize.</param>
            <param name="result">When the method completes, contains the orthogonalized Matrix3x3.</param>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the Matrix3x3 will be orthogonal to any other given row in the
            Matrix3x3.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Orthogonalize(FlaxEngine.Matrix3x3)">
            <summary>
            Orthogonalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthogonalize.</param>
            <returns>The orthogonalized Matrix3x3.</returns>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the Matrix3x3 will be orthogonal to any other given row in the
            Matrix3x3.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Orthonormalize(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Orthonormalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthonormalize.</param>
            <param name="result">When the method completes, contains the orthonormalized Matrix3x3.</param>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Orthonormalize(FlaxEngine.Matrix3x3)">
            <summary>
            Orthonormalizes the specified Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to orthonormalize.</param>
            <returns>The orthonormalized Matrix3x3.</returns>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting Matrix3x3
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the Matrix3x3 rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.UpperTriangularForm(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Brings the Matrix3x3 into upper triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into upper triangular form.</param>
            <param name="result">When the method completes, contains the upper triangular Matrix3x3.</param>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.UpperTriangularForm(FlaxEngine.Matrix3x3)">
            <summary>
            Brings the Matrix3x3 into upper triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into upper triangular form.</param>
            <returns>The upper triangular Matrix3x3.</returns>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.LowerTriangularForm(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Brings the Matrix3x3 into lower triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into lower triangular form.</param>
            <param name="result">When the method completes, contains the lower triangular Matrix3x3.</param>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.LowerTriangularForm(FlaxEngine.Matrix3x3)">
            <summary>
            Brings the Matrix3x3 into lower triangular form using elementary row operations.
            </summary>
            <param name="value">The Matrix3x3 to put into lower triangular form.</param>
            <returns>The lower triangular Matrix3x3.</returns>
            <remarks>
            If the Matrix3x3 is not invertible (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the Matrix3x3 represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RowEchelonForm(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Brings the Matrix3x3 into row echelon form using elementary row operations;
            </summary>
            <param name="value">The Matrix3x3 to put into row echelon form.</param>
            <param name="result">When the method completes, contains the row echelon form of the Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RowEchelonForm(FlaxEngine.Matrix3x3)">
            <summary>
            Brings the Matrix3x3 into row echelon form using elementary row operations;
            </summary>
            <param name="value">The Matrix3x3 to put into row echelon form.</param>
            <returns>When the method completes, contains the row echelon form of the Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Billboard(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Billboard(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a left-handed spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.LookAt(FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Vector3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a left-handed, look-at Matrix3x3.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.LookAt(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates a left-handed, look-at Matrix3x3.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Scaling(FlaxEngine.Vector3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <param name="result">When the method completes, contains the created scaling Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Scaling(FlaxEngine.Vector3)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and z-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <returns>The created scaling Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Scaling(System.Single,System.Single,System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and z-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <param name="result">When the method completes, contains the created scaling Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Scaling(System.Single,System.Single,System.Single)">
            <summary>
            Creates a Matrix3x3 that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <returns>The created scaling Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Scaling(System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that uniformly scales along all three axes.
            </summary>
            <param name="scale">The uniform scale that is applied along all axes.</param>
            <param name="result">When the method completes, contains the created scaling Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Scaling(System.Single)">
            <summary>
            Creates a Matrix3x3 that uniformly scales along all three axes.
            </summary>
            <param name="scale">The uniform scale that is applied along all axes.</param>
            <returns>The created scaling Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Shear(FlaxEngine.Vector2@,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates the 2D shear matrix. Represented by:
            [1 Y 0]
            [X 1 0]
            [0 0 1]
            </summary>
            <param name="shearAngles">The shear angles (in degrees).</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationX(System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationX(System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationY(System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationY(System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationZ(System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationZ(System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationAxis(FlaxEngine.Vector3@,System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a Matrix3x3 that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationAxis(FlaxEngine.Vector3,System.Single)">
            <summary>
            Creates a Matrix3x3 that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationQuaternion(FlaxEngine.Quaternion@,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a rotation Matrix3x3 from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the Matrix3x3.</param>
            <param name="result">The created rotation Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationQuaternion(FlaxEngine.Quaternion)">
            <summary>
            Creates a rotation Matrix3x3 from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the Matrix3x3.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationYawPitchRoll(System.Single,System.Single,System.Single,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates a rotation Matrix3x3 with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <param name="result">When the method completes, contains the created rotation Matrix3x3.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a rotation Matrix3x3 with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <returns>The created rotation Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Translation2D(FlaxEngine.Vector2@,FlaxEngine.Matrix3x3@)">
            <summary>
            Creates 2D translation matrix.
            </summary>
            <param name="translation">The translation vector.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Translation2D(FlaxEngine.Vector2)">
            <summary>
            Creates 2D translation matrix.
            </summary>
            <param name="translation">The translation vector.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Translation2D(System.Single,System.Single)">
            <summary>
            Creates 2D translation matrix.
            </summary>
            <param name="x">The translation vector X.</param>
            <param name="y">The translation vector Y.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Transform2D(FlaxEngine.Vector2@,FlaxEngine.Matrix3x3@,FlaxEngine.Vector2@)">
            <summary>
            Transforms given vector by the matrix (in 2D).
            </summary>
            <param name="vector">The vector.</param>
            <param name="transform">The transform.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Transform2D(FlaxEngine.Vector2,FlaxEngine.Matrix3x3)">
            <summary>
            Transforms given vector by the matrix (in 2D).
            </summary>
            <param name="vector">The vector.</param>
            <param name="transform">The transform.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Addition(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to add.</param>
            <param name="right">The second Matrix3x3 to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_UnaryPlus(FlaxEngine.Matrix3x3)">
            <summary>
            Assert a Matrix3x3 (return it unchanged).
            </summary>
            <param name="value">The Matrix3x3 to assert (unchanged).</param>
            <returns>The asserted (unchanged) Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Subtraction(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Subtracts two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to subtract.</param>
            <param name="right">The second Matrix3x3 to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_UnaryNegation(FlaxEngine.Matrix3x3)">
            <summary>
            Negates a Matrix3x3.
            </summary>
            <param name="value">The Matrix3x3 to negate.</param>
            <returns>The negated Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Multiply(System.Single,FlaxEngine.Matrix3x3)">
            <summary>
            Scales a Matrix3x3 by a given value.
            </summary>
            <param name="right">The Matrix3x3 to scale.</param>
            <param name="left">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Multiply(FlaxEngine.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by a given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Multiply(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to multiply.</param>
            <param name="right">The second Matrix3x3 to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Division(FlaxEngine.Matrix3x3,System.Single)">
            <summary>
            Scales a Matrix3x3 by a given value.
            </summary>
            <param name="left">The Matrix3x3 to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled Matrix3x3.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Division(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Divides two matrices.
            </summary>
            <param name="left">The first Matrix3x3 to divide.</param>
            <param name="right">The second Matrix3x3 to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Equality(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Inequality(FlaxEngine.Matrix3x3,FlaxEngine.Matrix3x3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Explicit(FlaxEngine.Matrix3x3)~FlaxEngine.Matrix">
            <summary>
            Convert the 3x3 Matrix to a 4x4 Matrix.
            </summary>
            <returns>A 4x4 Matrix with zero translation and M44=1</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.op_Explicit(FlaxEngine.Matrix)~FlaxEngine.Matrix3x3">
            <summary>
            Convert the 4x4 Matrix to a 3x3 Matrix.
            </summary>
            <returns>A 3x3 Matrix</returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Equals(FlaxEngine.Matrix3x3@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix3x3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Matrix3x3"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Matrix3x3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Equals(FlaxEngine.Matrix3x3)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix3x3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Matrix3x3"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Matrix3x3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Equals(FlaxEngine.Matrix3x3@,FlaxEngine.Matrix3x3@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Matrix3x3"/> are equal.
            </summary>
        </member>
        <member name="M:FlaxEngine.Matrix3x3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.OrientedBoundingBox">
            <summary>
            OrientedBoundingBox (OBB) is a rectangular block, much like an AABB (BoundingBox) but with an arbitrary orientation.
            </summary>
        </member>
        <member name="F:FlaxEngine.OrientedBoundingBox.Extents">
            <summary>
            Half lengths of the box along each axis.
            </summary>
        </member>
        <member name="F:FlaxEngine.OrientedBoundingBox.Transformation">
            <summary>
            The matrix which aligns and scales the box, and its translation vector represents the center of the box.
            </summary>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.#ctor(FlaxEngine.BoundingBox)">
            <summary>
            Creates an <see cref="T:FlaxEngine.OrientedBoundingBox" /> from a BoundingBox.
            </summary>
            <param name="bb">The BoundingBox to create from.</param>
            <remarks>Initially, the OBB is axis-aligned box, but it can be rotated and transformed later.</remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.#ctor(FlaxEngine.Vector3,FlaxEngine.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.OrientedBoundingBox"/> struct.
            </summary>
            <param name="extents">The half lengths of the box along each axis.</param>
            <param name="transformation">The matrix which aligns and scales the box, and its translation vector represents the center of the box.</param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.#ctor(FlaxEngine.Vector3,FlaxEngine.Vector3)">
            <summary>
            Creates an <see cref="T:FlaxEngine.OrientedBoundingBox" /> which contained between two minimum and maximum points.
            </summary>
            <param name="minimum">The minimum vertex of the bounding box.</param>
            <param name="maximum">The maximum vertex of the bounding box.</param>
            <remarks>Initially, the OrientedBoundingBox is axis-aligned box, but it can be rotated and transformed later.</remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.#ctor(FlaxEngine.Vector3[])">
            <summary>
            Creates an <see cref="T:FlaxEngine.OrientedBoundingBox" /> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <remarks>This method is not for computing the best tight-fitting OrientedBoundingBox. And initially, the OrientedBoundingBox is axis-aligned box, but it can be rotated and transformed later.</remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetCorners">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <returns>An array of points representing the eight corners of the bounding box.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetCorners(FlaxEngine.Vector3[])">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <param name="corners">An array of points representing the eight corners of the bounding box.</param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetCorners(FlaxEngine.Vector3*)">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <param name="corners">An array of points representing the eight corners of the bounding box.</param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetCorners(System.Collections.Generic.List{FlaxEngine.Vector3})">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <param name="corners">An collection to add the corners of the bounding box.</param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Transform(FlaxEngine.Matrix@)">
            <summary>
            Transforms this box using a transformation matrix.
            </summary>
            <param name="mat">The transformation matrix.</param>
            <remarks>
            While any kind of transformation can be applied, it is recommended to apply scaling using scale method instead, which
            scales the Extents and keeps the Transformation matrix for rotation only, and that preserves collision detection accuracy.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Transform(FlaxEngine.Matrix)">
            <summary>
            Transforms this box using a transformation matrix.
            </summary>
            <param name="mat">The transformation matrix.</param>
            <remarks>
            While any kind of transformation can be applied, it is recommended to apply scaling using scale method instead, which
            scales the Extents and keeps the Transformation matrix for rotation only, and that preserves collision detection accuracy.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Scale(FlaxEngine.Vector3@)">
            <summary>
            Scales the <see cref="T:FlaxEngine.OrientedBoundingBox" /> by scaling its Extents without affecting the Transformation matrix,
            By keeping Transformation matrix scaling-free, the collision detection methods will be more accurate.
            </summary>
            <param name="scaling"></param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Scale(FlaxEngine.Vector3)">
            <summary>
            Scales the <see cref="T:FlaxEngine.OrientedBoundingBox" /> by scaling its Extents without affecting the Transformation matrix,
            By keeping Transformation matrix scaling-free, the collision detection methods will be more accurate.
            </summary>
            <param name="scaling"></param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Scale(System.Single)">
            <summary>
            Scales the <see cref="T:FlaxEngine.OrientedBoundingBox" /> by scaling its Extents without affecting the Transformation matrix,
            By keeping Transformation matrix scaling-free, the collision detection methods will be more accurate.
            </summary>
            <param name="scaling"></param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Translate(FlaxEngine.Vector3@)">
            <summary>
            Translates the <see cref="T:FlaxEngine.OrientedBoundingBox" /> to a new position using a translation vector;
            </summary>
            <param name="translation">the translation vector.</param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Translate(FlaxEngine.Vector3)">
            <summary>
            Translates the <see cref="T:FlaxEngine.OrientedBoundingBox" /> to a new position using a translation vector;
            </summary>
            <param name="translation">the translation vector.</param>
        </member>
        <member name="P:FlaxEngine.OrientedBoundingBox.Size">
            <summary>
            The size of the <see cref="T:FlaxEngine.OrientedBoundingBox" /> if no scaling is applied to the transformation matrix.
            </summary>
            <remarks>The property will return the actual size even if the scaling is applied using Scale method, but if the scaling is applied to transformation matrix, use GetSize Function instead.
            </remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetSize">
            <summary>
            Returns the size of the <see cref="T:FlaxEngine.OrientedBoundingBox" /> taking into consideration the scaling applied to the transformation matrix.
            </summary>
            <returns>The size of the consideration</returns>
            <remarks>This method is computationally expensive, so if no scale is applied to the transformation matrix use <see cref="P:FlaxEngine.OrientedBoundingBox.Size" /> property instead.</remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetSizeSquared">
            <summary>
            Returns the square size of the <see cref="T:FlaxEngine.OrientedBoundingBox" /> taking into consideration the scaling applied to the transformation matrix.
            </summary>
            <returns>The size of the consideration</returns>
        </member>
        <member name="P:FlaxEngine.OrientedBoundingBox.Center">
            <summary>
            Returns the center of the <see cref="T:FlaxEngine.OrientedBoundingBox" />.
            </summary>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Contains(FlaxEngine.Vector3@)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.OrientedBoundingBox" /> contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Contains(FlaxEngine.Vector3)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.OrientedBoundingBox" /> contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Contains(FlaxEngine.Vector3[])">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.OrientedBoundingBox" /> contains an array of points>.
            </summary>
            <param name="points">The points array to test.</param>
            <returns>The type of containment.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Contains(FlaxEngine.BoundingSphere,System.Boolean)">
            <summary>
            Determines whether a <see cref="T:FlaxEngine.OrientedBoundingBox" /> contains a <see cref="T:FlaxEngine.BoundingSphere" />.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="ignoreScale">Optimize the check operation by assuming that <see cref="T:FlaxEngine.OrientedBoundingBox" /> has no scaling applied.</param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>This method is not designed for <see cref="T:FlaxEngine.OrientedBoundingBox" /> which has a non-uniform scaling applied to its transformation matrix. But any type of scaling applied using Scale method will keep this method accurate.</remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Contains(FlaxEngine.OrientedBoundingBox@)">
            <summary>
            Check the intersection between two <see cref="T:FlaxEngine.OrientedBoundingBox" />
            </summary>
            <param name="obb">The OrientedBoundingBox to test.</param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>For accuracy, The transformation matrix for both <see cref="T:FlaxEngine.OrientedBoundingBox" /> must not have any scaling applied to it. Anyway, scaling using Scale method will keep this method accurate.</remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.ContainsLine(FlaxEngine.Vector3@,FlaxEngine.Vector3@)">
            <summary>
            Check the intersection between an <see cref="T:FlaxEngine.OrientedBoundingBox" /> and a line defined by two points
            </summary>
            <param name="L1">The first point in the line.</param>
            <param name="L2">The second point in the line.</param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>For accuracy, The transformation matrix for the <see cref="T:FlaxEngine.OrientedBoundingBox" /> must not have any scaling applied to it. Anyway, scaling using Scale method will keep this method accurate.</remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Contains(FlaxEngine.BoundingBox@)">
            <summary>
            Check the intersection between an <see cref="T:FlaxEngine.OrientedBoundingBox" /> and <see cref="T:FlaxEngine.BoundingBox" />
            </summary>
            <param name="box">The BoundingBox to test.</param>
            <returns>The type of containment the two objects have.</returns>
            <remarks>For accuracy, The transformation matrix for the <see cref="T:FlaxEngine.OrientedBoundingBox" /> must not have any scaling applied to it. Anyway, scaling using Scale method will keep this method accurate.</remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Intersects(FlaxEngine.Ray@,FlaxEngine.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.OrientedBoundingBox" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection, or <see cref="F:FlaxEngine.Vector3.Zero" /> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Intersects(FlaxEngine.Ray@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.OrientedBoundingBox" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of intersection from the ray start, or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Intersects(FlaxEngine.Ray@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:FlaxEngine.Ray" /> and a <see cref="T:FlaxEngine.OrientedBoundingBox" />.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetBoundingBox">
            <summary>
            Get the axis-aligned <see cref="T:FlaxEngine.BoundingBox" /> which contains all <see cref="T:FlaxEngine.OrientedBoundingBox" /> corners.
            </summary>
            <returns>The axis-aligned BoundingBox of this OrientedBoundingBox.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetBoxToBoxMatrix(FlaxEngine.OrientedBoundingBox@,FlaxEngine.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Calculates the matrix required to transfer any point from one <see cref="T:FlaxEngine.OrientedBoundingBox" /> local coordinates to another.
            </summary>
            <param name="A">The source OrientedBoundingBox.</param>
            <param name="B">The target OrientedBoundingBox.</param>
            <param name="NoMatrixScaleApplied">If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox.</param>
            <returns>The matrix.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Merge(FlaxEngine.OrientedBoundingBox@,FlaxEngine.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Merge an OrientedBoundingBox B into another OrientedBoundingBox A, by expanding A to contain B and keeping A orientation.
            </summary>
            <param name="A">The <see cref="T:FlaxEngine.OrientedBoundingBox" /> to merge into it.</param>
            <param name="B">The <see cref="T:FlaxEngine.OrientedBoundingBox" /> to be merged</param>
            <param name="NoMatrixScaleApplied">If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox.</param>
            <remarks>Unlike merging axis aligned boxes, The operation is not interchangeable, because it keeps A orientation and merge B into it.</remarks>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.MergeInto(FlaxEngine.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Merge this OrientedBoundingBox into another OrientedBoundingBox, keeping the other OrientedBoundingBox orientation.
            </summary>
            <param name="OBB">The other <see cref="T:FlaxEngine.OrientedBoundingBox" /> to merge into.</param>
            <param name="NoMatrixScaleApplied">If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox.</param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Add(FlaxEngine.OrientedBoundingBox@,System.Boolean)">
            <summary>
            Merge another OrientedBoundingBox into this OrientedBoundingBox.
            </summary>
            <param name="OBB">The other <see cref="T:FlaxEngine.OrientedBoundingBox" /> to merge into this OrientedBoundingBox.</param>
            <param name="NoMatrixScaleApplied">If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox.</param>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Equals(FlaxEngine.OrientedBoundingBox@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Equals(FlaxEngine.OrientedBoundingBox)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:FlaxEngine.Vector4" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.Vector4" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.op_Multiply(FlaxEngine.OrientedBoundingBox,FlaxEngine.Matrix)">
            <summary>
            Transforms bounding box using the given transformation matrix.
            </summary>
            <param name="box">The bounding box to transform.</param>
            <param name="transform">The transformation matrix.</param>
            <returns>The result of the transformation.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.op_Equality(FlaxEngine.OrientedBoundingBox,FlaxEngine.OrientedBoundingBox)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.op_Inequality(FlaxEngine.OrientedBoundingBox,FlaxEngine.OrientedBoundingBox)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.OrientedBoundingBox.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:FlaxEngine.SphericalHarmonics`1">
            <summary>
            A representation of a sphere of values via Spherical Harmonics (SH).
            </summary>
            <typeparam name="TDataType">The type of data contained by the sphere</typeparam>
        </member>
        <member name="F:FlaxEngine.SphericalHarmonics`1.MaximumOrder">
            <summary>
            The maximum order supported.
            </summary>
        </member>
        <member name="P:FlaxEngine.SphericalHarmonics`1.Order">
            <summary>
            The order of calculation of the spherical harmonic.
            </summary>
        </member>
        <member name="P:FlaxEngine.SphericalHarmonics`1.Coefficients">
            <summary>
            Get the coefficients defining the spherical harmonics (the spherical coordinates x{l,m} multiplying the spherical base Y{l,m}).
            </summary>
        </member>
        <member name="M:FlaxEngine.SphericalHarmonics`1.#ctor">
            <summary>
            Creates a null spherical harmonics (for serialization).
            </summary>
        </member>
        <member name="M:FlaxEngine.SphericalHarmonics`1.#ctor(System.Int32)">
            <summary>
            The desired order to
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:FlaxEngine.SphericalHarmonics`1.Evaluate(FlaxEngine.Vector3)">
            <summary>
            Evaluate the value of the spherical harmonics in the provided direction.
            </summary>
            <param name="direction">The direction</param>
            <returns>The value of the spherical harmonics in the direction</returns>
        </member>
        <member name="P:FlaxEngine.SphericalHarmonics`1.Item(System.Int32,System.Int32)">
            <summary>
            Returns the coefficient x{l,m} of the spherical harmonics (the {l,m} spherical coordinate corresponding to the spherical base Y{l,m}).
            </summary>
            <param name="l">the l index of the coefficient</param>
            <param name="m">the m index of the coefficient</param>
            <returns>the value of the coefficient</returns>
        </member>
        <member name="T:FlaxEngine.SphericalHarmonics">
            <summary>
            A spherical harmonics representation of a cubemap.
            </summary>
        </member>
        <member name="F:FlaxEngine.SphericalHarmonics.BaseCoefficients">
            <summary>
            Base coefficients for SH.
            </summary>
        </member>
        <member name="M:FlaxEngine.SphericalHarmonics.#ctor(System.Int32)">
            <summary>
            Create a new instance of Spherical Harmonics of provided order.
            </summary>
            <param name="order">The order of the harmonics</param>
        </member>
        <member name="M:FlaxEngine.SphericalHarmonics.Evaluate(FlaxEngine.Vector3)">
            <summary>
            Evaluates the color for the specified direction.
            </summary>
            <param name="direction">The direction to evaluate.</param>
            <returns>The color computed for this direction.</returns>
        </member>
        <member name="M:FlaxEngine.TypeConverters.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int2Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int2Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int2Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int3Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int3Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int3Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int4Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int4Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Int4Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.QuaternionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.QuaternionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.QuaternionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector2Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector2Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector2Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector3Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector3Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector3Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector4Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector4Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.TypeConverters.Vector4Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Viewport">
            <summary>
            Defines the viewport dimensions using float coordinates for (X,Y,Width,Height).
            </summary>
        </member>
        <member name="F:FlaxEngine.Viewport.X">
            <summary>
            Position of the pixel coordinate of the upper-left corner of the viewport.
            </summary>
        </member>
        <member name="F:FlaxEngine.Viewport.Y">
            <summary>
            Position of the pixel coordinate of the upper-left corner of the viewport.
            </summary>
        </member>
        <member name="F:FlaxEngine.Viewport.Width">
            <summary>
            Width dimension of the viewport.
            </summary>
        </member>
        <member name="F:FlaxEngine.Viewport.Height">
            <summary>
            Height dimension of the viewport.
            </summary>
        </member>
        <member name="F:FlaxEngine.Viewport.MinDepth">
            <summary>
            Gets or sets the minimum depth of the clip volume.
            </summary>
        </member>
        <member name="F:FlaxEngine.Viewport.MaxDepth">
            <summary>
            Gets or sets the maximum depth of the clip volume.
            </summary>
        </member>
        <member name="M:FlaxEngine.Viewport.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Viewport"/> struct.
            </summary>
            <param name="x">The x coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="y">The y coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="width">The width of the viewport in pixels.</param>
            <param name="height">The height of the viewport in pixels.</param>
        </member>
        <member name="M:FlaxEngine.Viewport.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Viewport"/> struct.
            </summary>
            <param name="x">The x coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="y">The y coordinate of the upper-left corner of the viewport in pixels.</param>
            <param name="width">The width of the viewport in pixels.</param>
            <param name="height">The height of the viewport in pixels.</param>
            <param name="minDepth">The minimum depth of the clip volume.</param>
            <param name="maxDepth">The maximum depth of the clip volume.</param>
        </member>
        <member name="M:FlaxEngine.Viewport.#ctor(FlaxEngine.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Viewport"/> struct.
            </summary>
            <param name="bounds">A bounding box that defines the location and size of the viewport in a render target.</param>
        </member>
        <member name="M:FlaxEngine.Viewport.#ctor(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Viewport"/> struct.
            </summary>
            <param name="location">The location of the upper-left corner of the viewport in pixels.</param>
            <param name="size">The size of the viewport in pixels.</param>
        </member>
        <member name="P:FlaxEngine.Viewport.Bounds">
            <summary>
            Gets the size of the viewport.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:FlaxEngine.Viewport.Size">
            <summary>
            Gets or sets the size of the viewport (width and height).
            </summary>
        </member>
        <member name="M:FlaxEngine.Viewport.Equals(FlaxEngine.Viewport@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Viewport"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Viewport"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Viewport"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Viewport.Equals(FlaxEngine.Viewport)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.Viewport"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.Viewport"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.Viewport"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Viewport.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.Viewport.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:FlaxEngine.Viewport.op_Equality(FlaxEngine.Viewport,FlaxEngine.Viewport)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Viewport.op_Inequality(FlaxEngine.Viewport,FlaxEngine.Viewport)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlaxEngine.Viewport.ToString">
            <summary>
            Retrieves a string representation of this object.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:FlaxEngine.Viewport.Project(FlaxEngine.Vector3,FlaxEngine.Matrix,FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Projects a 3D vector from object space into screen space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
            <returns>The projected vector.</returns>
        </member>
        <member name="M:FlaxEngine.Viewport.Project(FlaxEngine.Vector3@,FlaxEngine.Matrix@,FlaxEngine.Vector3@)">
            <summary>
            Projects a 3D vector from object space into screen space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="matrix">A combined WorldViewProjection matrix.</param>
            <param name="vector">The projected vector.</param>
        </member>
        <member name="M:FlaxEngine.Viewport.Unproject(FlaxEngine.Vector3,FlaxEngine.Matrix,FlaxEngine.Matrix,FlaxEngine.Matrix)">
            <summary>
            Converts a screen space point into a corresponding point in world space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="projection">The projection matrix.</param>
            <param name="view">The view matrix.</param>
            <param name="world">The world matrix.</param>
            <returns>The unprojected Vector.</returns>
        </member>
        <member name="M:FlaxEngine.Viewport.Unproject(FlaxEngine.Vector3@,FlaxEngine.Matrix@,FlaxEngine.Vector3@)">
            <summary>
            Converts a screen space point into a corresponding point in world space.
            </summary>
            <param name="source">The vector to project.</param>
            <param name="matrix">An inverted combined WorldViewProjection matrix.</param>
            <param name="vector">The unprojected vector.</param>
        </member>
        <member name="P:FlaxEngine.Viewport.AspectRatio">
            <summary>
            Gets the aspect ratio used by the viewport.
            </summary>
            <value>The aspect ratio.</value>
        </member>
        <member name="T:FlaxEngine.Assertions.Assert">
            <summary>
            The Assert class contains assertion methods for setting invariants in the code.
            </summary>
        </member>
        <member name="F:FlaxEngine.Assertions.Assert.RaiseExceptions">
            <summary>
            Should an exception be thrown on a failure.
            </summary>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreApproximatelyEqual(System.Single,System.Single)">
            <summary>
            Asserts that the values are approximately equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            Note: Every time you call the method with tolerance specified, a new instance of Assertions.Comparers.FloatComparer
            is created. For performance reasons you might want to instance your own comparer and pass it to the AreEqual method.
            If the tolerance is not specifies, a default comparer is used and the issue does not occur.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreApproximatelyEqual(System.Single,System.Single,System.String)">
            <summary>
            Asserts that the values are approximately equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            Note: Every time you call the method with tolerance specified, a new instance of Assertions.Comparers.FloatComparer
            is created. For performance reasons you might want to instance your own comparer and pass it to the AreEqual method.
            If the tolerance is not specifies, a default comparer is used and the issue does not occur.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreApproximatelyEqual(System.Single,System.Single,System.Single)">
            <summary>
            Asserts that the values are approximately equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            Note: Every time you call the method with tolerance specified, a new instance of Assertions.Comparers.FloatComparer
            is created. For performance reasons you might want to instance your own comparer and pass it to the AreEqual method.
            If the tolerance is not specifies, a default comparer is used and the issue does not occur.
            </summary>
            <param name="tolerance">Tolerance of approximation.</param>
            <param name="expected"></param>
            <param name="actual"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreApproximatelyEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that the values are approximately equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            Note: Every time you call the method with tolerance specified, a new instance of Assertions.Comparers.FloatComparer
            is created. For performance reasons you might want to instance your own comparer and pass it to the AreEqual method.
            If the tolerance is not specifies, a default comparer is used and the issue does not occur.
            </summary>
            <param name="tolerance">Tolerance of approximation.</param>
            <param name="expected"></param>
            <param name="actual"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreEqual``1(``0,``0)">
            <summary>
            Asserts that the values are approximately equal.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreEqual``1(``0,``0,System.String)">
            <summary>
            Asserts that the values are approximately equal.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreEqual``1(``0,``0,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Asserts that the values are approximately equal.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <param name="message">The error message.</param>
            <param name="comparer">The equality comparer.</param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreEqual(FlaxEngine.Object,FlaxEngine.Object,System.String)">
            <summary>
            Asserts that the values are approximately equal.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreNotApproximatelyEqual(System.Single,System.Single)">
            <summary>
            Asserts that the values are approximately not equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreNotApproximatelyEqual(System.Single,System.Single,System.String)">
            <summary>
            Asserts that the values are approximately not equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreNotApproximatelyEqual(System.Single,System.Single,System.Single)">
            <summary>
            Asserts that the values are approximately not equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            </summary>
            <param name="tolerance">Tolerance of approximation.</param>
            <param name="expected"></param>
            <param name="actual"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.AreNotApproximatelyEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that the values are approximately not equal. An absolute error check is used for approximate equality check
            (|a-b| &lt; tolerance). Default tolerance is 0.00001f.
            </summary>
            <param name="tolerance">Tolerance of approximation.</param>
            <param name="expected"></param>
            <param name="actual"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.IsFalse(System.Boolean)">
            <summary>
            Asserts that the condition is false.
            </summary>
            <param name="condition"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.IsFalse(System.Boolean,System.String)">
            <summary>
            Asserts that the condition is false.
            </summary>
            <param name="condition"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.IsTrue(System.Boolean)">
            <summary>
            Asserts that the condition is true.
            </summary>
            <param name="condition"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            Asserts that the condition is true.
            </summary>
            <param name="condition"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.Assertions.Assert.ExceptionExpected(System.Type,System.Action,System.String)">
            <summary>
            Expect action to fail
            </summary>
            <param name="exceptionType">Type of exception to expect</param>
            <param name="action">Action to expect</param>
            <param name="message">User custom message to display</param>
        </member>
        <member name="T:FlaxEngine.Assertions.AssertionException">
            <summary>
            An exception that is thrown on a failure. To enable this feature <see cref="F:FlaxEngine.Assertions.Assert.RaiseExceptions"/> needs to be set to true.
            </summary>
        </member>
        <member name="P:FlaxEngine.Assertions.AssertionException.Message">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Assertions.AssertionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Assertions.AssertionException"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.Assertions.AssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Assertions.AssertionException"/> class.
            </summary>
            <param name="userMessage">The user message.</param>
        </member>
        <member name="M:FlaxEngine.Assertions.AssertionException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Assertions.AssertionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="userMessage">The user message.</param>
        </member>
        <member name="T:FlaxEngine.Assertions.FloatComparer">
            <summary>
            A float comparer used by Assertions.Assert performing approximate comparison.
            </summary>
        </member>
        <member name="F:FlaxEngine.Assertions.FloatComparer.Epsilon">
            <summary>
            Default epsilon used by the comparer.
            </summary>
        </member>
        <member name="F:FlaxEngine.Assertions.FloatComparer.ComparerWithDefaultTolerance">
            <summary>
            Default instance of a comparer class with default error epsilon and absolute error check.
            </summary>
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.#ctor">
            <summary>
            Creates an instance of the comparer.
            </summary>
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.#ctor(System.Boolean)">
            <summary>
            Creates an instance of the comparer.
            </summary>
            <param name="relative">
            Should a relative check be used when comparing values? By default, an absolute check will be
            used.
            </param>
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.#ctor(System.Single)">
            <summary>
            Creates an instance of the comparer.
            </summary>
            <param name="error">Allowed comparison error. By default, the FloatComparer.Epsilon is used.</param>
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.#ctor(System.Single,System.Boolean)">
            <summary>
            Creates an instance of the comparer.
            </summary>
            <param name="relative">
            Should a relative check be used when comparing values? By default, an absolute check will be
            used.
            </param>
            <param name="error">Allowed comparison error. By default, the FloatComparer.Epsilon is used.</param>
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.AreEqual(System.Single,System.Single,System.Single)">
            <summary>
            Performs equality check with absolute error check.
            </summary>
            <param name="expected">Expected value.</param>
            <param name="actual">Actual value.</param>
            <param name="error">Comparison error.</param>
            <returns>
            Result of the comparison.
            </returns>
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.AreEqualRelative(System.Single,System.Single,System.Single)">
            <summary>
            Performs equality check with relative error check.
            </summary>
            <param name="expected">Expected value.</param>
            <param name="actual">Actual value.</param>
            <param name="error">Comparison error.</param>
            <returns>Result of the comparison.</returns>
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.Equals(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Assertions.FloatComparer.GetHashCode(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.DebugDraw">
            <summary>
            The debug shapes rendering service. Not available in final game. For use only in the editor.
            </summary>
        </member>
        <member name="M:FlaxEngine.DebugDraw.Draw(FlaxEngine.RenderContext@,FlaxEngine.GPUTextureView,FlaxEngine.GPUTextureView,System.Boolean)">
            <summary>
            Draws the collected debug shapes to the output.
            </summary>
            <param name="renderContext">The rendering context.</param>
            <param name="target">The rendering output surface handle.</param>
            <param name="depthBuffer">The custom depth texture used for depth test. Can be MSAA. Must match target surface size.</param>
            <param name="enableDepthTest">True if perform manual depth test with scene depth buffer when rendering the primitives. Uses custom shader and the scene depth buffer.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawActors(System.IntPtr,System.Int32)">
            <summary>
            Draws the debug shapes for the given collection of selected actors and other scene actors debug shapes.
            </summary>
            <param name="selectedActors">The list of actors to draw.</param>
            <param name="selectedActorsCount">The size of the list of actors.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawLine(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the line.
            </summary>
            <param name="start">The start point.</param>
            <param name="end">The end point.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawLines(FlaxEngine.Vector3[],FlaxEngine.Matrix,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the lines. Line positions are located one after another (e.g. l0.start, l0.end, l1.start, l1.end,...).
            </summary>
            <param name="lines">The list of vertices for lines (must have multiple of 2 elements).</param>
            <param name="transform">The custom matrix used to transform all line vertices.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawCircle(FlaxEngine.Vector3,FlaxEngine.Vector3,System.Single,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the circle.
            </summary>
            <param name="position">The center position.</param>
            <param name="normal">The normal vector direction.</param>
            <param name="radius">The radius.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireTriangle(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe triangle.
            </summary>
            <param name="v0">The first triangle vertex.</param>
            <param name="v1">The second triangle vertex.</param>
            <param name="v2">The third triangle vertex.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawTriangle(FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Vector3,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the triangle.
            </summary>
            <param name="v0">The first triangle vertex.</param>
            <param name="v1">The second triangle vertex.</param>
            <param name="v2">The third triangle vertex.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawTriangles(FlaxEngine.Vector3[],FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the triangles.
            </summary>
            <param name="vertices">The triangle vertices list (must have multiple of 3 elements).</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawTriangles(FlaxEngine.Vector3[],System.Int32[],FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the triangles using the given index buffer.
            </summary>
            <param name="vertices">The triangle vertices list.</param>
            <param name="indices">The triangle indices list (must have multiple of 3 elements).</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireBox(FlaxEngine.BoundingBox,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe box.
            </summary>
            <param name="box">The box.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireFrustum(FlaxEngine.BoundingFrustum,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireBox(FlaxEngine.OrientedBoundingBox,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe box.
            </summary>
            <param name="box">The box.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireSphere(FlaxEngine.BoundingSphere,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawSphere(FlaxEngine.BoundingSphere,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireTube(FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Single,System.Single,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe tube.
            </summary>
            <param name="position">The center position.</param>
            <param name="orientation">The orientation.</param>
            <param name="radius">The radius.</param>
            <param name="length">The length.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireCylinder(FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Single,System.Single,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe cylinder.
            </summary>
            <param name="position">The center position.</param>
            <param name="orientation">The orientation.</param>
            <param name="radius">The radius.</param>
            <param name="height">The height.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawWireArrow(FlaxEngine.Vector3,FlaxEngine.Quaternion,System.Single,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the wireframe arrow.
            </summary>
            <param name="position">The arrow origin position.</param>
            <param name="orientation">The orientation (defines the arrow direction).</param>
            <param name="scale">The arrow scale (used to adjust the arrow size).</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawBox(FlaxEngine.BoundingBox,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the box.
            </summary>
            <param name="box">The box.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="M:FlaxEngine.DebugDraw.DrawBox(FlaxEngine.OrientedBoundingBox,FlaxEngine.Color,System.Single,System.Boolean)">
            <summary>
            Draws the box.
            </summary>
            <param name="box">The box.</param>
            <param name="color">The color.</param>
            <param name="duration">The duration (in seconds). Use 0 to draw it only once.</param>
            <param name="depthTest">If set to <c>true</c> depth test will be performed, otherwise depth will be ignored.</param>
        </member>
        <member name="T:FlaxEngine.Debug">
            <summary>
            Class containing methods to ease debugging while developing a game.
            </summary>
        </member>
        <member name="P:FlaxEngine.Debug.Logger">
            <summary>
            Get default debug logger.
            </summary>
        </member>
        <member name="M:FlaxEngine.Debug.Assert(System.Boolean)">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Assert(System.Boolean,FlaxEngine.Object)">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Assert(System.Boolean,System.Object)">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Assert(System.Boolean,System.String)">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
            <param name="message">String to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Assert(System.Boolean,System.Object,FlaxEngine.Object)">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
            <param name="context">Object to which the message applies.</param>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Assert(System.Boolean,System.String,FlaxEngine.Object)">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
            <param name="context">Object to which the message applies.</param>
            <param name="message">String to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.AssertFormat(System.Boolean,System.String,System.Object[])">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:FlaxEngine.Debug.AssertFormat(System.Boolean,FlaxEngine.Object,System.String,System.Object[])">
            <summary>
            Assert a condition and logs a formatted error message to the Flax console on failure.
            </summary>
            <param name="condition">Condition you expect to be true.</param>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Write(FlaxEngine.LogType,System.String)">
            <summary>
            Logs the raw message to the log.
            </summary>
            <param name="logType">Type of the log message. Not: fatal will stop the engine. Error may show a message popup.</param>
            <param name="message">The message contents.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Log(System.Object)">
            <summary>
            Logs message to the Flax Console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.Log(System.Object,FlaxEngine.Object)">
            <summary>
            Logs message to the Flax Console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogAssertion(System.Object)">
            <summary>
            A variant of Debug.Info that logs an assertion message to the console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogAssertion(System.Object,FlaxEngine.Object)">
            <summary>
            A variant of Debug.Info that logs an assertion message to the console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogAssertionFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted assertion message to the Flax console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogAssertionFormat(FlaxEngine.Object,System.String,System.Object[])">
            <summary>
            Logs a formatted assertion message to the Flax console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogError(System.Object)">
            <summary>
            A variant of Debug.Info that logs an error message to the console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogError(System.Object,FlaxEngine.Object)">
            <summary>
            A variant of Debug.Info that logs an error message to the console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogErrorFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted error message to the Flax console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogErrorFormat(FlaxEngine.Object,System.String,System.Object[])">
            <summary>
            Logs a formatted error message to the Flax console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogException(System.Exception)">
            <summary>
            A variant of Debug.Info that logs an error message to the console.
            </summary>
            <param name="exception">Runtime Exception.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogException(System.Exception,FlaxEngine.Object)">
            <summary>
            A variant of Debug.Info that logs an error message to the console.
            </summary>
            <param name="context">Object to which the message applies.</param>
            <param name="exception">Runtime Exception.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message to the Flax Console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogFormat(FlaxEngine.Object,System.String,System.Object[])">
            <summary>
            Logs a formatted message to the Flax Console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogWarning(System.Object)">
            <summary>
            A variant of Debug.Info that logs a warning message to the console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogWarning(System.Object,FlaxEngine.Object)">
            <summary>
            A variant of Debug.Info that logs a warning message to the console.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogWarningFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted warning message to the Flax Console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:FlaxEngine.Debug.LogWarningFormat(FlaxEngine.Object,System.String,System.Object[])">
            <summary>
            Logs a formatted warning message to the Flax Console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="E:FlaxEngine.DebugLogHandler.SendLog">
            <summary>
            Occurs on sending a log message.
            </summary>
        </member>
        <member name="E:FlaxEngine.DebugLogHandler.SendExceptionLog">
            <summary>
            Occurs on sending a log message.
            </summary>
        </member>
        <member name="M:FlaxEngine.DebugLogHandler.LogWrite(FlaxEngine.LogType,System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.DebugLogHandler.LogException(System.Exception,FlaxEngine.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.DebugLogHandler.Log(FlaxEngine.LogType,FlaxEngine.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.FlaxException">
            <summary>
            Flax exception object.
            </summary>
            <seealso cref="T:System.SystemException" />
        </member>
        <member name="M:FlaxEngine.FlaxException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FlaxException"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.FlaxException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FlaxException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:FlaxEngine.FlaxException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FlaxException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:FlaxEngine.IDrawable">
            <summary>
            Draw method within this interface is used for <see cref="T:FlaxEngine.Render2D"/>.CallDrawing single DrawCall
            <remarks>Each frame new Queue is sent to GPU from this CPU bound method</remarks>
            </summary>
            <seealso cref="M:FlaxEngine.Render2D.CallDrawing(FlaxEngine.IDrawable,FlaxEngine.GPUContext,FlaxEngine.GPUTexture)"/>
            <seealso cref="M:FlaxEngine.PostProcessEffect.Render(FlaxEngine.GPUContext,FlaxEngine.RenderContext@,FlaxEngine.GPUTexture,FlaxEngine.GPUTexture)"/>
        </member>
        <member name="M:FlaxEngine.IDrawable.Draw">
            <summary>
            Render2D drawing methods should be used within this method during render phase to be visible. 
            </summary>
        </member>
        <member name="T:FlaxEngine.LogDelegate">
            <summary>
            Info message delegate.
            </summary>
            <param name="level">The log level.</param>
            <param name="msg">The message.</param>
            <param name="obj">The object.</param>
            <param name="stackTrace">The stack trace.</param>
        </member>
        <member name="T:FlaxEngine.LogExceptionDelegate">
            <summary>
            Info exception delegate.
            </summary>
            <param name="exception">The exception.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="T:FlaxEngine.ILogger">
            <summary>
            Logger interface.
            </summary>
        </member>
        <member name="P:FlaxEngine.ILogger.FilterLogType">
            <summary>
            <para>To selective enable debug log message.</para>
            </summary>
        </member>
        <member name="P:FlaxEngine.ILogger.LogEnabled">
            <summary>
            <para>To runtime toggle debug logging [ON/OFF].</para>
            </summary>
        </member>
        <member name="P:FlaxEngine.ILogger.LogHandler">
            <summary>
            <para>Set Logger.ILogHandler.</para>
            </summary>
        </member>
        <member name="M:FlaxEngine.ILogger.IsLogTypeAllowed(FlaxEngine.LogType)">
            <summary>
            <para>Check logging is enabled based on the LogType.</para>
            </summary>
            <param name="logType"></param>
            <returns>
            <para>Return true in case logs of LogType will be logged otherwise returns false.</para>
            </returns>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(FlaxEngine.LogType,System.Object)">
            <summary>
            <para>Logs message to the Flax Console using default logger.</para>
            </summary>
            <param name="logType"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(FlaxEngine.LogType,System.Object,FlaxEngine.Object)">
            <summary>
            <para>Logs message to the Flax Console using default logger.</para>
            </summary>
            <param name="logType"></param>
            <param name="message"></param>
            <param name="context"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(FlaxEngine.LogType,System.String,System.Object)">
            <summary>
            <para>Logs message to the Flax Console using default logger.</para>
            </summary>
            <param name="logType"></param>
            <param name="message"></param>
            <param name="tag"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(FlaxEngine.LogType,System.String,System.Object,FlaxEngine.Object)">
            <summary>
            <para>Logs message to the Flax Console using default logger.</para>
            </summary>
            <param name="logType"></param>
            <param name="message"></param>
            <param name="context"></param>
            <param name="tag"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(System.Object)">
            <summary>
            <para>Logs message to the Flax Console using default logger.</para>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(System.String,System.Object)">
            <summary>
            <para>Logs message to the Flax Console using default logger.</para>
            </summary>
            <param name="message"></param>
            <param name="tag"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(System.String,System.Object,FlaxEngine.Object)">
            <summary>
            <para>Logs message to the Flax Console using default logger.</para>
            </summary>
            <param name="message"></param>
            <param name="context"></param>
            <param name="tag"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.LogError(System.String,System.Object)">
            <summary>
            <para>A variant of ILogger.Info that logs an error message.</para>
            </summary>
            <param name="tag"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.LogError(System.String,System.Object,FlaxEngine.Object)">
            <summary>
            <para>A variant of ILogger.Info that logs an error message.</para>
            </summary>
            <param name="tag"></param>
            <param name="message"></param>
            <param name="context"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.LogException(System.Exception)">
            <summary>
            <para>A variant of ILogger.Info that logs an exception message.</para>
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.LogFormat(FlaxEngine.LogType,System.String,System.Object[])">
            <summary>
            <para>Logs a formatted message.</para>
            </summary>
            <param name="logType"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.LogWarning(System.String,System.Object)">
            <summary>
            <para>A variant of Logger.Info that logs an warning message.</para>
            </summary>
            <param name="tag"></param>
            <param name="message"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.LogWarning(System.String,System.Object,FlaxEngine.Object)">
            <summary>
            <para>A variant of Logger.Info that logs an warning message.</para>
            </summary>
            <param name="tag"></param>
            <param name="message"></param>
            <param name="context"></param>
        </member>
        <member name="M:FlaxEngine.ILogger.LogException(System.Exception,FlaxEngine.Object)">
            <summary>
            <para>A variant of ILogHandler.LogFormat that logs an exception message.</para>
            </summary>
            <param name="exception">Runtime Exception.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.ILogger.Log(FlaxEngine.LogType,FlaxEngine.Object,System.String)">
            <summary>
            <para>Logs a formatted message.</para>
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="context">Object to which the message applies.</param>
            <param name="message">Message to log.</param>
        </member>
        <member name="T:FlaxEngine.ILogHandler">
            <summary>
            Logs handler.
            </summary>
        </member>
        <member name="E:FlaxEngine.ILogHandler.SendLog">
            <summary>
            Occurs on sending a log message.
            </summary>
        </member>
        <member name="E:FlaxEngine.ILogHandler.SendExceptionLog">
            <summary>
            Occurs on sending a exception log message.
            </summary>
        </member>
        <member name="M:FlaxEngine.ILogHandler.LogWrite(FlaxEngine.LogType,System.String)">
            <summary>
            Logs the raw message to the log.
            </summary>
            <param name="logType">Type of the log message. Not: fatal will stop the engine. Error may show a message popup.</param>
            <param name="message">The message contents.</param>
        </member>
        <member name="M:FlaxEngine.ILogHandler.LogException(System.Exception,FlaxEngine.Object)">
            <summary>
            <para>A variant of ILogHandler.LogFormat that logs an exception message.</para>
            </summary>
            <param name="exception">Runtime Exception.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.ILogHandler.Log(FlaxEngine.LogType,FlaxEngine.Object,System.String)">
            <summary>
            <para>Logs a formatted message.</para>
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="context">Object to which the message applies.</param>
            <param name="message">Message to log.</param>
        </member>
        <member name="T:FlaxEngine.InputAxis">
            <summary>
            Virtual input axis binding. Helps with listening for a selected axis input.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputAxis.Name">
            <summary>
            The name of the axis to use. See <see cref="P:FlaxEngine.Input.AxisMappings"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.InputAxis.Value">
            <summary>
            Gets the current axis value.
            </summary>
        </member>
        <member name="P:FlaxEngine.InputAxis.ValueRaw">
            <summary>
            Gets the current axis raw value.
            </summary>
        </member>
        <member name="M:FlaxEngine.InputAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.InputAxis"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.InputAxis.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.InputAxis"/> class.
            </summary>
            <param name="name">The axis name.</param>
        </member>
        <member name="T:FlaxEngine.InputEvent">
            <summary>
            Virtual input action binding. Helps with listening for a selected input event.
            </summary>
        </member>
        <member name="F:FlaxEngine.InputEvent.Name">
            <summary>
            The name of the action to use. See <see cref="P:FlaxEngine.Input.ActionMappings"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.InputEvent.Active">
            <summary>
            Returns true if the event has been triggered during the current frame (e.g. user pressed a key). Use <see cref="E:FlaxEngine.InputEvent.Triggered"/> to catch events without active waiting.
            </summary>
        </member>
        <member name="E:FlaxEngine.InputEvent.Triggered">
            <summary>
            Occurs when event is triggered (e.g. user pressed a key). Called before scripts update.
            </summary>
        </member>
        <member name="M:FlaxEngine.InputEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.InputEvent"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.InputEvent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.InputEvent"/> class.
            </summary>
            <param name="name">The action name.</param>
        </member>
        <member name="M:FlaxEngine.InputEvent.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:FlaxEngine.InputEvent"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.InputEvent.Dispose">
            <summary>
            Releases this object.
            </summary>
        </member>
        <member name="T:FlaxEngine.Logger">
            <summary>
            Initializes a new instance of the Logger.
            </summary>
        </member>
        <member name="M:FlaxEngine.Logger.#ctor(FlaxEngine.ILogHandler)">
            <summary>
            Create a custom Logger.
            </summary>
            <param name="logHandler">Pass in default log handler or custom log handler.</param>
        </member>
        <member name="P:FlaxEngine.Logger.FilterLogType">
            <summary>
            To selective enable debug log message.
            </summary>
        </member>
        <member name="P:FlaxEngine.Logger.LogEnabled">
            <summary>
            To runtime toggle debug logging [ON/OFF].
            </summary>
        </member>
        <member name="P:FlaxEngine.Logger.LogHandler">
            <summary>
            Set  Logger.ILogHandler.
            </summary>
        </member>
        <member name="M:FlaxEngine.Logger.IsLogTypeAllowed(FlaxEngine.LogType)">
            <summary>
            Check logging is enabled based on the LogType.
            </summary>
            <param name="logType">The type of the log message.</param>
            <returns>Returns true in case logs of LogType will be logged otherwise returns false.</returns>
        </member>
        <member name="M:FlaxEngine.Logger.Log(FlaxEngine.LogType,System.Object)">
            <summary>
            Logs message to the Flax Console using default logger.
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(FlaxEngine.LogType,System.Object,FlaxEngine.Object)">
            <summary>
            Logs message to the Flax Console using default logger.
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(FlaxEngine.LogType,System.String,System.Object)">
            <summary>
            Logs message to the Flax Console using default logger.
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(FlaxEngine.LogType,System.String,System.Object,FlaxEngine.Object)">
            <summary>
            Logs message to the Flax Console using default logger.
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(System.Object)">
            <summary>
            Logs message to the Flax Console using default logger.
            </summary>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(System.String,System.Object)">
            <summary>
            Logs message to the Flax Console using default logger.
            </summary>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(System.String,System.Object,FlaxEngine.Object)">
            <summary>
            Logs message to the Flax Console using default logger.
            </summary>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Logger.LogError(System.String,System.Object)">
            <summary>
            A variant of Logger.Info that logs an error message.
            </summary>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Logger.LogError(System.String,System.Object,FlaxEngine.Object)">
            <summary>
            A variant of Logger.Info that logs an error message.
            </summary>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Logger.LogException(System.Exception)">
            <summary>
            A variant of Logger.Info that logs an exception message.
            </summary>
            <param name="exception">Runtime Exception.</param>
        </member>
        <member name="M:FlaxEngine.Logger.LogException(System.Exception,FlaxEngine.Object)">
            <summary>
            A variant of Logger.Info that logs an exception message.
            </summary>
            <param name="exception">Runtime Exception.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(FlaxEngine.LogType,FlaxEngine.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Logger.LogFormat(FlaxEngine.LogType,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.Logger.Log(FlaxEngine.LogType,System.String,System.Object[])">
            <summary>
            Logs a formatted message.
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:FlaxEngine.Logger.Log(FlaxEngine.LogType,FlaxEngine.Object,System.String,System.Object[])">
            <summary>
            Logs a formatted message.
            </summary>
            <param name="logType">The type of the log message.</param>
            <param name="context">Object to which the message applies.</param>
            <param name="format">A composite format string.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:FlaxEngine.Logger.LogWarning(System.String,System.Object)">
            <summary>
            A variant of Logger.Info that logs an warning message.
            </summary>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
        </member>
        <member name="M:FlaxEngine.Logger.LogWarning(System.String,System.Object,FlaxEngine.Object)">
            <summary>
            A variant of Logger.Info that logs an warning message.
            </summary>
            <param name="tag">
            Used to identify the source of a log message. It usually identifies the class where the log call
            occurs.
            </param>
            <param name="message">String or object to be converted to string representation for display.</param>
            <param name="context">Object to which the message applies.</param>
        </member>
        <member name="T:FlaxEngine.PostProcessEffect">
            <summary>
            Custom postFx which can modify final image by processing it with material based filters.
            The base class for all post process effects used by the graphics pipeline.
            Allows to extend frame rendering logic and apply custom effects such as outline, night vision, contrast etc.
            </summary>
            <remarks>
            Override this class and implement custom post fx logic.
            Use <b>MainRenderTask.Instance.CustomPostFx.Add(myPostFx)</b> to attach your script to rendering.
            Or add script to camera.
            </remarks>
        </member>
        <member name="P:FlaxEngine.PostProcessEffect.CanRender">
            <summary>
            Gets a value indicating whether this effect can be rendered.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostProcessEffect.UseSingleTarget">
            <summary>
            Gets a value indicating whether use a single render target as both input and output. Use this if your effect doesn't need to copy the input buffer to the output but can render directly to the single texture. Can be used to optimize game performance.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostProcessEffect.Location">
            <summary>
            Gets the effect rendering location within rendering pipeline.
            </summary>
        </member>
        <member name="P:FlaxEngine.PostProcessEffect.Order">
            <summary>
            Gets the effect rendering order. Registered post effects are sorted before rendering (from the lowest order to the highest order).
            </summary>
        </member>
        <member name="M:FlaxEngine.PostProcessEffect.Render(FlaxEngine.GPUContext,FlaxEngine.RenderContext@,FlaxEngine.GPUTexture,FlaxEngine.GPUTexture)">
            <summary>
            Performs custom postFx rendering.
            </summary>
            <param name="context">The GPU commands context.</param>
            <param name="renderContext">The rendering context.</param>
            <param name="input">The input texture.</param>
            <param name="output">The output texture.</param>
        </member>
        <member name="T:FlaxEngine.SceneReference">
            <summary>
            Represents the reference to the scene asset. Stores the unique ID of the scene to reference. Can be used to load the selected scene.
            </summary>
        </member>
        <member name="F:FlaxEngine.SceneReference.ID">
            <summary>
            The identifier of the scene asset (and the scene object).
            </summary>
        </member>
        <member name="M:FlaxEngine.SceneReference.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SceneReference"/> class.
            </summary>
            <param name="id">The identifier of the scene asset.</param>
        </member>
        <member name="M:FlaxEngine.SceneReference.op_Equality(FlaxEngine.SceneReference,FlaxEngine.SceneReference)">
            <summary>
            Compares two values and returns true if are equal or false if unequal.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>True if values are equal, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.SceneReference.op_Inequality(FlaxEngine.SceneReference,FlaxEngine.SceneReference)">
            <summary>
            Compares two values and returns false if are equal or true if unequal.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>True if values are not equal, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.SceneReference.op_Equality(FlaxEngine.SceneReference,System.Guid)">
            <summary>
            Compares two values and returns true if are equal or false if unequal.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>True if values are equal, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.SceneReference.op_Inequality(FlaxEngine.SceneReference,System.Guid)">
            <summary>
            Compares two values and returns false if are equal or true if unequal.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>True if values are not equal, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.SceneReference.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.SceneReference.CompareTo(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.SceneReference.CompareTo(FlaxEngine.SceneReference)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.SceneReference.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.SceneReference.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.SceneReference.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.MaterialParameterType">
            <summary>
            Material parameters types.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.Invalid">
            <summary>
            The invalid type.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.Bool">
            <summary>
            The bool.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.Integer">
            <summary>
            The integer.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.Float">
            <summary>
            The float.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.Vector2">
            <summary>
            The vector2
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.Vector3">
            <summary>
            The vector3.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.Vector4">
            <summary>
            The vector4.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.Color">
            <summary>
            The color.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.Texture">
            <summary>
            The texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.CubeTexture">
            <summary>
            The cube texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.NormalMap">
            <summary>
            The normal map texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.SceneTexture">
            <summary>
            The scene texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.GPUTexture">
            <summary>
            The GPU texture (created from code).
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.Matrix">
            <summary>
            The matrix.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.GPUTextureArray">
            <summary>
            The GPU texture array (created from code).
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.GPUTextureVolume">
            <summary>
            The GPU volume texture (created from code).
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.GPUTextureCube">
            <summary>
            The GPU cube texture (created from code).
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.ChannelMask">
            <summary>
            The RGBA channel selection mask.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.GameplayGlobal">
            <summary>
            The gameplay global.
            </summary>
        </member>
        <member name="F:FlaxEngine.MaterialParameterType.TextureGroupSampler">
            <summary>
            The texture sampler derived from texture group settings.
            </summary>
        </member>
        <member name="T:FlaxEngine.FontReference">
            <summary>
            Font reference that defines the font asset and font size to use.
            </summary>
        </member>
        <member name="M:FlaxEngine.FontReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FontReference"/> struct.
            </summary>
        </member>
        <member name="M:FlaxEngine.FontReference.#ctor(FlaxEngine.FontAsset,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FontReference"/> struct.
            </summary>
            <param name="font">The font.</param>
            <param name="size">The font size.</param>
        </member>
        <member name="M:FlaxEngine.FontReference.#ctor(FlaxEngine.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.FontReference"/> struct.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="P:FlaxEngine.FontReference.Font">
            <summary>
            The font asset.
            </summary>
        </member>
        <member name="P:FlaxEngine.FontReference.Size">
            <summary>
            The size of the font characters.
            </summary>
        </member>
        <member name="M:FlaxEngine.FontReference.GetFont">
            <summary>
            Gets the font object described by the structure.
            </summary>
            <returns>Th font or null if descriptor is invalid.</returns>
        </member>
        <member name="M:FlaxEngine.FontReference.Equals(FlaxEngine.FontReference)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.FontReference" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.FontReference" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:FlaxEngine.FontReference" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.FontReference.op_Equality(FlaxEngine.FontReference,FlaxEngine.FontReference)">
            <summary>
            Compares two font references.
            </summary>
            <param name="lhs">The left.</param>
            <param name="rhs">The right.</param>
            <returns>True if font references are equal, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.FontReference.op_Inequality(FlaxEngine.FontReference,FlaxEngine.FontReference)">
            <summary>
            Compares two font references.
            </summary>
            <param name="lhs">The left.</param>
            <param name="rhs">The right.</param>
            <returns>True if font references are not equal, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.FontReference.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.FontReference.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.FontReference.ToString">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.CollectionAttribute">
            <summary>
            This attributes provides additional information on a member collection.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollectionAttribute.ReadOnly">
            <summary>
            Gets or sets whether this collection is read-only. If <c>true</c>, applications using this collection should not allow to add or remove items.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollectionAttribute.CanReorderItems">
            <summary>
            Gets or sets whether the items of this collection can be reordered. If <c>true</c>, applications using this collection should provide users a way to reorder items.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollectionAttribute.NotNullItems">
            <summary>
            Gets or sets whether the items of this collection can be null. If <c>true</c>, applications using this collection should prevent user to add null items to the collection.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollectionAttribute.OverrideEditorTypeName">
            <summary>
            Custom editor class typename for collection values editing.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollectionAttribute.Spacing">
            <summary>
            The spacing amount between collection items in the UI.
            </summary>
        </member>
        <member name="F:FlaxEngine.CollectionAttribute.BackgroundColor">
            <summary>
            The collection background color.
            </summary>
        </member>
        <member name="T:FlaxEngine.AssetReferenceAttribute">
            <summary>
            Specifies a options for an asset reference picker in the editor. Allows to customize view or provide custom value assign policy.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.AssetReferenceAttribute.TypeName">
            <summary>
            The full name of the asset type to link. Use null or empty to skip it.
            </summary>
        </member>
        <member name="F:FlaxEngine.AssetReferenceAttribute.UseSmallPicker">
            <summary>
            True if use asset picker with a smaller height (single line), otherwise will use with full icon.
            </summary>
        </member>
        <member name="M:FlaxEngine.AssetReferenceAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AssetReferenceAttribute"/> class.
            </summary>
            <param name="useSmallPicker">True if use asset picker with a smaller height (single line), otherwise will use with full icon.</param>
        </member>
        <member name="M:FlaxEngine.AssetReferenceAttribute.#ctor(System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AssetReferenceAttribute"/> class.
            </summary>
            <param name="typeName">The full name of the asset type to link. Use null or empty to skip it.</param>
            <param name="useSmallPicker">True if use asset picker with a smaller height (single line), otherwise will use with full icon.</param>
        </member>
        <member name="M:FlaxEngine.AssetReferenceAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.AssetReferenceAttribute"/> class.
            </summary>
            <param name="typeName">The full name of the asset type to link. Use null or empty to skip it.</param>
            <param name="useSmallPicker">True if use asset picker with a smaller height (single line), otherwise will use with full icon.</param>
        </member>
        <member name="T:FlaxEngine.CategoryAttribute">
            <summary>
            Describes the category name for a type.
            </summary>
        </member>
        <member name="F:FlaxEngine.CategoryAttribute.Name">
            <summary>
            The category name.
            </summary>
        </member>
        <member name="M:FlaxEngine.CategoryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.CategoryAttribute"/> class.
            </summary>
            <param name="name">The category name.</param>
        </member>
        <member name="T:FlaxEngine.CustomEditorAliasAttribute">
            <summary>
            Overrides default editor provided for the target object/class/field/property. Allows to extend visuals and editing experience of the objects.
            </summary>
            <seealso cref="T:FlaxEngine.CustomEditorAttribute"/>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.CustomEditorAliasAttribute.TypeName">
            <summary>
            Custom editor class typename.
            </summary>
        </member>
        <member name="M:FlaxEngine.CustomEditorAliasAttribute.#ctor(System.String)">
            <summary>
            Overrides default editor provided for the target object.
            </summary>
            <param name="typeName">The custom editor class typename.</param>
        </member>
        <member name="T:FlaxEngine.CustomEditorAttribute">
            <summary>
            Overrides the default editor provided for the target object/class/field/property. Allows to extend visuals and editing experience of the object.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.CustomEditorAttribute.Type">
            <summary>
            Custom editor class type.
            Note: if attribute is used on CustomEditor class it specifies object type to edit.
            </summary>
        </member>
        <member name="M:FlaxEngine.CustomEditorAttribute.#ctor(System.Type)">
            <summary>
            Overrides default editor provided for the target object.
            </summary>
            <param name="type">The custom editor class type.</param>
        </member>
        <member name="T:FlaxEngine.DefaultEditorAttribute">
            <summary>
            Specifies default editor provided for the target object/class/field/property. Should be used along with <see cref="T:FlaxEngine.CustomEditorAttribute"/>.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:FlaxEngine.EditorDisplayAttribute">
            <summary>
            Allows to change item display name or a group in the editor.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.EditorDisplayAttribute.InlineStyle">
            <summary>
            Special text sequence used for property names to override the default layout style and inline property into the parent layout.
            </summary>
        </member>
        <member name="F:FlaxEngine.EditorDisplayAttribute.Group">
            <summary>
            The group name. Default is null.
            </summary>
        </member>
        <member name="F:FlaxEngine.EditorDisplayAttribute.Name">
            <summary>
            The overriden item display name. Default is null.
            </summary>
        </member>
        <member name="M:FlaxEngine.EditorDisplayAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.EditorDisplayAttribute"/> class.
            </summary>
            <param name="group">The group name.</param>
            <param name="name">The display name. Use special name `__inline__` (see <see cref="F:FlaxEngine.EditorDisplayAttribute.InlineStyle"/>) to inline property into the parent container.</param>
        </member>
        <member name="T:FlaxEngine.EditorOrderAttribute">
            <summary>
            Allows to declare order of the item in the editor.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.EditorOrderAttribute.Order">
            <summary>
            Requested order to perform layout on. Used to order the items.
            </summary>
        </member>
        <member name="M:FlaxEngine.EditorOrderAttribute.#ctor(System.Int32)">
            <summary>
            Override display order in visual tree for provided model.
            </summary>
            <remarks>
            Current order is resolved runtime, and can change if custom editor class has changed.
            </remarks>
            <param name="order">The order.</param>
        </member>
        <member name="T:FlaxEngine.EnumDisplayAttribute">
            <summary>
            Allows to change enum type field or property display mode in the editor.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:FlaxEngine.EnumDisplayAttribute.FormatMode">
            <summary>
            Enumeration items names formatting modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.EnumDisplayAttribute.FormatMode.Default">
            <summary>
            The default formatting. Performs standard name processing to create more human-readable label for User Interface.
            </summary>
        </member>
        <member name="F:FlaxEngine.EnumDisplayAttribute.FormatMode.None">
            <summary>
            The none formatting. The enum items names won't be modified.
            </summary>
        </member>
        <member name="F:FlaxEngine.EnumDisplayAttribute.Mode">
            <summary>
            The formatting mode.
            </summary>
        </member>
        <member name="M:FlaxEngine.EnumDisplayAttribute.#ctor(FlaxEngine.EnumDisplayAttribute.FormatMode)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.EnumDisplayAttribute"/> class.
            </summary>
            <param name="mode">The formatting mode.</param>
        </member>
        <member name="T:FlaxEngine.ExpandGroupsAttribute">
            <summary>
            Marks the item to be visible in editor by expanding all the container groups in the upper hierarchy.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:FlaxEngine.HeaderAttribute">
            <summary>
            Inserts a header control with a custom text into the editor layout.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.HeaderAttribute.Text">
            <summary>
            The header text.
            </summary>
        </member>
        <member name="M:FlaxEngine.HeaderAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.HeaderAttribute"/> class.
            </summary>
            <param name="text">The header text.</param>
        </member>
        <member name="T:FlaxEngine.HideInEditorAttribute">
            <summary>
            Makes a variable not show up in the editor.
            </summary>
        </member>
        <member name="M:FlaxEngine.HideInEditorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.HideInEditorAttribute"/> class.
            </summary>
        </member>
        <member name="T:FlaxEngine.LimitAttribute">
            <summary>
            Used to make a float or int variable in a script be restricted to a specific range.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.LimitAttribute.Min">
            <summary>
            The minimum range value.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAttribute.Max">
            <summary>
            The maximum range value.
            </summary>
        </member>
        <member name="F:FlaxEngine.LimitAttribute.SliderSpeed">
            <summary>
            The slider speed used to edit value.
            </summary>
        </member>
        <member name="M:FlaxEngine.LimitAttribute.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.LimitAttribute"/> class.
            </summary>
            <param name="min">The minimum limit value.</param>
            <param name="max">The maximum limit value.</param>
            <param name="sliderSpeed">The slider speed.</param>
        </member>
        <member name="T:FlaxEngine.MultilineTextAttribute">
            <summary>
            Instructs UI editor to use multiline textbox for editing <see cref="T:System.String"/> property or field.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:FlaxEngine.NoUndoAttribute">
            <summary>
            Makes a property to not use undo/redo when modifying it in Editor.
            </summary>
        </member>
        <member name="T:FlaxEngine.RangeAttribute">
            <summary>
            Used to make a float or int variable in a script be restricted to a specific range.
            When used, the float or int will be shown as a slider in the editor instead of default number field.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.RangeAttribute.Min">
            <summary>
            The minimum range value.
            </summary>
        </member>
        <member name="F:FlaxEngine.RangeAttribute.Max">
            <summary>
            The maximum range value.
            </summary>
        </member>
        <member name="M:FlaxEngine.RangeAttribute.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.RangeAttribute"/> class.
            </summary>
            <param name="min">The minimum range value.</param>
            <param name="max">The maximum range value.</param>
        </member>
        <member name="T:FlaxEngine.ReadOnlyAttribute">
            <summary>
            Makes a variable show up in the editor as read-only (editing is disabled).
            </summary>
        </member>
        <member name="T:FlaxEngine.ShowInEditorAttribute">
            <summary>
            Makes a variable show up in the editor.
            </summary>
            <remarks>
            If used on a private field/property you may also need to add <see cref="T:FlaxEngine.SerializeAttribute"/> to ensure that modified value is being serialized.
            </remarks>
        </member>
        <member name="T:FlaxEngine.SpaceAttribute">
            <summary>
            Inserts an empty space between controls in the editor.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.SpaceAttribute.Height">
            <summary>
            The spacing in pixel (vertically).
            </summary>
        </member>
        <member name="M:FlaxEngine.SpaceAttribute.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.SpaceAttribute"/> class.
            </summary>
            <param name="height">The spacing.</param>
        </member>
        <member name="T:FlaxEngine.TooltipAttribute">
            <summary>
            Specifies a tooltip for a property/field in the editor.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.TooltipAttribute.Text">
            <summary>
            The tooltip text.
            </summary>
        </member>
        <member name="M:FlaxEngine.TooltipAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.TooltipAttribute"/> class.
            </summary>
            <param name="text">The tooltip text.</param>
        </member>
        <member name="T:FlaxEngine.TypeReferenceAttribute">
            <summary>
            Specifies a options for an type reference picker in the editor. Allows to customize view or provide custom value assign policy (eg. restrict types to inherit from a given type).
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.TypeReferenceAttribute.TypeName">
            <summary>
            The full name of the type to link (includes types inheriting from it). Use null or empty to skip it.
            </summary>
        </member>
        <member name="F:FlaxEngine.TypeReferenceAttribute.CheckMethod">
            <summary>
            The name of the function (static or member) to invoke to check if the given type is valid to assign. Function must return boolean value and have one argument of type SystemType. Use null or empty to skip it.
            </summary>
        </member>
        <member name="M:FlaxEngine.TypeReferenceAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.TypeReferenceAttribute"/> class.
            </summary>
            <param name="typeName">The full name of the type to link (includes types inheriting from it). Use null or empty to skip it.</param>
            <param name="checkMethod"> The name of the function (static or member) to invoke to check if the given type is valid to assign. Function must return boolean value and have one argument of type SystemType. Use null or empty to skip it.</param>
        </member>
        <member name="M:FlaxEngine.TypeReferenceAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.TypeReferenceAttribute"/> class.
            </summary>
            <param name="typeName">The full name of the type to link (includes types inheriting from it). Use null or empty to skip it.</param>
            <param name="checkMethod"> The name of the function (static or member) to invoke to check if the given type is valid to assign. Function must return boolean value and have one argument of type SystemType. Use null or empty to skip it.</param>
        </member>
        <member name="T:FlaxEngine.VisibleIfAttribute">
            <summary>
            Shows property/field in the editor only if the specified member has a given value. Can be used to hide properties based on other properties (also private properties). The given member has to be bool type.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:FlaxEngine.VisibleIfAttribute.MemberName">
            <summary>
            The member name.
            </summary>
        </member>
        <member name="F:FlaxEngine.VisibleIfAttribute.Invert">
            <summary>
            True if invert member value when computing the visibility value.
            </summary>
        </member>
        <member name="M:FlaxEngine.VisibleIfAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.HeaderAttribute"/> class.
            </summary>
            <param name="memberName">The name of the field or property of the object. Must be a bool type.</param>
            <param name="invert">True if invert member value when computing the visibility value.</param>
        </member>
        <member name="T:FlaxEngine.ExecuteInEditModeAttribute">
            <summary>
            Makes a script execute in edit mode.
            </summary>
        </member>
        <member name="M:FlaxEngine.ExecuteInEditModeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.ExecuteInEditModeAttribute"/> class.
            </summary>
        </member>
        <member name="T:FlaxEngine.Mono.MonoPInvokeCallbackAttribute">
            <summary>
            Attribute necessary for AOT ports of Mono to mark methods that can be invoked by the native runtime.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:FlaxEngine.NoAnimateAttribute">
            <summary>
            Indicates that a member of a class cannot be animated by the scene animations system. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:FlaxEngine.NoAnimateAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.NoAnimateAttribute"/> class.
            </summary>
        </member>
        <member name="T:FlaxEngine.NoSerializeAttribute">
            <summary>
            Indicates that a field or a property of a serializable class should not be serialized. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:FlaxEngine.SerializeAttribute">
            <summary>
            Indicates that a field or a property of a serializable class should be serialized. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:FlaxEngine.UnmanagedAttribute">
            <summary>
            Marks the types and members defined in unmanaged code (native C++).
            </summary>
        </member>
        <member name="T:FlaxEngine.Object">
            <summary>
            Base class for all objects Flax can reference. Every object has unique identifier.
            </summary>
        </member>
        <member name="F:FlaxEngine.Object.__unmanagedPtr">
            <summary>
            The pointer to the unmanaged object (native C++ instance).
            </summary>
        </member>
        <member name="F:FlaxEngine.Object.__internalId">
            <summary>
            The object unique identifier.
            </summary>
        </member>
        <member name="P:FlaxEngine.Object.ID">
            <summary>
            Gets the unique object ID.
            </summary>
        </member>
        <member name="P:FlaxEngine.Object.TypeName">
            <summary>
            Gets a full name of the object type including leading namespace and any nested types names. Uniquely identifies the object type and can be used to find it via name.
            </summary>
        </member>
        <member name="M:FlaxEngine.Object.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Object"/>.
            </summary>
        </member>
        <member name="M:FlaxEngine.Object.Finalize">
            <summary>
            Notifies the unmanaged interop object that the managed instance was finalized.
            </summary>
        </member>
        <member name="M:FlaxEngine.Object.As``1">
            <summary>
            Casts this object instance to the given object type.
            </summary>
            <typeparam name="T">object actor type.</typeparam>
            <returns>The object instance cast to the given actor type.</returns>
        </member>
        <member name="M:FlaxEngine.Object.NewValue(System.Type)">
            <summary>
            Creates the new instance of the C# object.
            </summary>
            <param name="type">Type of the object.</param>
            <returns>Created object.</returns>
        </member>
        <member name="M:FlaxEngine.Object.New(System.String)">
            <summary>
            Creates the new instance of the Object.
            All unused objects should be released using <see cref="M:FlaxEngine.Object.Destroy(FlaxEngine.Object,System.Single)"/>.
            </summary>
            <param name="typeName">Full name of the type of the object.</param>
            <returns>Created object.</returns>
        </member>
        <member name="M:FlaxEngine.Object.New``1">
            <summary>
            Creates the new instance of the Object.
            All unused objects should be released using <see cref="M:FlaxEngine.Object.Destroy(FlaxEngine.Object,System.Single)"/>.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <returns>Created object.</returns>
        </member>
        <member name="M:FlaxEngine.Object.New(System.Type)">
            <summary>
            Creates the new instance of the Object.
            All unused objects should be released using <see cref="M:FlaxEngine.Object.Destroy(FlaxEngine.Object,System.Single)"/>.
            </summary>
            <param name="type">Type of the object.</param>
            <returns>Created object.</returns>
        </member>
        <member name="M:FlaxEngine.Object.Find``1(System.Guid@)">
            <summary>
            Finds the object with the given ID. Searches registered scene objects and assets.
            </summary>
            <param name="id">Unique ID of the object.</param>
            <typeparam name="T">Type of the object.</typeparam>
            <returns>Found object or null if missing.</returns>
        </member>
        <member name="M:FlaxEngine.Object.Find(System.Guid@,System.Type)">
            <summary>
            Finds the object with the given ID. Searches registered scene objects and assets.
            </summary>
            <param name="id">Unique ID of the object.</param>
            <param name="type">Type of the object.</param>
            <returns>Found object or null if missing.</returns>
        </member>
        <member name="M:FlaxEngine.Object.TryFind``1(System.Guid@)">
            <summary>
            Tries to find the object by the given identifier. Searches only registered scene objects.
            </summary>
            <param name="id">Unique ID of the object.</param>
            <typeparam name="T">Type of the object.</typeparam>
            <returns>Found object or null if missing.</returns>
        </member>
        <member name="M:FlaxEngine.Object.Destroy(FlaxEngine.Object,System.Single)">
            <summary>
            Destroys the specified object and clears the reference variable.
            The object obj will be destroyed now or after the time specified in seconds from now.
            If obj is a Script it will be removed from the Actor and deleted.
            If obj is an Actor it will be removed from the Scene and deleted as well as all its Scripts and all children of the Actor.
            Actual object destruction is always delayed until after the current Update loop, but will always be done before rendering.
            </summary>
            <param name="obj">The object to destroy.</param>
            <param name="timeLeft">The time left to destroy object (in seconds).</param>
        </member>
        <member name="M:FlaxEngine.Object.Destroy``1(``0@,System.Single)">
            <summary>
            Destroys the specified object and clears the reference variable.
            The object obj will be destroyed now or after the time specified in seconds from now.
            If obj is a Script it will be removed from the Actor and deleted.
            If obj is an Actor it will be removed from the Scene and deleted as well as all its Scripts and all children of the Actor.
            Actual object destruction is always delayed until after the current Update loop, but will always be done before rendering.
            </summary>
            <param name="obj">The object to destroy.</param>
            <param name="timeLeft">The time left to destroy object (in seconds).</param>
        </member>
        <member name="M:FlaxEngine.Object.op_Implicit(FlaxEngine.Object)~System.Boolean">
            <summary>
            Checks if the object exists (reference is not null and the unmanaged object pointer is valid).
            </summary>
            <param name="obj">The object to check.</param>
            <returns>True if object is valid, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Object.GetUnmanagedPtr(FlaxEngine.Object)">
            <summary>
            Gets the pointer to the native object. Handles null object reference (returns zero).
            </summary>
            <param name="obj">The object.</param>
            <returns>The native object pointer.</returns>
        </member>
        <member name="M:FlaxEngine.Object.GetUnmanagedInterface(System.Object,System.Type)">
            <summary>
            Gets the pointer to the native interface implementation. Handles null object reference or invalid cast (returns zero).
            </summary>
            <param name="obj">The object.</param>
            <param name="type">The interface type.</param>
            <returns>The native interface pointer.</returns>
        </member>
        <member name="M:FlaxEngine.Object.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GamePlugin">
            <summary>
            Base class for all plugins used at runtime in game.
            </summary>
            <remarks>
            Plugins should have a public and parameter-less constructor.
            </remarks>
            <seealso cref="T:FlaxEngine.Plugin" />
        </member>
        <member name="T:FlaxEngine.Plugin">
            <summary>
            Base class for game engine editor plugins.
            </summary>
            <remarks>
            Plugins should have a public and parameter-less constructor.
            </remarks>
        </member>
        <member name="P:FlaxEngine.Plugin.Description">
            <summary>
            Gets the description.
            </summary>
            <remarks>
            Plugin description should be a constant part of the plugin created in constructor and valid before calling <see cref="M:FlaxEngine.Plugin.Initialize"/>.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Plugin.Initialize">
            <summary>
            Initialization method called when this plugin is loaded to the memory and can be used.
            </summary>
        </member>
        <member name="M:FlaxEngine.Plugin.Deinitialize">
            <summary>
            Cleanup method called when this plugin is being unloaded or reloaded or engine is closing.
            </summary>
        </member>
        <member name="T:FlaxEngine.PluginDescription">
            <summary>
            The engine plugin description container.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.Name">
            <summary>
            The name of the plugin.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.Version">
            <summary>
            The version of the plugin.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.Author">
            <summary>
            The name of the author of the plugin.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.AuthorUrl">
            <summary>
            The plugin author website URL.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.HomepageUrl">
            <summary>
            The homepage URL for the plugin.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.RepositoryUrl">
            <summary>
            The plugin repository URL (for open-source plugins).
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.Description">
            <summary>
            The plugin description.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.Category">
            <summary>
            The plugin category.
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.IsBeta">
            <summary>
            True if plugin is during Beta tests (before release).
            </summary>
        </member>
        <member name="F:FlaxEngine.PluginDescription.IsAlpha">
            <summary>
            True if plugin is during Alpha tests (early version).
            </summary>
        </member>
        <member name="T:FlaxEngine.PluginDelegate">
            <summary>
            Plugin related event delegate type.
            </summary>
            <param name="plugin">The plugin.</param>
        </member>
        <member name="T:FlaxEngine.MainThreadTaskScheduler">
            <summary>
            The async tasks scheduler that runs the tasks on a main thread during game update.
            </summary>
            <seealso cref="T:System.Threading.Tasks.TaskScheduler" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:FlaxEngine.MainThreadTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.MainThreadTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.MainThreadTaskScheduler.GetScheduledTasks">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.MainThreadTaskScheduler.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Scripting">
            <summary>
            C# scripting service.
            </summary>
        </member>
        <member name="E:FlaxEngine.Scripting.Update">
            <summary>
            Occurs on scripting update.
            </summary>
        </member>
        <member name="E:FlaxEngine.Scripting.LateUpdate">
            <summary>
            Occurs on scripting 'late' update.
            </summary>
        </member>
        <member name="E:FlaxEngine.Scripting.FixedUpdate">
            <summary>
            Occurs on scripting `fixed` update.
            </summary>
        </member>
        <member name="E:FlaxEngine.Scripting.Draw">
            <summary>
            Occurs on scripting `draw` update. Called during frame rendering and can be used to invoke custom rendering with GPUDevice.
            </summary>
        </member>
        <member name="E:FlaxEngine.Scripting.Exit">
            <summary>
            Occurs when scripting engine is disposing. Engine is during closing and some services may be unavailable (eg. loading scenes). This may be called after the engine fatal error event.
            </summary>
        </member>
        <member name="P:FlaxEngine.Scripting.MainThreadScheduler">
            <summary>
            Gets the async tasks scheduler that runs the tasks on a main thread during game update.
            </summary>
        </member>
        <member name="M:FlaxEngine.Scripting.InvokeOnUpdate(System.Action)">
            <summary>
            Calls the given action on the next scripting update.
            </summary>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="M:FlaxEngine.Scripting.RunOnUpdate(System.Action)">
            <summary>
            Queues the specified work to run on the main thread and returns a <see cref="T:System.Threading.Tasks.Task" /> object that represents that work.
            </summary>
            <param name="action">The work to execute asynchronously</param>
            <returns>A task that represents the work queued to execute in the pool.</returns>
        </member>
        <member name="M:FlaxEngine.Scripting.Init">
            <summary>
            Initializes Flax API. Called before everything else from native code.
            </summary>
        </member>
        <member name="M:FlaxEngine.Scripting.SetWindow(FlaxEngine.Window)">
            <summary>
            Sets the managed window as a main game window. Called after creating game window by the native code.
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="M:FlaxEngine.Scripting.HasGameModulesLoaded">
            <summary>
            Returns true if game scripts assembly has been loaded.
            </summary>
            <returns>True if game scripts assembly is loaded, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Scripting.IsTypeFromGameScripts(System.Type)">
            <summary>
            Returns true if given type is from one of the game scripts assemblies.
            </summary>
            <returns>True if the type is from game assembly, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Scripting.FlushRemovedObjects">
            <summary>
            Flushes the removed objects (disposed objects using Object.Destroy).
            </summary>
        </member>
        <member name="T:FlaxEngine.Profiler">
            <summary>
            Provides C# scripts profiling methods.
            </summary>
            <remarks>
            Profiler is available in the editor and Debug/Development builds. Release builds don't have profiling tools.
            </remarks>
        </member>
        <member name="M:FlaxEngine.Profiler.BeginEvent(System.String)">
            <summary>
            Begins profiling a piece of code with a custom label.
            </summary>
            <param name="name">The name of the event.</param>
        </member>
        <member name="M:FlaxEngine.Profiler.EndEvent">
            <summary>
            Ends profiling an event.
            </summary>
        </member>
        <member name="M:FlaxEngine.Profiler.BeginEventGPU(System.String)">
            <summary>
            Begins GPU profiling a piece of code with a custom label.
            </summary>
            <param name="name">The name of the event.</param>
        </member>
        <member name="M:FlaxEngine.Profiler.EndEventGPU">
            <summary>
            Ends GPU profiling an event.
            </summary>
        </member>
        <member name="T:FlaxEngine.SoftObjectReference">
            <summary>
            The scripting object soft reference. Objects gets referenced on use (ID reference is resolving it).
            </summary>
        </member>
        <member name="P:FlaxEngine.SoftObjectReference.ID">
            <summary>
            Gets or sets the object identifier.
            </summary>
        </member>
        <member name="M:FlaxEngine.SoftObjectReference.Get``1">
            <summary>
            Gets the object reference.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <returns>The resolved object or null.</returns>
        </member>
        <member name="M:FlaxEngine.SoftObjectReference.Set(FlaxEngine.Object)">
            <summary>
            Sets the object reference.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:FlaxEngine.SoftObjectReference.ToString">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.SoftObjectReference.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.SoftObjectReference.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.SoftObjectReference.CompareTo(FlaxEngine.SoftObjectReference)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.GPUTextureBrush">
            <summary>
            Implementation of <see cref="T:FlaxEngine.GUI.IBrush"/> for <see cref="T:FlaxEngine.GPUTexture"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.IBrush" />
        </member>
        <member name="F:FlaxEngine.GUI.GPUTextureBrush.Texture">
            <summary>
            The GPU texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.GPUTextureBrush.Filter">
            <summary>
            The texture sampling filter mode.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.GPUTextureBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.GPUTextureBrush"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.GPUTextureBrush.#ctor(FlaxEngine.GPUTexture)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.GPUTextureBrush"/> struct.
            </summary>
            <param name="texture">The GPU texture.</param>
        </member>
        <member name="P:FlaxEngine.GUI.GPUTextureBrush.Size">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.GPUTextureBrush.Draw(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.BrushFilter">
            <summary>
            Texture brush sampling modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.BrushFilter.Point">
            <summary>
            The point sampling without blending.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.BrushFilter.Linear">
            <summary>
            The linear color sampling.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.IBrush">
            <summary>
            Interface that unifies input source textures, sprites, render targets, and any other brushes to be used in a more generic way.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.IBrush.Size">
            <summary>
            Gets the size of the image brush in pixels (if relevant).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.IBrush.Draw(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <summary>
            Draws the specified image using <see cref="T:FlaxEngine.Render2D"/> graphics backend.
            </summary>
            <param name="rect">The draw area rectangle.</param>
            <param name="color">The color.</param>
        </member>
        <member name="T:FlaxEngine.GUI.LinearGradientBrush">
            <summary>
            Implementation of <see cref="T:FlaxEngine.GUI.IBrush"/> for linear color gradient (made of 2 color).
            </summary>
            <seealso cref="T:FlaxEngine.GUI.IBrush" />
        </member>
        <member name="F:FlaxEngine.GUI.LinearGradientBrush.StartColor">
            <summary>
            The brush start color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.LinearGradientBrush.EndColor">
            <summary>
            The brush end color.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.LinearGradientBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.LinearGradientBrush"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.LinearGradientBrush.#ctor(FlaxEngine.Color,FlaxEngine.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.LinearGradientBrush"/> struct.
            </summary>
            <param name="startColor">The start color.</param>
            <param name="endColor">The end color.</param>
        </member>
        <member name="P:FlaxEngine.GUI.LinearGradientBrush.Size">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.LinearGradientBrush.Draw(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.MaterialBrush">
            <summary>
            Implementation of <see cref="T:FlaxEngine.GUI.IBrush"/> for <see cref="T:FlaxEngine.MaterialBase"/> rendering.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.IBrush" />
        </member>
        <member name="F:FlaxEngine.GUI.MaterialBrush.Material">
            <summary>
            The material.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.MaterialBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.MaterialBrush"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.MaterialBrush.#ctor(FlaxEngine.Material)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.MaterialBrush"/> struct.
            </summary>
            <param name="material">The material.</param>
        </member>
        <member name="P:FlaxEngine.GUI.MaterialBrush.Size">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.MaterialBrush.Draw(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.SolidColorBrush">
            <summary>
            Implementation of <see cref="T:FlaxEngine.GUI.IBrush"/> for single color fill.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.IBrush" />
        </member>
        <member name="F:FlaxEngine.GUI.SolidColorBrush.Color">
            <summary>
            The brush color.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.SolidColorBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.SolidColorBrush"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.SolidColorBrush.#ctor(FlaxEngine.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.SolidColorBrush"/> struct.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="P:FlaxEngine.GUI.SolidColorBrush.Size">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SolidColorBrush.Draw(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.SpriteBrush">
            <summary>
            Implementation of <see cref="T:FlaxEngine.GUI.IBrush"/> for <see cref="T:FlaxEngine.Sprite"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.IBrush" />
        </member>
        <member name="F:FlaxEngine.GUI.SpriteBrush.Sprite">
            <summary>
            The sprite.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.SpriteBrush.Filter">
            <summary>
            The texture sampling filter mode.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.SpriteBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.SpriteBrush"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.SpriteBrush.#ctor(FlaxEngine.SpriteHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.SpriteBrush"/> struct.
            </summary>
            <param name="sprite">The sprite.</param>
        </member>
        <member name="P:FlaxEngine.GUI.SpriteBrush.Size">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SpriteBrush.Draw(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Sprite9SlicingBrush">
            <summary>
            Implementation of <see cref="T:FlaxEngine.GUI.IBrush"/> for <see cref="T:FlaxEngine.Sprite"/> using 9-slicing.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.IBrush" />
        </member>
        <member name="F:FlaxEngine.GUI.Sprite9SlicingBrush.Sprite">
            <summary>
            The sprite.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Sprite9SlicingBrush.Filter">
            <summary>
            The texture sampling filter mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Sprite9SlicingBrush.BorderSize">
            <summary>
            The border size.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Sprite9SlicingBrush.Border">
            <summary>
            The sprite borders (in texture space, range 0-1).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Sprite9SlicingBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Sprite9SlicingBrush"/> class.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Sprite9SlicingBrush.Size">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Sprite9SlicingBrush.Draw(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.TextureBrush">
            <summary>
            Implementation of <see cref="T:FlaxEngine.GUI.IBrush"/> for <see cref="T:FlaxEngine.Texture"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.IBrush" />
        </member>
        <member name="F:FlaxEngine.GUI.TextureBrush.Texture">
            <summary>
            The texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextureBrush.Filter">
            <summary>
            The texture sampling filter mode.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextureBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.TextureBrush"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextureBrush.#ctor(FlaxEngine.Texture)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.TextureBrush"/> struct.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="P:FlaxEngine.GUI.TextureBrush.Size">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextureBrush.Draw(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Texture9SlicingBrush">
            <summary>
            Implementation of <see cref="T:FlaxEngine.GUI.IBrush"/> for <see cref="T:FlaxEngine.Texture"/> using 9-slicing.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.IBrush" />
        </member>
        <member name="F:FlaxEngine.GUI.Texture9SlicingBrush.Texture">
            <summary>
            The texture.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Texture9SlicingBrush.Filter">
            <summary>
            The texture sampling filter mode.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Texture9SlicingBrush.BorderSize">
            <summary>
            The border size.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Texture9SlicingBrush.Border">
            <summary>
            The texture borders (in texture space, range 0-1).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Texture9SlicingBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Texture9SlicingBrush"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Texture9SlicingBrush.#ctor(FlaxEngine.Texture)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Texture9SlicingBrush"/> struct.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="P:FlaxEngine.GUI.Texture9SlicingBrush.Size">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Texture9SlicingBrush.Draw(FlaxEngine.Rectangle,FlaxEngine.Color)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.CanvasContainer">
            <summary>
            The root container control used to sort and manage child UICanvas controls. Helps with sending input events.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.SortCanvases">
            <summary>
            Sorts the canvases by order.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnChildrenChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.DrawChildren">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.IntersectsChildContent(FlaxEngine.GUI.Control,FlaxEngine.Vector2,FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasContainer.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.CanvasRootControl">
            <summary>
            Root control implementation used by the <see cref="T:FlaxEngine.UICanvas"/> actor.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.RootControl" />
        </member>
        <member name="P:FlaxEngine.GUI.CanvasRootControl.Canvas">
            <summary>
            Gets the owning canvas.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CanvasRootControl.Is2D">
            <summary>
            Gets a value indicating whether canvas is 2D (screen-space).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CanvasRootControl.Is3D">
            <summary>
            Gets a value indicating whether canvas is 3D (world-space or camera-space).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.#ctor(FlaxEngine.UICanvas)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.CanvasRootControl"/> class.
            </summary>
            <param name="canvas">The canvas.</param>
        </member>
        <member name="P:FlaxEngine.GUI.CanvasRootControl.Cursor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.CanvasRootControl.FocusedControl">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.CanvasRootControl.TrackingMouseOffset">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.CanvasRootControl.MousePosition">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.StartTrackingMouse(FlaxEngine.GUI.Control,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.EndTrackingMouse">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.GetKey(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.GetKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.GetKeyUp(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.GetMouseButton(FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.GetMouseButtonDown(FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.GetMouseButtonUp(FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.PointToParent(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.ContainsPoint(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnCharInput(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnKeyUp(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnTouchEnter(FlaxEngine.Vector2,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnTouchDown(FlaxEngine.Vector2,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnTouchMove(FlaxEngine.Vector2,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnTouchUp(FlaxEngine.Vector2,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.OnTouchLeave(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.Focus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CanvasRootControl.DoDragDrop(FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Border">
            <summary>
            Border control that draws the border around the control edges (inner and outer sides).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Border.BorderColor">
            <summary>
            Gets or sets the color used to draw border lines.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Border.BorderWidth">
            <summary>
            The border lines width.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Border.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Border"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Border.DrawSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Button">
            <summary>
            Button control
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Button.DefaultHeight">
            <summary>
            The default height fro the buttons.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Button._isPressed">
            <summary>
            True if button is being pressed (by mouse or touch).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Button._font">
            <summary>
            The font.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Button._text">
            <summary>
            The text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.Text">
            <summary>
            Button text property.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.Font">
            <summary>
            Gets or sets the font used to draw button text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.TextMaterial">
            <summary>
            Gets or sets the custom material used to render the text. It must has domain set to GUI and have a public texture parameter named Font used to sample font atlas texture with font characters data.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Button.TextColor">
            <summary>
            Gets or sets the color used to draw button text.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.Button.Clicked">
            <summary>
            Event fired when user clicks on the button.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.Button.ButtonClicked">
            <summary>
            Event fired when user clicks on the button.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.BackgroundBrush">
            <summary>
            Gets or sets the brush used for background drawing.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.BackgroundColorSelected">
            <summary>
            Gets or sets the background color when button is selected.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.BorderColorSelected">
            <summary>
            Gets or sets the border color when button is selected.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.BackgroundColorHighlighted">
            <summary>
            Gets or sets the background color when button is highlighted.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.BorderColorHighlighted">
            <summary>
            Gets or sets the border color when button is highlighted.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Button.IsPressed">
            <summary>
            Gets a value indicating whether this button is being pressed (by mouse or touch).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Button.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Button"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Button.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Button"/> class.
            </summary>
            <param name="x">Position X coordinate</param>
            <param name="y">Position Y coordinate</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:FlaxEngine.GUI.Button.#ctor(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Button"/> class.
            </summary>
            <param name="location">Position</param>
            <param name="size">Size</param>
        </member>
        <member name="M:FlaxEngine.GUI.Button.OnClick">
            <summary>
            Called when mouse or touch clicks the button.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Button.OnPressBegin">
            <summary>
            Called when button starts to be pressed by the used (via mouse or touch).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Button.OnPressEnd">
            <summary>
            Called when button ends to be pressed by the used (via mouse or touch).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Button.SetColors(FlaxEngine.Color)">
            <summary>
            Sets the button colors palette based on a given main color.
            </summary>
            <param name="color">The main color.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Button.DrawSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Button.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Button.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Button.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Button.OnTouchDown(FlaxEngine.Vector2,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Button.OnTouchUp(FlaxEngine.Vector2,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Button.OnTouchLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Button.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Button.OnSubmit">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.CheckBoxState">
            <summary>
            The checkbox control states.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.CheckBoxState.Default">
            <summary>
            The default state.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.CheckBoxState.Checked">
            <summary>
            The checked state.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.CheckBoxState.Intermediate">
            <summary>
            The intermediate state.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.CheckBox">
            <summary>
            Check box control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEngine.GUI.CheckBox._isPressed">
            <summary>
            True if checked is being pressed (by mouse or touch).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.CheckBox._state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.CheckBox._mouseOverBox">
            <summary>
            The mouse over box state.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.CheckBox._boxSize">
            <summary>
            The box size.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.CheckBox._box">
            <summary>
            The box rectangle.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.State">
            <summary>
            Gets or sets the state of the checkbox.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.Checked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FlaxEngine.GUI.CheckBox"/> is checked.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.Intermediate">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FlaxEngine.GUI.CheckBox"/> is in the intermediate state.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.BoxSize">
            <summary>
            Gets or sets the size of the box.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.ImageColor">
            <summary>
            Gets or sets the color of the checkbox icon.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.BorderColorHighlighted">
            <summary>
            Gets or sets the border color when checkbox is hovered.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.CheckedImage">
            <summary>
            Gets or sets the image used to render checkbox checked state.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.CheckBox.IntermediateImage">
            <summary>
            Gets or sets the image used to render checkbox intermediate state.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.CheckBox.StateChanged">
            <summary>
            Event fired when 'checked' state gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.CheckBox"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.#ctor(System.Single,System.Single,System.Boolean,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.CheckBox"/> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="isChecked">if set to <c>true</c> set checked on start.</param>
            <param name="size">The checkbox size.</param>
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.Toggle">
            <summary>
            Toggles the checked state.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.OnClick">
            <summary>
            Called when mouse or touch clicks the checkbox.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.OnPressBegin">
            <summary>
            Called when checkbox starts to be pressed by the used (via mouse or touch).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.OnPressEnd">
            <summary>
            Called when checkbox ends to be pressed by the used (via mouse or touch).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.OnTouchDown(FlaxEngine.Vector2,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.OnTouchUp(FlaxEngine.Vector2,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.OnTouchLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.OnSizeChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.CheckBox.OnSubmit">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Dropdown">
            <summary>
            Dropdown menu control allows to choose one item from the provided collection of options.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="T:FlaxEngine.GUI.Dropdown.DropdownRoot">
            <summary>
            The root control used by the <see cref="T:FlaxEngine.GUI.Dropdown"/> to show the items collections and track item selecting event.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Panel" />
        </member>
        <member name="F:FlaxEngine.GUI.Dropdown.DropdownRoot.LostFocus">
            <summary>
            Occurs when popup lost focus.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.DropdownRoot.OnEndContainsFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.DropdownRoot.OnNavigate(FlaxEngine.GUI.NavDirection,FlaxEngine.Vector2,FlaxEngine.GUI.Control,System.Collections.Generic.List{FlaxEngine.GUI.Control})">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.DropdownRoot.OnSubmit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.DropdownRoot.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.DropdownLabel.OnSubmit">
            <inheritdoc />
        </member>
        <member name="F:FlaxEngine.GUI.Dropdown._items">
            <summary>
            The items.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Dropdown._popup">
            <summary>
            The popup menu. May be null if has not been used yet.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Dropdown._selectedIndex">
            <summary>
            The selected index of the item (-1 for no selection).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.Items">
            <summary>
            Gets or sets the items collection.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.SelectedItem">
            <summary>
            Gets or sets the selected item (returns <see cref="F:System.String.Empty"/> if no item is being selected).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.SelectedItemLocalized">
            <summary>
            Gets or sets the selected item (returns <see cref="F:FlaxEngine.LocalizedString.Empty"/> if no item is being selected).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.SelectedIndex">
            <summary>
            Gets or sets the index of the selected.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.Dropdown.SelectedIndexChanged">
            <summary>
            Event fired when selected index gets changed.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.IsPopupOpened">
            <summary>
            Gets a value indicating whether this popup menu is opened.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.Font">
            <summary>
            Gets or sets the font used to draw text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.FontMaterial">
            <summary>
            Gets or sets the custom material used to render the text. It must has domain set to GUI and have a public texture parameter named Font used to sample font atlas texture with font characters data.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.BackgroundColorSelected">
            <summary>
            Gets or sets the background color when dropdown popup is opened.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.BorderColorSelected">
            <summary>
            Gets or sets the border color when dropdown popup is opened.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.BackgroundColorHighlighted">
            <summary>
            Gets or sets the background color when dropdown is highlighted.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.BorderColorHighlighted">
            <summary>
            Gets or sets the border color when dropdown is highlighted.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.ArrowImage">
            <summary>
            Gets or sets the image used to render dropdown drop arrow icon.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.ArrowColor">
            <summary>
            Gets or sets the color used to render dropdown drop arrow icon.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.ArrowColorSelected">
            <summary>
            Gets or sets the color used to render dropdown drop arrow icon (menu is opened).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.ArrowColorHighlighted">
            <summary>
            Gets or sets the color used to render dropdown drop arrow icon (menu is highlighted).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Dropdown.CheckedImage">
            <summary>
            Gets or sets the image used to render dropdown checked item icon.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Dropdown"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.ClearItems">
            <summary>
            Clears the items.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.AddItem(System.String)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.AddItems(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.SetItems(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnSelectedIndexChanged">
            <summary>
            Called when selected item index gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnItemClicked(System.Int32)">
            <summary>
            Called when item is clicked.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.CreatePopup">
            <summary>
            Creates the popup menu (including items collection).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnPopupShow">
            <summary>
            Called when popup menu gets shown.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnPopupHide">
            <summary>
            Called when popup menu gets hidden.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.DestroyPopup">
            <summary>
            Destroys the popup.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.ShowPopup">
            <summary>
            Shows the popup.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.HidePopup">
            <summary>
            Hides the popup.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.DrawSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnTouchDown(FlaxEngine.Vector2,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnTouchUp(FlaxEngine.Vector2,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnTouchLeave(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Dropdown.OnSubmit">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Image">
            <summary>
            The basic GUI image control. Shows texture, sprite or render target.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEngine.GUI.Image.Brush">
            <summary>
            Gets or sets the image source.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Image.Margin">
            <summary>
            Gets or sets the margin for the image.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Image.Color">
            <summary>
            Gets or sets the color used to multiply the image pixels.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Image.MouseOverColor">
            <summary>
            Gets or sets the color used to multiply the image pixels when mouse is over the image.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Image.DisabledTint">
            <summary>
            Gets or sets the color used to multiply the image pixels when control is disabled.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Image.KeepAspectRatio">
            <summary>
            Gets or sets a value indicating whether keep aspect ratio when drawing the image.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.Image.Clicked">
            <summary>
            Occurs when mouse clicks on the image.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Image.#ctor">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Image.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Image.#ctor(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Image.#ctor(FlaxEngine.Rectangle)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Image.DrawSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Image.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Label">
            <summary>
            The basic GUI label control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEngine.GUI.Label._text">
            <summary>
            The text.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Label._font">
            <summary>
            The font.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.TextColorHighlighted">
            <summary>
            Gets or sets the color of the text when it is highlighted (mouse is over).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal text alignment within the control bounds.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.VerticalAlignment">
            <summary>
            Gets or sets the vertical text alignment within the control bounds.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.Wrapping">
            <summary>
            Gets or sets the text wrapping within the control bounds.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.Font">
            <summary>
            Gets or sets the font.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.Material">
            <summary>
            Gets or sets the custom material used to render the text. It must has domain set to GUI and have a public texture parameter named Font used to sample font atlas texture with font characters data.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.Margin">
            <summary>
            Gets or sets the margin for the text within the control bounds.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.ClipText">
            <summary>
            Gets or sets a value indicating whether clip text during rendering.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.AutoWidth">
            <summary>
            Gets or sets a value indicating whether set automatic width based on text contents.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.AutoHeight">
            <summary>
            Gets or sets a value indicating whether set automatic height based on text contents.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.AutoFitText">
            <summary>
            Gets or sets a value indicating whether scale text to fit the label control bounds. Disables using text alignment, automatic width and height.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Label.AutoFitTextRange">
            <summary>
            Gets or sets the text scale range (min and max) for automatic fit text option. Can be used to constraint the text scale adjustment.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Label.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Label"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Label.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Label.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Label.PerformLayoutBeforeChildren">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.ProgressBar">
            <summary>
            Progress bar control shows visual progress of the action or set of actions.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEngine.GUI.ProgressBar._value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ProgressBar._current">
            <summary>
            The current value (used to apply smooth progress changes).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ProgressBar._minimum">
            <summary>
            The minimum progress value.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ProgressBar._maximum">
            <summary>
            The maximum progress value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ProgressBar.SmoothingScale">
            <summary>
            Gets or sets the value smoothing scale (0 to not use it).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ProgressBar.UseSmoothing">
            <summary>
            Gets a value indicating whether use progress value smoothing.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ProgressBar.Minimum">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ProgressBar.Maximum">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ProgressBar.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ProgressBar.BarMargin">
            <summary>
            Gets or sets the margin for the progress bar rectangle within the control bounds.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ProgressBar.BarColor">
            <summary>
            Gets or sets the color of the progress bar rectangle.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ProgressBar.BarBrush">
            <summary>
            Gets or sets the brush used for progress bar drawing.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ProgressBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ProgressBar"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ProgressBar.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ProgressBar"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ProgressBar.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ProgressBar.DrawSelf">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.RenderToTextureControl">
            <summary>
            UI container control that can render children to texture and display pre-cached texture instead of drawing children every frame. It can be also used to render part of UI to texture and use it in material or shader.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderToTextureControl.Texture">
            <summary>
            Gets the texture with cached children controls.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderToTextureControl.AutomaticTextureSize">
            <summary>
            Gets or sets a value indicating whether automatically update size of texture when control dimensions gets changed.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderToTextureControl.TextureSize">
            <summary>
            Gets or sets the size of the texture (in pixels).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderToTextureControl.AutomaticInvalidate">
            <summary>
            Gets or sets the value whether cached texture data should be invalidated automatically (eg. when child control changes). 
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RenderToTextureControl.Invalidate">
            <summary>
            Invalidates the cached image of children controls and invokes the redraw to the texture.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RenderToTextureControl.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RenderToTextureControl.OnSizeChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RenderToTextureControl.OnChildResized(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RenderToTextureControl.OnChildrenChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RenderToTextureControl.PerformLayoutBeforeChildren">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RenderToTextureControl.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.RichTextBox">
            <summary>
            Rich text box control which can gather text input from the user and present text in highly formatted and stylized way.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RichTextBox.TextStyle">
            <summary>
            The text style applied to the whole text.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.RichTextBox"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBox.OnParseTextBlocks">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.RichTextBoxBase">
            <summary>
            Base class for all rich text box controls which can gather text input from the user and present text in highly formatted and stylized way.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.RichTextBoxBase.ParseTextBlocksDelegate">
            <summary>
            The delegate for text blocks processing.
            </summary>
            <param name="text">The text.</param>
            <param name="textBlocks">The output text blocks. Given list is not-nul and cleared before.</param>
        </member>
        <member name="F:FlaxEngine.GUI.RichTextBoxBase._textBlocks">
            <summary>
            The text blocks.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.RichTextBoxBase.ParseTextBlocks">
            <summary>
            The custom callback for parsing text blocks.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBoxBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.RichTextBoxBase"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBoxBase.GetTextBlock(System.Int32,FlaxEngine.GUI.TextBlock@)">
            <summary>
            Gets the text block of the character at the given index.
            </summary>
            <param name="index">The character index.</param>
            <param name="result">The result text block descriptor.</param>
            <returns>True if got text block, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBoxBase.UpdateTextBlocks">
            <summary>
            Updates the text blocks.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBoxBase.OnParseTextBlocks">
            <summary>
            Called when text blocks needs to be updated from the current text.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBoxBase.OnTextChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBoxBase.GetTextSize">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBoxBase.GetCharPosition(System.Int32,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBoxBase.HitTestText(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBoxBase.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBoxBase.DrawSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RichTextBoxBase.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Spacer">
            <summary>
            Helper control used to insert blank space into the layout.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="M:FlaxEngine.GUI.Spacer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Spacer"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Spacer.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Spacer"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="T:FlaxEngine.GUI.TextBox">
            <summary>
            Text box control which can gather text input from the user.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBox._watermarkText">
            <summary>
            The watermark text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.WatermarkText">
            <summary>
            Gets or sets the watermark text to show grayed when textbox is empty.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.Wrapping">
            <summary>
            Gets or sets the text wrapping within the control bounds.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.Font">
            <summary>
            Gets or sets the font.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.TextMaterial">
            <summary>
            Gets or sets the custom material used to render the text. It must has domain set to GUI and have a public texture parameter named Font used to sample font atlas texture with font characters data.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.WatermarkTextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBox.SelectionColor">
            <summary>
            Gets or sets the color of the selection (Transparent if not used).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.TextBox"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.#ctor(System.Boolean,System.Single,System.Single,System.Single)">
            <summary>
            Init
            </summary>
            <param name="isMultiline">Enable/disable multiline text input support</param>
            <param name="x">Position X coordinate</param>
            <param name="y">Position Y coordinate</param>
            <param name="width">Width</param>
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.GetTextSize">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.GetCharPosition(System.Int32,System.Single@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.HitTestText(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.OnIsMultilineChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.DrawSelf">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBox.OnSizeChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.TextBoxBase">
            <summary>
            Base class for all text box controls which can gather text input from the user.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase.Separators">
            <summary>
            The text separators (used for words skipping).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase.DefaultHeight">
            <summary>
            Default height of the text box
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase.DefaultMargin">
            <summary>
            Left and right margin for text inside the text box bounds rectangle
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._text">
            <summary>
            The current text value.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._onStartEditValue">
            <summary>
            The text value captured when user started editing text. Used to detect content modification.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._isEditing">
            <summary>
            Flag used to indicate whenever user is editing the text.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._viewOffset">
            <summary>
            The view offset
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._targetViewOffset">
            <summary>
            The target view offset.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._textSize">
            <summary>
            The text size calculated from font.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._isMultiline">
            <summary>
            Flag used to indicate whenever text can contain multiple lines.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._isReadOnly">
            <summary>
            Flag used to indicate whenever text is read-only and cannot be modified by the user.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._maxLength">
            <summary>
            The maximum length of the text.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._isSelecting">
            <summary>
            Flag used to indicate whenever user is selecting text.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._selectionStart">
            <summary>
            The selection start position (character index).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._selectionEnd">
            <summary>
            The selection end position (character index).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBoxBase._animateTime">
            <summary>
            The animate time for selection.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.TextBoxBase.TextChanged">
            <summary>
            Event fired when text gets changed
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.TextBoxBase.EditEnd">
            <summary>
            Event fired when text gets changed after editing (user accepted entered value).
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.TextBoxBase.TextBoxEditEnd">
            <summary>
            Event fired when text gets changed after editing (user accepted entered value).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.IsMultiline">
            <summary>
            Gets or sets a value indicating whether this is a multiline text box control.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.MaxLength">
            <summary>
            Gets or sets the maximum number of characters the user can type into the text box control.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether text in the text box is read-only. 
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.BackgroundSelectedColor">
            <summary>
            Gets or sets textbox background color when the control is selected (has focus).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.CaretColor">
            <summary>
            Gets or sets the color of the caret (Transparent if not used).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.CaretFlashSpeed">
            <summary>
            Gets or sets the speed of the caret flashing animation.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.BackgroundSelectedFlashSpeed">
            <summary>
            Gets or sets the speed of the selection background flashing animation.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.BorderColor">
            <summary>
            Gets or sets the color of the border (Transparent if not used).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.BorderSelectedColor">
            <summary>
            Gets or sets the color of the border when control is focused (Transparent if not used).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.TextSize">
            <summary>
            Gets the size of the text (cached).
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.TextBoxBase.TargetViewOffsetChanged">
            <summary>
            Occurs when target view offset gets changed.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.ViewOffset">
            <summary>
            Gets the current view offset (text scrolling offset). Includes the smoothing.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.TargetViewOffset">
            <summary>
            Gets or sets the target view offset (text scrolling offset).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.IsEditing">
            <summary>
            Gets a value indicating whether user is editing the text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.Text">
            <summary>
            Gets or sets text property.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.SetText(System.String)">
            <summary>
            Sets the text (forced, even if user is editing it).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.SetTextAsUser(System.String)">
            <summary>
            Sets the text as it was entered by user (focus, change value, defocus).
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.TextLength">
            <summary>
            Gets length of the text
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.SelectedText">
            <summary>
            Gets the currently selected text in the control.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.SelectionLength">
            <summary>
            Gets the number of characters selected in the text box.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.SelectionRange">
            <summary>
            Gets or sets the selection range.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.HasSelection">
            <summary>
            Returns true if any text is selected, otherwise false
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.SelectionLeft">
            <summary>
            Index of the character on left edge of the selection
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.SelectionRight">
            <summary>
            Index of the character on right edge of the selection
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.CaretPosition">
            <summary>
            Gets current caret position (index of the character)
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.CaretBounds">
            <summary>
            Calculates the caret rectangle.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.TextRectangle">
            <summary>
            Gets rectangle with area for text
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TextBoxBase.TextClipRectangle">
            <summary>
            Gets rectangle used to clip text
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.TextBoxBase"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.#ctor(System.Boolean,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.TextBoxBase"/> class.
            </summary>
            <param name="isMultiline">Enable/disable multiline text input support.</param>
            <param name="x">The control position X coordinate.</param>
            <param name="y">The control position Y coordinate.</param>
            <param name="width">The control width.</param>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.Clear">
            <summary>
            Clears all text from the text box control. 
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.ClearSelection">
            <summary>
            Clear selection range
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.ResetViewOffset">
            <summary>
            Resets the view offset (text scroll view).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnTargetViewOffsetChanged">
            <summary>
            Called when target view offset gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.Copy">
            <summary>
            Copies the current selection in the text box to the Clipboard. 
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.Cut">
            <summary>
            Moves the current selection in the text box to the Clipboard. 
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.Paste">
            <summary>
            Replaces the current selection in the text box with the contents of the Clipboard.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.Duplicate">
            <summary>
            Duplicates the current selection in the text box.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.ScrollToCaret">
            <summary>
            Ensures that the caret is visible in the TextBox window, by scrolling the TextBox control surface if necessary.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.SelectAll">
            <summary>
            Selects all text in the text box.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.Deselect">
            <summary>
            Sets the selection to empty value.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.CharIndexAtPoint(FlaxEngine.Vector2@)">
            <summary>
            Gets the character the index at point (eg. mouse location in control-space).
            </summary>
            <param name="location">The location (in control-space).</param>
            <returns>The character index under the location</returns>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.Insert(System.Char)">
            <summary>
            Inserts the specified character (at the current selection).
            </summary>
            <param name="c">The character.</param>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.Insert(System.String)">
            <summary>
            Inserts the specified text (at the current selection).
            </summary>
            <param name="str">The string.</param>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.MoveRight(System.Boolean,System.Boolean)">
            <summary>
            Moves the caret right.
            </summary>
            <param name="shift">Shift is held.</param>
            <param name="ctrl">Control is held.</param>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.MoveLeft(System.Boolean,System.Boolean)">
            <summary>
            Moves the caret left.
            </summary>
            <param name="shift">Shift is held.</param>
            <param name="ctrl">Control is held.</param>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.MoveDown(System.Boolean,System.Boolean)">
            <summary>
            Moves the caret down.
            </summary>
            <param name="shift">Shift is held.</param>
            <param name="ctrl">Control is held.</param>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.MoveUp(System.Boolean,System.Boolean)">
            <summary>
            Moves the caret up.
            </summary>
            <param name="shift">Shift is held.</param>
            <param name="ctrl">Control is held.</param>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.SetSelection(System.Int32,System.Boolean)">
            <summary>
            Sets the caret position.
            </summary>
            <param name="caret">The caret position.</param>
            <param name="withScroll">If set to <c>true</c> with auto-scroll.</param>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.SetSelection(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the selection.
            </summary>
            <param name="start">The selection start character.</param>
            <param name="end">The selection end character.</param>
            <param name="withScroll">If set to <c>true</c> with auto-scroll.</param>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.GetTextSize">
            <summary>
            Calculates total text size. Called by <see cref="M:FlaxEngine.GUI.TextBoxBase.OnTextChanged"/> to cache the text size.
            </summary>
            <returns>The total text size.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.GetCharPosition(System.Int32,System.Single@)">
            <summary>
            Calculates character position for given character index.
            </summary>
            <param name="index">The text position to get it's coordinates.</param>
            <param name="height">The character height (at the given character position).</param>
            <returns>The character position (upper left corner which can be used for a caret position).</returns>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.HitTestText(FlaxEngine.Vector2)">
            <summary>
            Calculates hit character index at given location.
            </summary>
            <param name="location">The location to test.</param>
            <returns>The selected character position index (can be equal to text length if location is outside of the layout rectangle).</returns>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnIsMultilineChanged">
            <summary>
            Called when is multiline gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnIsReadOnlyChanged">
            <summary>
            Called when is read only gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnSelectingBegin">
            <summary>
            Action called when user starts text selecting
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnSelectingEnd">
            <summary>
            Action called when user ends text selecting
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnEditBegin">
            <summary>
            Action called when user starts text editing
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnEditEnd">
            <summary>
            Action called when user ends text editing.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnTextChanged">
            <summary>
            Action called when text gets modified.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnGotFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.NavigationFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnSubmit">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnCharInput(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.TextBoxBase.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.ContainerControl">
            <summary>
            Base class for all GUI controls that can contain child controls.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ContainerControl._children">
            <summary>
            The children collection.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ContainerControl._containsFocus">
            <summary>
            The contains focus cached flag.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ContainerControl._isLayoutLocked">
            <summary>
            The layout locking flag.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ContainerControl"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ContainerControl"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.#ctor(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ContainerControl"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.#ctor(FlaxEngine.Rectangle)">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.ContainerControl.Children">
            <summary>
            Gets child controls list
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContainerControl.ChildrenCount">
            <summary>
            Gets amount of the children controls
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContainerControl.HasChildren">
            <summary>
            Checks if container has any child controls
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContainerControl.ContainsFocus">
            <summary>
            Gets a value indicating whether the control, or one of its child controls, currently has the input focus.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContainerControl.IsLayoutLocked">
            <summary>
            True if automatic updates for control layout are locked (useful when creating a lot of GUI control to prevent lags).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContainerControl.ClipChildren">
            <summary>
            Gets or sets a value indicating whether apply clipping mask on children during rendering.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ContainerControl.CullChildren">
            <summary>
            Gets or sets a value indicating whether perform view culling on children during rendering.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.LockChildrenRecursive">
            <summary>
            Locks all child controls layout and itself.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.UnlockChildrenRecursive">
            <summary>
            Unlocks all the child controls layout and itself.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.RemoveChildren">
            <summary>
            Unlinks all the child controls.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.DisposeChildren">
            <summary>
            Removes and disposes all the child controls
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.AddChild``1">
            <summary>
            Creates a new control and adds it to the container.
            </summary>
            <returns>The added control.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.AddChild``1(``0)">
            <summary>
            Adds the control to the container.
            </summary>
            <param name="child">The control to add.</param>
            <returns>The added control.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.RemoveChild(FlaxEngine.GUI.Control)">
            <summary>
            Removes control from the container.
            </summary>
            <param name="child">The control to remove.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetChild(System.Int32)">
            <summary>
            Gets child control at given index.
            </summary>
            <param name="index">The control index.</param>
            <returns>The child control.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetChild``1">
            <summary>
            Searches for a child control of a specific type. If there are multiple controls matching the type, only the first one found is returned.
            </summary>
            <typeparam name="T">The type of the control to search for. Includes any controls derived from the type.</typeparam>
            <returns>The control instance if found, otherwise null.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetChildIndex(FlaxEngine.GUI.Control)">
            <summary>
            Gets zero-based index in the list of control children.
            </summary>
            <param name="child">The child control.</param>
            <returns>The zero-based index in the list of control children.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetChildIndexAt(FlaxEngine.Vector2)">
            <summary>
            Tries to find any child control at given point in control local coordinates.
            </summary>
            <param name="point">The local point to check.</param>
            <returns>The found control index or -1 if failed.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetChildAt(FlaxEngine.Vector2)">
            <summary>
            Tries to find any child control at given point in control local coordinates
            </summary>
            <param name="point">The local point to check.</param>
            <returns>The found control or null.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetChildAt(FlaxEngine.Vector2,System.Func{FlaxEngine.GUI.Control,System.Boolean})">
            <summary>
            Tries to find valid child control at given point in control local coordinates. Uses custom callback method to test controls to pick.
            </summary>
            <param name="point">The local point to check.</param>
            <param name="isValid">The control validation callback.</param>
            <returns>The found control or null.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetChildAtRecursive(FlaxEngine.Vector2)">
            <summary>
            Tries to find lowest child control at given point in control local coordinates.
            </summary>
            <param name="point">The local point to check.</param>
            <returns>The found control or null.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetClientArea">
            <summary>
            Gets rectangle in local control coordinates with area for controls (without scroll bars, anchored controls, etc.).
            </summary>
            <returns>The rectangle in local control coordinates with area for controls (without scroll bars etc.).</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.SortChildren">
            <summary>
            Sort child controls list
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.SortChildrenRecursive">
            <summary>
            Sort children using recursion
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnChildResized(FlaxEngine.GUI.Control)">
            <summary>
            Called when child control gets resized.
            </summary>
            <param name="control">The resized control.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnChildrenChanged">
            <summary>
            Called when children collection gets changed (child added or removed).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.CacheRootHandle">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.AddChildInternal(FlaxEngine.GUI.Control)">
            <summary>
            Adds a child control to the container.
            </summary>
            <param name="child">The control to add.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.RemoveChildInternal(FlaxEngine.GUI.Control)">
            <summary>
            Removes a child control from this container.
            </summary>
            <param name="child">The control to remove.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.GetDesireClientArea(FlaxEngine.Rectangle@)">
            <summary>
            Gets the desire client area rectangle for all the controls.
            </summary>
            <param name="rect">The client area rectangle for child controls.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.IntersectsChildContent(FlaxEngine.GUI.Control,FlaxEngine.Vector2,FlaxEngine.Vector2@)">
            <summary>
            Checks if given point in this container control space intersects with the child control content.
            Also calculates result location in child control space which can be used to feed control with event at that point.
            </summary>
            <param name="child">The child control to check.</param>
            <param name="location">The location in this container control space.</param>
            <param name="childSpaceLocation">The output location in child control space.</param>
            <returns>True if point is over the control content, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnNavigate(FlaxEngine.GUI.NavDirection,FlaxEngine.Vector2,FlaxEngine.GUI.Control,System.Collections.Generic.List{FlaxEngine.GUI.Control})">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.CanNavigateChild(FlaxEngine.GUI.Control)">
            <summary>
            Checks if this container control can more with focus navigation into the given child control.
            </summary>
            <param name="child">The child.</param>
            <returns>True if can navigate to it, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.NavigationWrap(FlaxEngine.GUI.NavDirection,FlaxEngine.Vector2,System.Collections.Generic.List{FlaxEngine.GUI.Control})">
            <summary>
            Wraps the navigation over the layout.
            </summary>
            <param name="direction">The navigation direction.</param>
            <param name="location">The navigation start location (in the control-space).</param>
            <param name="visited">The list with visited controls. Used to skip recursive navigation calls when doing traversal across the UI hierarchy.</param>
            <returns>The target navigation control or null if didn't performed any navigation.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.UpdateContainsFocus">
            <summary>
            Update contain focus state and all it's children
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.UpdateChildrenBounds">
            <summary>
            Updates child controls bounds.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.PerformLayoutBeforeChildren">
            <summary>
            Perform layout for that container control before performing it for child controls.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.PerformLayoutAfterChildren">
            <summary>
            Perform layout for that container control after performing it for child controls.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnDestroy">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.ContainerControl.IsTouchOver">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.Draw">
            <summary>
            Draw the control and the children.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.DrawSelf">
            <summary>
            Draws the control.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.DrawChildren">
            <summary>
            Draws the children. Can be overridden to provide some customizations. Draw is performed with applied clipping mask for the client area.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.PerformLayout(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.IsTouchPointerOver(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnTouchEnter(FlaxEngine.Vector2,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnTouchDown(FlaxEngine.Vector2,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnTouchMove(FlaxEngine.Vector2,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnTouchUp(FlaxEngine.Vector2,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnTouchLeave(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnCharInput(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnKeyUp(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnDragLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ContainerControl.OnSizeChanged">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Control">
            <summary>
            Base class for all GUI controls
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.X">
            <summary>
            Gets or sets X coordinate of the upper-left corner of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Y">
            <summary>
            Gets or sets Y coordinate of the upper-left corner of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.LocalX">
            <summary>
            Gets or sets the local X coordinate of the pivot of the control relative to the anchor in parent of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.LocalY">
            <summary>
            Gets or sets the local Y coordinate of the pivot of the control relative to the anchor in parent of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.AnchorMin">
            <summary>
            Gets or sets the normalized position in the parent control that the upper left corner is anchored to (range 0-1).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.AnchorMax">
            <summary>
            Gets or sets the normalized position in the parent control that the bottom right corner is anchored to (range 0-1).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Offsets">
            <summary>
            Gets or sets the offsets of the corners of the control relative to its anchors.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Location">
            <summary>
            Gets or sets coordinates of the upper-left corner of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.LocalLocation">
            <summary>
            Gets or sets the local position of the pivot of the control relative to the anchor in parent of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Width">
            <summary>
            Gets or sets width of the control.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Height">
            <summary>
            Gets or sets height of the control.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Size">
            <summary>
            Gets or sets control's size.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Top">
            <summary>
            Gets Y coordinate of the top edge of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Bottom">
            <summary>
            Gets Y coordinate of the bottom edge of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Left">
            <summary>
            Gets X coordinate of the left edge of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Right">
            <summary>
            Gets X coordinate of the right edge of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.UpperLeft">
            <summary>
            Gets position of the upper left corner of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.UpperRight">
            <summary>
            Gets position of the upper right corner of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.BottomRight">
            <summary>
            Gets position of the bottom right corner of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.BottomLeft">
            <summary>
            Gets position of the bottom left of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Center">
            <summary>
            Gets center position of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Bounds">
            <summary>
            Gets or sets control's bounds rectangle.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Scale">
            <summary>
            Gets or sets the scale. Scales control according to its Pivot which by default is (0.5,0.5) (middle of the control). If you set pivot to (0,0) it will scale the control based on it's upper-left corner.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Pivot">
            <summary>
            Gets or sets the normalized pivot location (used to transform control around it). Point (0,0) is upper left corner, (0.5,0.5) is center, (1,1) is bottom right corner.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Shear">
            <summary>
            Gets or sets the shear transform angles (x, y). Defined in degrees. Shearing happens relative to the control pivot point.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Rotation">
            <summary>
            Gets or sets the rotation angle (in degrees). Control is rotated around it's pivot point (middle of the control by default).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.UpdateBounds">
            <summary>
            Updates the control cached bounds (based on anchors and offsets).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.UpdateTransform">
            <summary>
            Updates the control cached transformation matrix (based on bounds).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.SetAnchorPreset(FlaxEngine.GUI.AnchorPresets,System.Boolean,System.Boolean)">
            <summary>
            Sets the anchor preset for the control. Can be use to auto-place the control for a given preset or can preserve the current control bounds.
            </summary>
            <param name="anchorPreset">The anchor preset to set.</param>
            <param name="preserveBounds">True if preserve current control bounds, otherwise will align control position accordingly to the anchor location.</param>
            <param name="setPivotToo">Whether or not we should set the pivot too, eg left-top 0,0, bottom-right 1,1</param>
        </member>
        <member name="E:FlaxEngine.GUI.Control.LocationChanged">
            <summary>
            Action is invoked, when location is changed
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.Control.SizeChanged">
            <summary>
            Action is invoked, when size is changed
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.Control.ParentChanged">
            <summary>
            Action is invoked, when parent is changed
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.Control.VisibleChanged">
            <summary>
            Action is invoked, when visibility is changed
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Parent">
            <summary>
            Parent control (the one above in the tree hierarchy)
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.HasParent">
            <summary>
            Checks if control has parent container control
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.IndexInParent">
            <summary>
            Gets or sets zero-based index of the control inside the parent container list.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.BackgroundColor">
            <summary>
            Gets or sets control background color (transparent color (alpha=0) means no background rendering)
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.AnchorPreset">
            <summary>
            Gets or sets the anchor preset used by the control anchors (based on <see cref="P:FlaxEngine.GUI.Control.AnchorMin"/> and <see cref="P:FlaxEngine.GUI.Control.AnchorMax"/>).
            </summary>
            <remarks>To change anchor preset with current control bounds preservation use <see cref="M:FlaxEngine.GUI.Control.SetAnchorPreset(FlaxEngine.GUI.AnchorPresets,System.Boolean,System.Boolean)"/>.</remarks>
        </member>
        <member name="P:FlaxEngine.GUI.Control.IsScrollable">
            <summary>
            Gets or sets a value indicating whether this control is scrollable (scroll bars affect it).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Enabled">
            <summary>
            Gets or sets a value indicating whether the control can respond to user interaction
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.EnabledInHierarchy">
            <summary>
            Gets a value indicating whether the control is enabled in the hierarchy (it's enabled and all it's parents are enabled as well).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Visible">
            <summary>
            Gets or sets a value indicating whether the control is visible
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.VisibleInHierarchy">
            <summary>
            Gets a value indicating whether the control is visible in the hierarchy (it's visible and all it's parents are visible as well).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.IsDisposing">
            <summary>
            Returns true if control is during disposing state (on destroy)
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Root">
            <summary>
            Gets the GUI tree root control which contains that control (or null if not linked to any)
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.RootWindow">
            <summary>
            Gets the GUI window root control which contains that control (or null if not linked to any).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.DpiScale">
            <summary>
            Gets the control DPI scale factor (1 is default). Includes custom DPI scale.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.ScreenPos">
            <summary>
            Gets screen position of the control (upper left corner).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Cursor">
            <summary>
            Gets or sets the cursor (per window). Control should restore cursor to the default value eg. when mouse leaves it's area.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Control.Tag">
            <summary>
            The custom tag object value linked to the control.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Control"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Control"/> class.
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.#ctor(FlaxEngine.Vector2,FlaxEngine.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Control"/> class.
            </summary>
            <param name="location">Upper left corner location.</param>
            <param name="size">Bounds size.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.#ctor(FlaxEngine.Rectangle)">
            <summary>
            Init
            </summary>
            <param name="bounds">Window bounds</param>
        </member>
        <member name="T:FlaxEngine.GUI.Control.UpdateDelegate">
            <summary>
            Performs control logic update.
            </summary>
            <param name="deltaTime">The delta time in seconds (since last update).</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.Dispose">
            <summary>
            Delete control (will unlink from the parent and start to dispose)
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.Update(System.Single)">
            <summary>
            Perform control update and all its children
            </summary>
            <param name="deltaTime">Delta time in seconds</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.Draw">
            <summary>
            Draw control
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PerformLayout(System.Boolean)">
            <summary>
            Update control layout
            </summary>
            <param name="force">True if perform layout by force even if cached state wants to skip it due to optimization.</param>
        </member>
        <member name="P:FlaxEngine.GUI.Control.AutoFocus">
            <summary>
            If checked, the control can receive automatic focus (eg. on user click or UI navigation).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.ContainsFocus">
            <summary>
            Gets a value indicating whether the control, currently has the input focus
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.IsFocused">
            <summary>
            Gets a value indicating whether the control has input focus
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.IsNavFocused">
            <summary>
            Gets a value indicating whether the control has UI navigation focus.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.Focus">
            <summary>
            Sets input focus to the control
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.Defocus">
            <summary>
            Removes input focus from the control
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnGotFocus">
            <summary>
            When control gets input focus
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnLostFocus">
            <summary>
            When control losts input focus
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnStartContainsFocus">
            <summary>
            Action fired when control gets 'Contains Focus' state
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnEndContainsFocus">
            <summary>
            Action fired when control lost 'Contains Focus' state
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.Focus(FlaxEngine.GUI.Control)">
            <summary>
            Focus that control
            </summary>
            <param name="c">Control to focus</param>
            <returns>True if control got a focus</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.StartMouseCapture(System.Boolean)">
            <summary>
            Starts the mouse tracking. Used by the scrollbars, splitters, etc.
            </summary>
            <param name="useMouseScreenOffset">If set to <c>true</c> will use mouse screen offset.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.EndMouseCapture">
            <summary>
            Ends the mouse tracking.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnEndMouseCapture">
            <summary>
            When mouse goes up/down not over the control but it has user focus so remove that focus from it (used by scroll
            bars, sliders etc.)
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Control.NavTargetUp">
            <summary>
            The explicitly specified target navigation control for <see cref="F:FlaxEngine.GUI.NavDirection.Up"/> direction.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Control.NavTargetDown">
            <summary>
            The explicitly specified target navigation control for <see cref="F:FlaxEngine.GUI.NavDirection.Down"/> direction.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Control.NavTargetLeft">
            <summary>
            The explicitly specified target navigation control for <see cref="F:FlaxEngine.GUI.NavDirection.Left"/> direction.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Control.NavTargetRight">
            <summary>
            The explicitly specified target navigation control for <see cref="F:FlaxEngine.GUI.NavDirection.Right"/> direction.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.GetNavTarget(FlaxEngine.GUI.NavDirection)">
            <summary>
            Gets the next navigation control to focus for the given direction. Returns null for automated direction resolving.
            </summary>
            <param name="direction">The navigation direction.</param>
            <returns>The target navigation control or null to use automatic navigation.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.GetNavOrigin(FlaxEngine.GUI.NavDirection)">
            <summary>
            Gets the navigation origin location for this control. It's the starting anchor point for searching navigable controls in the nearby area. By default the origin points are located on the control bounds edges.
            </summary>
            <param name="direction">The navigation direction.</param>
            <returns>The navigation origin for the automatic navigation.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnNavigate(FlaxEngine.GUI.NavDirection,FlaxEngine.Vector2,FlaxEngine.GUI.Control,System.Collections.Generic.List{FlaxEngine.GUI.Control})">
            <summary>
            Performs the UI navigation for this control.
            </summary>
            <param name="direction">The navigation direction.</param>
            <param name="location">The navigation start location (in the control-space).</param>
            <param name="caller">The control that calls the event.</param>
            <param name="visited">The list with visited controls. Used to skip recursive navigation calls when doing traversal across the UI hierarchy.</param>
            <returns>The target navigation control or null if didn't performed any navigation.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.NavigationFocus">
            <summary>
            Focuses the control by the UI navigation system. Called during navigating around UI with gamepad/keyboard navigation. Focuses the control and sets the <see cref="P:FlaxEngine.GUI.Control.IsNavFocused"/> flag.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnSubmit">
            <summary>
            Generic user interaction event for a control used by UI navigation (eg. user submits on the currently focused control).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.IsMouseOver">
            <summary>
            Check if mouse is over that item or its child items
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnMouseEnter(FlaxEngine.Vector2)">
            <summary>
            When mouse enters control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnMouseMove(FlaxEngine.Vector2)">
            <summary>
            When mouse moves over control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnMouseLeave">
            <summary>
            When mouse leaves control's area
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <summary>
            When mouse wheel moves
            </summary>
            <param name="location">Mouse location in Control Space</param>
            <param name="delta">Mouse wheel move delta. A positive value indicates that the wheel was rotated forward, away from the user; a negative value indicates that the wheel was rotated backward, toward the user. Normalized to [-1;1] range.</param>
            <returns>True if event has been handled</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <summary>
            When mouse goes down over control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
            <param name="button">Mouse buttons state (flags)</param>
            <returns>True if event has been handled, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <summary>
            When mouse goes up over control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
            <param name="button">Mouse buttons state (flags)</param>
            <returns>True if event has been handled, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <summary>
            When mouse double clicks over control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
            <param name="button">Mouse buttons state (flags)</param>
            <returns>True if event has been handled, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnCharInput(System.Char)">
            <summary>
            On input character
            </summary>
            <param name="c">Input character</param>
            <returns>True if event has been handled, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnKeyDown(FlaxEngine.KeyboardKeys)">
            <summary>
            When key goes down
            </summary>
            <param name="key">Key value</param>
            <returns>True if event has been handled, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnKeyUp(FlaxEngine.KeyboardKeys)">
            <summary>
            When key goes up
            </summary>
            <param name="key">Key value</param>
        </member>
        <member name="P:FlaxEngine.GUI.Control.IsTouchOver">
            <summary>
            Check if touch is over that item or its child items
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.IsTouchPointerOver(System.Int32)">
            <summary>
            Determines whether the given touch pointer is over the control.
            </summary>
            <param name="pointerId">The touch pointer identifier. Stable for the whole touch gesture/interaction.</param>
            <returns>True if given touch pointer is over the control, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnTouchEnter(FlaxEngine.Vector2,System.Int32)">
            <summary>
            When touch enters control's area
            </summary>
            <param name="location">Touch location in Control Space</param>
            <param name="pointerId">The touch pointer identifier. Stable for the whole touch gesture/interaction.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnTouchDown(FlaxEngine.Vector2,System.Int32)">
            <summary>
            When touch enters control's area.
            </summary>
            <param name="location">Touch location in Control Space.</param>
            <param name="pointerId">The touch pointer identifier. Stable for the whole touch gesture/interaction.</param>
            <returns>True if event has been handled, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnTouchMove(FlaxEngine.Vector2,System.Int32)">
            <summary>
            When touch moves over control's area.
            </summary>
            <param name="location">Touch location in Control Space.</param>
            <param name="pointerId">The touch pointer identifier. Stable for the whole touch gesture/interaction.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnTouchUp(FlaxEngine.Vector2,System.Int32)">
            <summary>
            When touch goes up over control's area.
            </summary>
            <param name="location">Touch location in Control Space</param>
            <param name="pointerId">The touch pointer identifier. Stable for the whole touch gesture/interaction.</param>
            <returns>True if event has been handled, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnTouchLeave(System.Int32)">
            <summary>
            When touch leaves control's area
            </summary>
            <param name="pointerId">The touch pointer identifier. Stable for the whole touch gesture/interaction.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnTouchLeave">
            <summary>
            When all touch leaves control's area
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.IsDragOver">
            <summary>
            Check if mouse dragging is over that item or its child items.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnDragEnter(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <summary>
            When mouse dragging enters control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
            <param name="data">The data. See <see cref="T:FlaxEngine.GUI.DragDataText"/> and <see cref="T:FlaxEngine.GUI.DragDataFiles"/>.</param>
            <returns>The drag event result effect.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <summary>
            When mouse dragging moves over control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
            <param name="data">The data. See <see cref="T:FlaxEngine.GUI.DragDataText"/> and <see cref="T:FlaxEngine.GUI.DragDataFiles"/>.</param>
            <returns>The drag event result effect.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnDragDrop(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <summary>
            When mouse dragging drops on control's area
            </summary>
            <param name="location">Mouse location in Control Space</param>
            <param name="data">The data. See <see cref="T:FlaxEngine.GUI.DragDataText"/> and <see cref="T:FlaxEngine.GUI.DragDataFiles"/>.</param>
            <returns>The drag event result effect.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnDragLeave">
            <summary>
            When mouse dragging leaves control's area
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.DoDragDrop(FlaxEngine.GUI.DragData)">
            <summary>
            Starts the drag and drop operation.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:FlaxEngine.GUI.Control.TooltipText">
            <summary>
            Gets or sets the tooltip text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.CustomTooltip">
            <summary>
            Gets or sets the custom tooltip control linked. Use null to show default shared tooltip from the current <see cref="T:FlaxEngine.GUI.Style"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.Tooltip">
            <summary>
            Gets the tooltip used by this control (custom or shared one).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Control.ShowTooltip">
            <summary>
            Gets a value indicating whether show control tooltip (control is in a proper state, tooltip text is valid, etc.). Can be used to implement custom conditions for showing tooltips (eg. based on current mouse location within the control bounds).
            </summary>
            <remarks>Tooltip can be only visible if mouse is over the control area (see <see cref="P:FlaxEngine.GUI.Control.IsMouseOver"/>).</remarks>
        </member>
        <member name="M:FlaxEngine.GUI.Control.LinkTooltip(System.String,FlaxEngine.GUI.Tooltip)">
            <summary>
            Links the tooltip.
            </summary>
            <param name="text">The text.</param>
            <param name="customTooltip">The custom tooltip.</param>
            <returns>This control pointer. Useful for creating controls in code.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.UnlinkTooltip">
            <summary>
            Unlinks the tooltip.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnShowTooltip(System.String@,FlaxEngine.Vector2@,FlaxEngine.Rectangle@)">
            <summary>
            Called when tooltip wants to be shown. Allows modifying its appearance.
            </summary>
            <param name="text">The tooltip text to show.</param>
            <param name="location">The popup start location (in this control local space).</param>
            <param name="area">The allowed area of mouse movement to show tooltip (in this control local space).</param>
            <returns>True if can show tooltip, otherwise false to skip.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnTooltipShown(FlaxEngine.GUI.Tooltip)">
            <summary>
            Called when tooltip gets created and shown for this control. Can be used to customize tooltip UI.
            </summary>
            <param name="tooltip">The tooltip.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnTestTooltipOverControl(FlaxEngine.Vector2@)">
            <summary>
            Called when tooltip is visible and tests if the given mouse location (in control space) is valid (is over the content).
            </summary>
            <param name="location">The location.</param>
            <returns>True if tooltip can be still visible, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.IntersectsContent(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <summary>
            Checks if given location point in Parent Space intersects with the control content and calculates local position.
            </summary>
            <param name="locationParent">The location in Parent Space.</param>
            <param name="location">The location of intersection in Control Space.</param>
            <returns>True if given point in Parent Space intersects with this control content, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.ContainsPoint(FlaxEngine.Vector2@)">
            <summary>
            Checks if control contains given point in local Control Space.
            </summary>
            <param name="location">Point location in Control Space to check</param>
            <returns>True if point is inside control's area, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointToParent(FlaxEngine.GUI.ContainerControl,FlaxEngine.Vector2)">
            <summary>
            Converts point in local control's space into one of the parent control coordinates
            </summary>
            <param name="parent">This control parent of any other parent.</param>
            <param name="location">Input location of the point to convert</param>
            <returns>Converted point location in parent control coordinates</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointToParent(FlaxEngine.Vector2)">
            <summary>
            Converts point in local control's space into parent control coordinates.
            </summary>
            <param name="location">The input location of the point to convert.</param>
            <returns>The converted point location in parent control coordinates.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointToParent(FlaxEngine.Vector2@)">
            <summary>
            Converts point in local control's space into parent control coordinates.
            </summary>
            <param name="location">The input location of the point to convert.</param>
            <returns>The converted point location in parent control coordinates.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointFromParent(FlaxEngine.Vector2)">
            <summary>
            Converts point in parent control coordinates into local control's space.
            </summary>
            <param name="locationParent">The input location of the point to convert.</param>
            <returns>The converted point location in control's space.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointFromParent(FlaxEngine.Vector2@)">
            <summary>
            Converts point in parent control coordinates into local control's space.
            </summary>
            <param name="locationParent">The input location of the point to convert.</param>
            <returns>The converted point location in control's space.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointFromParent(FlaxEngine.GUI.ContainerControl,FlaxEngine.Vector2)">
            <summary>
            Converts point in one of the parent control coordinates into local control's space.
            </summary>
            <param name="parent">This control parent of any other parent.</param>
            <param name="location">Input location of the point to convert</param>
            <returns>The converted point location in control's space.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointToWindow(FlaxEngine.Vector2)">
            <summary>
            Converts point in local control's space into window coordinates
            </summary>
            <param name="location">Input location of the point to convert</param>
            <returns>Converted point location in window coordinates</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointFromWindow(FlaxEngine.Vector2)">
            <summary>
            Converts point in the window coordinates into control's space
            </summary>
            <param name="location">Input location of the point to convert</param>
            <returns>Converted point location in control's space</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointToScreen(FlaxEngine.Vector2)">
            <summary>
            Converts point in the local control's space into screen coordinates
            </summary>
            <param name="location">Input location of the point to convert</param>
            <returns>Converted point location in screen coordinates</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.PointFromScreen(FlaxEngine.Vector2)">
            <summary>
            Converts point in screen coordinates into the local control's space
            </summary>
            <param name="location">Input location of the point to convert</param>
            <returns>Converted point location in local control's space</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnLocationChanged">
            <summary>
            Called when control location gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnSizeChanged">
            <summary>
            Called when control size gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.SetScaleInternal(FlaxEngine.Vector2@)">
            <summary>
            Sets the scale and updates the transform.
            </summary>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.SetPivotInternal(FlaxEngine.Vector2@)">
            <summary>
            Sets the pivot and updates the transform.
            </summary>
            <param name="pivot">The pivot.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.SetShearInternal(FlaxEngine.Vector2@)">
            <summary>
            Sets the shear and updates the transform.
            </summary>
            <param name="shear">The shear.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.SetRotationInternal(System.Single)">
            <summary>
            Sets the rotation angle and updates the transform.
            </summary>
            <param name="rotation">The rotation (in degrees).</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnVisibleChanged">
            <summary>
            Called when visible state gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnParentChangedInternal">
            <summary>
            Action fired when parent control gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.CacheRootHandle">
            <summary>
            Caches the root control handle.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.AddUpdateCallbacks(FlaxEngine.GUI.RootControl)">
            <summary>
            Adds the custom control logic update callbacks to the root.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.RemoveUpdateCallbacks(FlaxEngine.GUI.RootControl)">
            <summary>
            Removes the custom control logic update callbacks from the root.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.SetUpdate(FlaxEngine.GUI.Control.UpdateDelegate@,FlaxEngine.GUI.Control.UpdateDelegate)">
            <summary>
            Helper utility function to sets the update callback to the root. Does nothing if value has not been modified. Handles if control has no root or parent.
            </summary>
            <param name="onUpdate">The cached update callback delegate (field in the custom control implementation).</param>
            <param name="value">The value to assign.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnParentResized">
            <summary>
            Action fired when parent control gets resized (also when control gets non-null parent).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.OnDestroy">
            <summary>
            Method called when managed instance should be destroyed
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Control.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Control.Compare(FlaxEngine.GUI.Control)">
            <summary>
            Compares this control with the other control.
            </summary>
            <param name="other">The other.</param>
            <returns>Comparision result.</returns>
        </member>
        <member name="T:FlaxEngine.GUI.DragData">
            <summary>
            The data container for drag and drop operation in GUI.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.DragDataFiles">
            <summary>
            The drag and drop files.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.DragData" />
        </member>
        <member name="F:FlaxEngine.GUI.DragDataFiles.Files">
            <summary>
            The file paths collection.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.DragDataFiles.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.DragDataFiles"/> class.
            </summary>
            <param name="files">The files.</param>
        </member>
        <member name="T:FlaxEngine.GUI.DragDataText">
            <summary>
            The drag and drop text data.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.DragData" />
        </member>
        <member name="F:FlaxEngine.GUI.DragDataText.Text">
            <summary>
            The text.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.DragDataText.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.DragDataText"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="T:FlaxEngine.GUI.AnchorPresets">
            <summary>
            UI control anchors presets.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.Custom">
            <summary>
            The empty preset.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.TopLeft">
            <summary>
            The top left corner of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.TopCenter">
            <summary>
            The center of the top edge of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.TopRight">
            <summary>
            The top right corner of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.MiddleLeft">
            <summary>
            The middle of the left edge of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.MiddleCenter">
            <summary>
            The middle center! Right in the middle of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.MiddleRight">
            <summary>
            The middle of the right edge of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.BottomLeft">
            <summary>
            The bottom left corner of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.BottomCenter">
            <summary>
            The center of the bottom edge of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.BottomRight">
            <summary>
            The bottom right corner of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.VerticalStretchLeft">
            <summary>
            The vertical stretch on the left of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.VerticalStretchCenter">
            <summary>
            The vertical stretch on the center of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.VerticalStretchRight">
            <summary>
            The vertical stretch on the right of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.HorizontalStretchTop">
            <summary>
            The horizontal stretch on the top of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.HorizontalStretchMiddle">
            <summary>
            The horizontal stretch in the middle of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.HorizontalStretchBottom">
            <summary>
            The horizontal stretch on the bottom of the parent control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AnchorPresets.StretchAll">
            <summary>
            All parent control edges.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.ScrollBars">
            <summary>
            Specifies which scroll bars will be visible on a control
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBars.None">
            <summary>
            Don't use scroll bars.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBars.Horizontal">
            <summary>
            Use horizontal scrollbar.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBars.Vertical">
            <summary>
            Use vertical scrollbar.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBars.Both">
            <summary>
            Use horizontal and vertical scrollbar.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.DragItemPositioning">
            <summary>
            The drag item positioning modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DragItemPositioning.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DragItemPositioning.At">
            <summary>
            At the item.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DragItemPositioning.Above">
            <summary>
            Above the item (near the upper/left edge).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DragItemPositioning.Below">
            <summary>
            Below the item (near the bottom/right edge)
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.Orientation">
            <summary>
            Specifies the orientation of controls or elements of controls
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Orientation.Horizontal">
            <summary>
            The horizontal.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Orientation.Vertical">
            <summary>
            The vertical.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.NavDirection">
            <summary>
            The navigation directions in the user interface layout.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.NavDirection.None">
            <summary>
            No direction to skip navigation.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.NavDirection.Up">
            <summary>
            The up direction.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.NavDirection.Down">
            <summary>
            The down direction.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.NavDirection.Left">
            <summary>
            The left direction.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.NavDirection.Right">
            <summary>
            The right direction.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.NavDirection.Next">
            <summary>
            The next item (right with layout wrapping).
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.Margin">
            <summary>
            Describes the space around a control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Margin.SizeInBytes">
            <summary>
            The size of the <see cref="T:FlaxEngine.GUI.Margin" /> type, in bytes.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Margin.Zero">
            <summary>
            A <see cref="T:FlaxEngine.GUI.Margin" /> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Margin.Left">
            <summary>
            Holds the margin to the left.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Margin.Right">
            <summary>
            Holds the margin to the right.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Margin.Top">
            <summary>
            Holds the margin to the top.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Margin.Bottom">
            <summary>
            Holds the margin to the bottom.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Margin.Location">
            <summary>
            Gets the margin's location (Left, Top).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Margin.Size">
            <summary>
            Gets the margin's total size. Cumulative margin size (Left + Right, Top + Bottom).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Margin.Width">
            <summary>
            Gets the width (left + right).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Margin.Height">
            <summary>
            Gets the height (top + bottom).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Margin"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Margin"/> struct.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="top">The top.</param>
            <param name="bottom">The bottom.</param>
        </member>
        <member name="P:FlaxEngine.GUI.Margin.IsZero">
            <summary>
            Gets a value indicting whether this margin is zero.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.ShrinkRectangle(FlaxEngine.Rectangle@)">
            <summary>
            Shrinks the rectangle by this margin.
            </summary>
            <param name="rect">The rectangle.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.ExpandRectangle(FlaxEngine.Rectangle@)">
            <summary>
            Expands the rectangle by this margin.
            </summary>
            <param name="rect">The rectangle.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.op_Addition(FlaxEngine.GUI.Margin,FlaxEngine.GUI.Margin)">
            <summary>
            Adds two margins.
            </summary>
            <param name="left">The first margins to add.</param>
            <param name="right">The second margins to add.</param>
            <returns>The sum of the two margins.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.op_Subtraction(FlaxEngine.GUI.Margin,FlaxEngine.GUI.Margin)">
            <summary>
            Subtracts two margins.
            </summary>
            <param name="left">The first margins to subtract from.</param>
            <param name="right">The second margins to subtract.</param>
            <returns>The result of subtraction of the two margins.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.op_Equality(FlaxEngine.GUI.Margin,FlaxEngine.GUI.Margin)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.op_Inequality(FlaxEngine.GUI.Margin,FlaxEngine.GUI.Margin)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.Equals(FlaxEngine.GUI.Margin@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.GUI.Margin" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.GUI.Margin" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.GUI.Margin" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.Equals(FlaxEngine.GUI.Margin@,FlaxEngine.GUI.Margin@)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.GUI.Margin"/> are equal.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.Equals(FlaxEngine.GUI.Margin)">
            <summary>
            Determines whether the specified <see cref="T:FlaxEngine.GUI.Margin" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:FlaxEngine.GUI.Margin" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:FlaxEngine.GUI.Margin" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlaxEngine.GUI.Margin.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlaxEngine.GUI.AlphaPanel">
            <summary>
            Changes alpha of all its children
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AlphaPanel.Alpha">
            <summary>
            The target alpha value.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.AlphaPanel.IgnoreStack">
            <summary>
            Whether or not we should ignore previous alphas.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.AlphaPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.AlphaPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.AlphaPanel.Draw">
            <inheritdoc/>
        </member>
        <member name="T:FlaxEngine.GUI.BlurPanel">
            <summary>
            The blur panel that applied the Gaussian-blur to all content beneath the control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEngine.GUI.BlurPanel.BlurStrength">
            <summary>
            Gets or sets the blur strength. Defines how blurry the background is. Larger numbers increase blur, resulting in a larger runtime cost on the GPU.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.BlurPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.BlurPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.BlurPanel.Draw">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.DropPanel">
            <summary>
            Drop Panel arranges control vertically and provides feature to collapse contents.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._headerHeight">
            <summary>
            The header height.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._headerTextMargin">
            <summary>
            The header text margin.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._isClosed">
            <summary>
            The 'is closed' flag.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._mouseOverHeader">
            <summary>
            The 'mouse over header' flag (over header).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._mouseButtonLeftDown">
            <summary>
            The 'mouse down' flag (over header) for the left mouse button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._mouseButtonRightDown">
            <summary>
            The 'mouse down' flag (over header) for the right mouse button.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._animationProgress">
            <summary>
            The animation progress (normalized).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._cachedHeight">
            <summary>
            The cached height of the control.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel._itemsMargin">
            <summary>
            The items margin.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderText">
            <summary>
            Gets or sets the header text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderHeight">
            <summary>
            Gets or sets the height of the header.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderTextMargin">
            <summary>
            Gets or sets the header margin.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.DropPanel.HeaderTextColor">
            <summary>
            Gets or sets the color used to draw header text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderColor">
            <summary>
            Gets or sets the color of the header.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderColorMouseOver">
            <summary>
            Gets or sets the color of the header when mouse is over.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderTextFont">
            <summary>
            Gets or sets the font used to render panel header text.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderTextMaterial">
            <summary>
            Gets or sets the custom material used to render the text. It must has domain set to GUI and have a public texture parameter named Font used to sample font atlas texture with font characters data.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.EnableDropDownIcon">
            <summary>
            Gets or sets a value indicating whether enable drop down icon drawing.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.DropPanel.MouseButtonRightClicked">
            <summary>
            Occurs when mouse right-clicks over the header.
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.DropPanel.IsClosedChanged">
            <summary>
            Occurs when drop panel is opened or closed.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.IsClosed">
            <summary>
            Gets or sets a value indicating whether this panel is closed.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.ItemsMargin">
            <summary>
            Gets or sets the item slots margin (the space between items).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.CloseAnimationTime">
            <summary>
            Gets or sets the panel close/open animation duration (in seconds).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.ArrowImageOpened">
            <summary>
            Gets or sets the image used to render drop panel drop arrow icon when panel is opened.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.ArrowImageClosed">
            <summary>
            Gets or sets the image used to render drop panel drop arrow icon when panel is closed.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.HeaderRectangle">
            <summary>
            Gets the header rectangle.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.DropPanel.ShowTooltip">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.OnShowTooltip(System.String@,FlaxEngine.Vector2@,FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.OnTestTooltipOverControl(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.DropPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.Open(System.Boolean)">
            <summary>
            Opens the group.
            </summary>
            <param name="animate">Enable/disable animation feature.</param>
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.Close(System.Boolean)">
            <summary>
            Closes the group.
            </summary>
            <param name="animate">Enable/disable animation feature.</param>
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.Toggle">
            <summary>
            Toggles open state
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.DrawChildren">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.OnChildResized(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.GetDesireClientArea(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.PerformLayoutBeforeChildren">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.PerformLayoutAfterChildren">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.DropPanel.CanNavigateChild(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.GridPanel">
            <summary>
            A panel that divides up available space between all of its children.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEngine.GUI.GridPanel.SlotPadding">
            <summary>
            Gets or sets the padding applied to each item slot.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.GridPanel.RowFill">
            <summary>
            The cells heights in container height percentage (from top to bottom). Use negative values to set fixed widths for the cells.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.GridPanel.ColumnFill">
            <summary>
            The cells heights in container width percentage (from left to right). Use negative values to set fixed heights for the cells.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.GridPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.GridPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.GridPanel.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.GridPanel"/> class.
            </summary>
            <param name="slotPadding">The slot padding.</param>
        </member>
        <member name="M:FlaxEngine.GUI.GridPanel.PerformLayoutBeforeChildren">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.HorizontalPanel">
            <summary>
            This panel arranges child controls horizontally.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.PanelWithMargins" />
        </member>
        <member name="M:FlaxEngine.GUI.HorizontalPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.HorizontalPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.HorizontalPanel.PerformLayoutBeforeChildren">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.HorizontalPanel.PerformLayoutAfterChildren">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.HScrollBar">
            <summary>
            Horizontal scroll bar control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ScrollBar" />
        </member>
        <member name="M:FlaxEngine.GUI.HScrollBar.#ctor(FlaxEngine.GUI.ContainerControl,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.HScrollBar"/> class.
            </summary>
            <param name="parent">The parent control.</param>
            <param name="y">The y position.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:FlaxEngine.GUI.HScrollBar.TrackSize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Panel">
            <summary>
            Panel UI control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ScrollableControl" />
        </member>
        <member name="F:FlaxEngine.GUI.Panel._controlsBounds">
            <summary>
            The cached scroll area bounds. Used to scroll contents of the panel control. Cached during performing layout.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Panel.VScrollBar">
            <summary>
            The vertical scroll bar.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Panel.HScrollBar">
            <summary>
            The horizontal scroll bar.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Panel.ViewBottom">
            <summary>
            Gets the view bottom.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Panel.ControlsBounds">
            <summary>
            Gets the cached scroll area bounds. Used to scroll contents of the panel control. Cached during performing layout.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Panel.ScrollBars">
            <summary>
            Gets or sets the scroll bars usage by this panel.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Panel.ScrollBarsSize">
            <summary>
            Gets or sets the size of the scroll bars.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Panel.AlwaysShowScrollbars">
            <summary>
            Gets or sets a value indicating whether always show scrollbars. Otherwise show them only if scrolling is available.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Panel.ScrollMargin">
            <summary>
            Gets or sets the scroll margin applies to the child controls area. Can be used to expand the scroll area bounds by adding a margin.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Panel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Panel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Panel.#ctor(FlaxEngine.GUI.ScrollBars,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Panel"/> class.
            </summary>
            <param name="scrollBars">The scroll bars.</param>
            <param name="autoFocus">True if control can accept user focus</param>
        </member>
        <member name="M:FlaxEngine.GUI.Panel.SetViewOffset(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.FastScroll">
            <summary>
            Cuts the scroll bars value smoothing and imminently goes to the target scroll value.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Panel.ScrollViewTo(FlaxEngine.GUI.Control,System.Boolean)">
            <summary>
            Scrolls the view to the given control area.
            </summary>
            <param name="c">The control.</param>
            <param name="fastScroll">True of scroll to the item quickly without smoothing.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Panel.ScrollViewTo(FlaxEngine.Vector2,System.Boolean)">
            <summary>
            Scrolls the view to the given location.
            </summary>
            <param name="location">The location.</param>
            <param name="fastScroll">True of scroll to the item quickly without smoothing.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Panel.ScrollViewTo(FlaxEngine.Rectangle,System.Boolean)">
            <summary>
            Scrolls the view to the given area.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="fastScroll">True of scroll to the item quickly without smoothing.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Panel.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.RemoveChildren">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.DisposeChildren">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.OnChildResized(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.IntersectsChildContent(FlaxEngine.GUI.Control,FlaxEngine.Vector2,FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.AddChildInternal(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.PerformLayout(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.PerformLayoutBeforeChildren">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.ArrangeAndGetBounds">
            <summary>
            Arranges the child controls and gets their bounds.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Panel.Arrange">
            <summary>
            Arranges the child controls.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Panel.GetDesireClientArea(FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Panel.OnDragMove(FlaxEngine.Vector2@,FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.PanelWithMargins">
            <summary>
            Helper control class for other panels.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEngine.GUI.PanelWithMargins._margin">
            <summary>
            The panel area margins.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.PanelWithMargins._spacing">
            <summary>
            The space between the items.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.PanelWithMargins._autoSize">
            <summary>
            The auto size flag.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.PanelWithMargins._offset">
            <summary>
            The control offset.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.LeftMargin">
            <summary>
            Gets or sets the left margin.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.RightMargin">
            <summary>
            Gets or sets the right margin.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.TopMargin">
            <summary>
            Gets or sets the top margin.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.BottomMargin">
            <summary>
            Gets or sets the bottom margin.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.Spacing">
            <summary>
            Gets or sets the child controls spacing.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.Offset">
            <summary>
            Gets or sets the child controls offset (additive).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.AutoSize">
            <summary>
            Gets or sets the value indicating whenever the panel size will be based on a children dimensions.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.PanelWithMargins.Margin">
            <summary>
            Gets or sets the panel area margin.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.PanelWithMargins.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.PanelWithMargins"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.PanelWithMargins.OnChildResized(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.ScrollBar">
            <summary>
            Scroll Bars base class - allows to scroll contents of the GUI panel.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.Control" />
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBar.DefaultSize">
            <summary>
            The default size.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBar.DefaultMinimumOpacity">
            <summary>
            The default minimum opacity.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.Orientation">
            <summary>
            Gets the orientation.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.ThumbThickness">
            <summary>
            Gets or sets the thumb box thickness.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.TrackThickness">
            <summary>
            Gets or sets the track line thickness.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.SmoothingScale">
            <summary>
            Gets or sets the value smoothing scale (0 to not use it).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.UseSmoothing">
            <summary>
            Gets a value indicating whether use scroll value smoothing.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.Minimum">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.Maximum">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.Value">
            <summary>
            Gets or sets the scroll value (current, smooth).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.TargetValue">
            <summary>
            Gets or sets the target value (target, not smooth).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.ValueSlowDown">
            <summary>
            Gets the value slow down.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.IsThumbClicked">
            <summary>
            Gets a value indicating whether thumb is being clicked (scroll bar is in use).
            </summary>
        </member>
        <member name="E:FlaxEngine.GUI.ScrollBar.ValueChanged">
            <summary>
            Occurs when value gets changed.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.ScrollBar.ThumbEnabled">
            <summary>
            Enables/disabled scrolling by user.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollBar.TrackSize">
            <summary>
            Gets the size of the track.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.#ctor(FlaxEngine.GUI.Orientation)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.ScrollBar"/> class.
            </summary>
            <param name="orientation">The orientation.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.FastScroll">
            <summary>
            Cuts the scroll bar value smoothing and imminently goes to the target scroll value.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.ScrollViewTo(System.Single,System.Single,System.Boolean)">
            <summary>
            Scrolls the view to the desire range (favors minimum value if cannot cover whole range in a bounds).
            </summary>
            <param name="min">The view minimum.</param>
            <param name="max">The view maximum.</param>
            <param name="fastScroll">True of scroll to the item quickly without smoothing.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnValueChanged">
            <summary>
            Called when value gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.SetScrollRange(System.Single,System.Single)">
            <summary>
            Sets the scroll range (min and max at once).
            </summary>
            <param name="minimum">The minimum scroll range value (see <see cref="P:FlaxEngine.GUI.ScrollBar.Minimum"/>).</param>
            <param name="maximum">The maximum scroll range value (see <see cref="P:FlaxEngine.GUI.ScrollBar.Minimum"/>).</param>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnSizeChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnMouseEnter(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.AddUpdateCallbacks(FlaxEngine.GUI.RootControl)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollBar.RemoveUpdateCallbacks(FlaxEngine.GUI.RootControl)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.SplitPanel">
            <summary>
            GUI control that contains two child panels and the splitter between them.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEngine.GUI.SplitPanel.SplitterSize">
            <summary>
            The splitter size (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.SplitPanel.SplitterSizeHalf">
            <summary>
            The splitter half size (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.SplitPanel.Panel1">
            <summary>
            The first panel (left or upper based on Orientation).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.SplitPanel.Panel2">
            <summary>
            The second panel.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.SplitPanel.Orientation">
            <summary>
            Gets or sets the panel orientation.
            </summary>
            <value>
            The orientation.
            </value>
        </member>
        <member name="P:FlaxEngine.GUI.SplitPanel.SplitterValue">
            <summary>
            Gets or sets the splitter value (always in range [0; 1]).
            </summary>
            <value>
            The splitter value (always in range [0; 1]).
            </value>
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.#ctor(FlaxEngine.GUI.Orientation,FlaxEngine.GUI.ScrollBars,FlaxEngine.GUI.ScrollBars)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.SplitPanel"/> class.
            </summary>
            <param name="orientation">The orientation.</param>
            <param name="panel1Scroll">The panel1 scroll bars.</param>
            <param name="panel2Scroll">The panel2 scroll bars.</param>
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.OnLostFocus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.OnMouseLeave">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.OnEndMouseCapture">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.OnSizeChanged">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.SplitPanel.PerformLayoutBeforeChildren">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.TilesPanel">
            <summary>
            Panel that arranges child controls like tiles.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEngine.GUI.TilesPanel.TileMargin">
            <summary>
            Gets or sets the margin applied to each tile.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TilesPanel.TileSize">
            <summary>
            Gets or sets the size of the tile.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.TilesPanel.AutoResize">
            <summary>
            Gets or sets a value indicating whether perform automatic resize after tiles arrange.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TilesPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.TilesPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.TilesPanel.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.TilesPanel"/> class.
            </summary>
            <param name="tileMargin">The tile margin.</param>
        </member>
        <member name="M:FlaxEngine.GUI.TilesPanel.PerformLayoutBeforeChildren">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.UniformGridPanel">
            <summary>
            A panel that evenly divides up available space between all of its children.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEngine.GUI.UniformGridPanel.SlotPadding">
            <summary>
            Gets or sets the padding given to each slot.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.UniformGridPanel.SlotsHorizontally">
            <summary>
            Gets or sets the amount of slots horizontally. Use 0 to don't limit it.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.UniformGridPanel.SlotsVertically">
            <summary>
            Gets or sets the amount of slots vertically. Use 0 to don't limit it.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.UniformGridPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.UniformGridPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.UniformGridPanel.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.UniformGridPanel"/> class.
            </summary>
            <param name="slotPadding">The slot padding.</param>
        </member>
        <member name="M:FlaxEngine.GUI.UniformGridPanel.PerformLayoutBeforeChildren">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.VerticalPanel">
            <summary>
            This panel arranges child controls vertically.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.PanelWithMargins" />
        </member>
        <member name="M:FlaxEngine.GUI.VerticalPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.VerticalPanel"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.VerticalPanel.PerformLayoutBeforeChildren">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.VerticalPanel.PerformLayoutAfterChildren">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.VScrollBar">
            <summary>
            Vertical scroll bar control.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ScrollBar" />
        </member>
        <member name="M:FlaxEngine.GUI.VScrollBar.#ctor(FlaxEngine.GUI.ContainerControl,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.VScrollBar"/> class.
            </summary>
            <param name="parent">The parent control.</param>
            <param name="x">The x position.</param>
            <param name="height">The height.</param>
            <param name="width">The width.</param>
        </member>
        <member name="P:FlaxEngine.GUI.VScrollBar.TrackSize">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.RenderOutputControl">
            <summary>
            A common control used to present rendered frame in the UI.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEngine.GUI.RenderOutputControl.BackBufferFormat">
            <summary>
            The default back buffer format used by the GUI controls presenting rendered frames.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.RenderOutputControl.ResizeCheckTime">
            <summary>
            The resize check timeout (in seconds).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.RenderOutputControl._task">
            <summary>
            The task.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.RenderOutputControl._backBuffer">
            <summary>
            The back buffer.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderOutputControl.Task">
            <summary>
            Gets the task.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderOutputControl.RenderOnlyWithWindow">
            <summary>
            Gets or sets a value indicating whether render to that output only if parent window exists, otherwise false.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderOutputControl.UseAutomaticTaskManagement">
            <summary>
            Gets or sets a value indicating whether use automatic task rendering skipping if output is too small or window is missing. Disable it to manually control <see cref="P:FlaxEngine.RenderTask.Enabled"/>.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderOutputControl.KeepAspectRatio">
            <summary>
            Gets a value indicating whether keep aspect ratio of the backbuffer image, otherwise false.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderOutputControl.TintColor">
            <summary>
            Gets or sets the color of the tint used to color the backbuffer of the render output.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderOutputControl.Brightness">
            <summary>
            Gets or sets the brightness of the output.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderOutputControl.ResolutionScale">
            <summary>
            Gets or sets the rendering resolution scale. Can be used to upscale image or to downscale the rendering to save the performance.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RenderOutputControl.CustomResolution">
            <summary>
            Gets or sets the custom resolution to use for the rendering.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RenderOutputControl.#ctor(FlaxEngine.SceneRenderTask)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.RenderOutputControl"/> class.
            </summary>
            <param name="task">The task. Cannot be null.</param>
            <exception cref="T:System.ArgumentNullException">Invalid task.</exception>
        </member>
        <member name="M:FlaxEngine.GUI.RenderOutputControl.CanSkipRendering">
            <summary>
            Performs a check if rendering a current frame can be skipped (if control size is too small, has missing data, etc.).
            </summary>
            <returns>True if skip rendering, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.RenderOutputControl.OnEnd(FlaxEngine.RenderTask,FlaxEngine.GPUContext)">
            <summary>
            Called when ask rendering ends.
            </summary>
            <param name="task">The task.</param>
            <param name="context">The GPU execution context.</param>
        </member>
        <member name="M:FlaxEngine.GUI.RenderOutputControl.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RenderOutputControl.SyncBackbufferSize">
            <summary>
            Synchronizes size of the back buffer with the size of the control.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RenderOutputControl.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.RootControl">
            <summary>
            GUI root control that is represented by a window or an canvas and can contain children but has no parent at all. It's a source of the input events.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RootControl.GameRoot">
            <summary>
            Gets the main GUI control (it can be window or editor overriden control). Use it to plug-in custom GUI controls.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RootControl.CanvasRoot">
            <summary>
            Gets the canvas controls root container.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RootControl.FocusedControl">
            <summary>
            Gets or sets the current focused control
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RootControl.TrackingMouseOffset">
            <summary>
            Gets the tracking mouse offset.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.RootControl.MousePosition">
            <summary>
            Gets or sets the position of the mouse in the window space coordinates.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.RootControl.UpdateCallbacks">
            <summary>
            The update callbacks collection. Controls can register for this to get the update event for logic handling.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.RootControl.UpdateCallbacksToAdd">
            <summary>
            The update callbacks to add before invoking the update.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.RootControl.UpdateCallbacksToRemove">
            <summary>
            The update callbacks to remove before invoking the update.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.RootControl"/> class.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.RootControl.CustomNavigation">
            <summary>
            The custom callback function for UI navigation. Can be used to override the default behaviour.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.Navigate(FlaxEngine.GUI.NavDirection)">
            <summary>
            Performs the UI navigation.
            </summary>
            <param name="direction">The navigation direction.</param>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.SubmitFocused">
            <summary>
            Submits the currently focused control.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.StartTrackingMouse(FlaxEngine.GUI.Control,System.Boolean)">
            <summary>
            Starts the mouse tracking. Used by the scrollbars, splitters, etc.
            </summary>
            <param name="control">The target control that want to track mouse. It will receive OnMouseMove event.</param>
            <param name="useMouseScreenOffset">If set to <c>true</c> will use mouse screen offset.</param>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.EndTrackingMouse">
            <summary>
            Ends the mouse tracking.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.GetKey(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets keyboard key state.
            </summary>
            <param name="key">Key to check.</param>
            <returns>True while the user holds down the key identified by id.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.GetKeyDown(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets keyboard key down state.
            </summary>
            <param name="key">Key to check.</param>
            <returns>True during the frame the user starts pressing down the key.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.GetKeyUp(FlaxEngine.KeyboardKeys)">
            <summary>
            Gets keyboard key up state.
            </summary>
            <param name="key">Key to check.</param>
            <returns>True during the frame the user releases the button.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.GetMouseButton(FlaxEngine.MouseButton)">
            <summary>
            Gets mouse button state.
            </summary>
            <param name="button">Mouse button to check.</param>
            <returns>True while the user holds down the button.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.GetMouseButtonDown(FlaxEngine.MouseButton)">
            <summary>
            Gets mouse button down state.
            </summary>
            <param name="button">Mouse button to check.</param>
            <returns>True during the frame the user starts pressing down the button.</returns>
        </member>
        <member name="M:FlaxEngine.GUI.RootControl.GetMouseButtonUp(FlaxEngine.MouseButton)">
            <summary>
            Gets mouse button up state.
            </summary>
            <param name="button">Mouse button to check.</param>
            <returns>True during the frame the user releases the button.</returns>
        </member>
        <member name="P:FlaxEngine.GUI.RootControl.Root">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.ScrollableControl">
            <summary>
            Base class for container controls that can offset controls in a view (eg. scroll panels).
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="F:FlaxEngine.GUI.ScrollableControl._viewOffset">
            <summary>
            The view offset. Useful to offset contents of the container (used by the scrollbars and drop panels).
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.ScrollableControl.ViewOffset">
            <summary>
            Gets current view offset for all the controls (used by the scroll bars).
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollableControl.SetViewOffset(FlaxEngine.Vector2@)">
            <summary>
            Sets the view offset.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollableControl.OnViewOffsetChanged">
            <summary>
            Called when view offset gets changed.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.ScrollableControl.DrawChildren">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollableControl.IntersectsChildContent(FlaxEngine.GUI.Control,FlaxEngine.Vector2,FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollableControl.IntersectsContent(FlaxEngine.Vector2@,FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollableControl.PointToParent(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.ScrollableControl.PointFromParent(FlaxEngine.Vector2@)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.Style">
            <summary>
            Describes GUI controls style (which fonts and colors use etc.). Defines the default values used by the GUI control.s
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Style.Current">
            <summary>
            Global GUI style used by all the controls.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Style.FontTitle">
            <summary>
            The font title.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Style.FontLarge">
            <summary>
            The font large.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Style.FontMedium">
            <summary>
            The font medium.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Style.FontSmall">
            <summary>
            The font small.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Background">
            <summary>
            The background color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.LightBackground">
            <summary>
            The light background color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.DragWindow">
            <summary>
            The drag window color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Foreground">
            <summary>
            The foreground color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.ForegroundGrey">
            <summary>
            The foreground grey.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.ForegroundDisabled">
            <summary>
            The foreground disabled.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.BackgroundHighlighted">
            <summary>
            The background highlighted color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.BorderHighlighted">
            <summary>
            The border highlighted color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.BackgroundSelected">
            <summary>
            The background selected color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.BorderSelected">
            <summary>
            The border selected color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.BackgroundNormal">
            <summary>
            The background normal color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.BorderNormal">
            <summary>
            The border normal color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.TextBoxBackground">
            <summary>
            The text box background color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.TextBoxBackgroundSelected">
            <summary>
            The text box background selected color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.CollectionBackgroundColor">
            <summary>
            The collection background color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.ProgressNormal">
            <summary>
            The progress normal color.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.ArrowRight">
            <summary>
            The arrow right icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.ArrowDown">
            <summary>
            The arrow down icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Search">
            <summary>
            The search icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Settings">
            <summary>
            The settings icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Cross">
            <summary>
            The cross icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.CheckBoxIntermediate">
            <summary>
            The CheckBox intermediate icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.CheckBoxTick">
            <summary>
            The CheckBox tick icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.StatusBarSizeGrip">
            <summary>
            The status bar size grip icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Translate">
            <summary>
            The translate icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Rotate">
            <summary>
            The rotate icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Scale">
            <summary>
            The scale icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.Scalar">
            <summary>
            The scalar icon.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.Style.SharedTooltip">
            <summary>
            The shared tooltip control used by the controls if no custom tooltip is provided.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.TextBlock">
            <summary>
            The text block.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBlock.Range">
            <summary>
            The text range.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBlock.Style">
            <summary>
            The text style.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBlock.Bounds">
            <summary>
            The text location and size.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBlock.Tag">
            <summary>
            The custom tag.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.TextBlockStyle">
            <summary>
            The styling descriptor for the text block.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBlockStyle.Font">
            <summary>
            The text font.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBlockStyle.CustomMaterial">
            <summary>
            The custom material for the text rendering (must be GUI domain).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBlockStyle.Color">
            <summary>
            The text color (tint and opacity).
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBlockStyle.ShadowColor">
            <summary>
            The text shadow color (tint and opacity). Set to transparent to disable shadow drawing.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBlockStyle.ShadowOffset">
            <summary>
            The text shadow offset from the text location. Set to zero to disable shadow drawing.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBlockStyle.BackgroundSelectedBrush">
            <summary>
            The background brush for the selected text range.
            </summary>
        </member>
        <member name="F:FlaxEngine.GUI.TextBlockStyle.UnderlineBrush">
            <summary>
            The underline line brush.
            </summary>
        </member>
        <member name="T:FlaxEngine.GUI.Tooltip">
            <summary>
            The tooltip popup.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.ContainerControl" />
        </member>
        <member name="P:FlaxEngine.GUI.Tooltip.TimeToShow">
            <summary>
            Gets or sets the time in seconds that mouse have to be over the target to show the tooltip.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Tooltip.MaxWidth">
            <summary>
            Gets or sets the maximum width of the tooltip. Used to wrap text that overflows and ensure that tooltip stays readable.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.Tooltip.Window">
            <summary>
            Gets the tooltip window.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.GUI.Tooltip"/> class.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.Show(FlaxEngine.GUI.Control,FlaxEngine.Vector2,FlaxEngine.Rectangle)">
            <summary>
            Shows tooltip over given control.
            </summary>
            <param name="target">The parent control to attach to it.</param>
            <param name="location">Popup menu origin location in parent control coordinates.</param>
            <param name="targetArea">Tooltip target area of interest.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.Hide">
            <summary>
            Hides the popup.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.OnMouseEnterControl(FlaxEngine.GUI.Control)">
            <summary>
            Called when mouse enters a control.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.OnMouseOverControl(FlaxEngine.GUI.Control,System.Single)">
            <summary>
            Called when mouse is over a control.
            </summary>
            <param name="target">The target.</param>
            <param name="dt">The delta time.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.OnMouseLeaveControl(FlaxEngine.GUI.Control)">
            <summary>
            Called when mouse leaves a control.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.Update(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.Draw">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.PerformLayoutBeforeChildren">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.OnShowTooltip(System.String@,FlaxEngine.Vector2@,FlaxEngine.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.Tooltip.OnDestroy">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.GUI.WindowRootControl">
            <summary>
            Root control implementation used by the <see cref="T:FlaxEngine.Window"/>.
            </summary>
            <seealso cref="T:FlaxEngine.GUI.RootControl" />
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.Window">
            <summary>
            Gets the native window object.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.Title">
            <summary>
            Sets the window title.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.IsFullscreen">
            <summary>
            Gets a value indicating whether this window is in fullscreen mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.IsWindowed">
            <summary>
            Gets a value indicating whether this window is in windowed mode.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.IsShown">
            <summary>
            Gets a value indicating whether this instance is visible.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.IsMinimized">
            <summary>
            Gets a value indicating whether this window is minimized.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.IsMaximized">
            <summary>
            Gets a value indicating whether this window is maximized.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Show">
            <summary>
            Shows the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Hide">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Minimize">
            <summary>
            Minimizes the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Maximize">
            <summary>
            Maximizes the window.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Restore">
            <summary>
            Restores the window state before minimizing or maximizing.
            </summary>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Close(FlaxEngine.ClosingReason)">
            <summary>
            Closes the window.
            </summary>
            <param name="reason">The closing reason.</param>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.BringToFront(System.Boolean)">
            <summary>
            Brings window to the front of the Z order.
            </summary>
            <param name="force">True if move to the front by force, otherwise false.</param>
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.FlashWindow">
            <summary>
            Flashes the window to bring use attention.
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.FocusedControl">
            <summary>
            Gets or sets the current focused control
            </summary>
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.Cursor">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.TrackingMouseOffset">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.RootWindow">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.GUI.WindowRootControl.MousePosition">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.StartTrackingMouse(FlaxEngine.GUI.Control,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.EndTrackingMouse">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.GetKey(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.GetKeyDown(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.GetKeyUp(FlaxEngine.KeyboardKeys)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.GetMouseButton(FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.GetMouseButtonDown(FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.GetMouseButtonUp(FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.PointFromScreen(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.PointToScreen(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Focus">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.DoDragDrop(FlaxEngine.GUI.DragData)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.Focus(FlaxEngine.GUI.Control)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.OnMouseDown(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.OnMouseUp(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.OnMouseDoubleClick(FlaxEngine.Vector2,FlaxEngine.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.OnMouseWheel(FlaxEngine.Vector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.GUI.WindowRootControl.OnMouseMove(FlaxEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.CanvasRenderMode">
            <summary>
            The canvas rendering modes.
            </summary>
        </member>
        <member name="F:FlaxEngine.CanvasRenderMode.ScreenSpace">
            <summary>
            The screen space rendering mode that places UI elements on the screen rendered on top of the scene. If the screen is resized or changes resolution, the Canvas will automatically change size to match this.
            </summary>
        </member>
        <member name="F:FlaxEngine.CanvasRenderMode.CameraSpace">
            <summary>
            The camera space rendering mode that places Canvas in a given distance in front of a specified Camera. The UI elements are rendered by this camera, which means that the Camera settings affect the appearance of the UI. If the Camera is set to Perspective, the UI elements will be rendered with perspective, and the amount of perspective distortion can be controlled by the Camera Field of View. If the screen is resized, changes resolution, or the camera frustum changes, the Canvas will automatically change size to match as well.
            </summary>
        </member>
        <member name="F:FlaxEngine.CanvasRenderMode.WorldSpace">
            <summary>
            The world space rendering mode that places Canvas as any other object in the scene. The size of the Canvas can be set manually using its Transform, and UI elements will render in front of or behind other objects in the scene based on 3D placement. This is useful for UIs that are meant to be a part of the world. This is also known as a 'diegetic interface'.
            </summary>
        </member>
        <member name="F:FlaxEngine.CanvasRenderMode.WorldSpaceFaceCamera">
            <summary>
            The world space rendering mode that places Canvas as any other object in the scene and orients it to face the camera. The size of the Canvas can be set manually using its Transform, and UI elements will render in front of or behind other objects in the scene based on 3D placement. This is useful for UIs that are meant to be a part of the world. This is also known as a 'diegetic interface'.
            </summary>
        </member>
        <member name="T:FlaxEngine.CanvasRenderer">
            <summary>
            PostFx used to render the <see cref="T:FlaxEngine.UICanvas"/>. Used when render mode is <see cref="F:FlaxEngine.CanvasRenderMode.CameraSpace"/> or <see cref="F:FlaxEngine.CanvasRenderMode.WorldSpace"/>.
            </summary>
            <seealso cref="T:FlaxEngine.PostProcessEffect" />
        </member>
        <member name="F:FlaxEngine.CanvasRenderer.Canvas">
            <summary>
            The canvas to render.
            </summary>
        </member>
        <member name="P:FlaxEngine.CanvasRenderer.UseSingleTarget">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.CanvasRenderer.Location">
            <inheritdoc />
        </member>
        <member name="P:FlaxEngine.CanvasRenderer.Order">
            <inheritdoc />
        </member>
        <member name="M:FlaxEngine.CanvasRenderer.Render(FlaxEngine.GPUContext,FlaxEngine.RenderContext@,FlaxEngine.GPUTexture,FlaxEngine.GPUTexture)">
            <inheritdoc />
        </member>
        <member name="T:FlaxEngine.Utilities.Extensions">
            <summary>
            Collection of various extension methods.
            </summary>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.DeepClone``1(``0)">
            <summary>
            Creates deep clone for a class if all members of this class are marked as serializable (uses Json serialization).
            </summary>
            <param name="instance">The input instance of an object.</param>
            <typeparam name="T">The instance type of an object.</typeparam>
            <returns>Returns new object of provided class.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.RawClone``1(``0)">
            <summary>
            Creates raw clone for a structure using memory copy. Valid only for value types.
            </summary>
            <param name="instance">The input instance of an object.</param>
            <typeparam name="T">The instance type of an object.</typeparam>
            <returns>Returns new object of provided structure.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.IsMultiline(System.String)">
            <summary>
            Checks if the text is multiline.
            </summary>
            <param name="str">Text to check.</param>
            <returns>True if text is a multiline, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.GetLines(System.String,System.Boolean)">
            <summary>
            Splits string into lines
            </summary>
            <param name="str">Text to split</param>
            <param name="removeEmptyLines">True if remove empty lines, otherwise keep them</param>
            <returns>Array with all lines</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="destination">The <see cref="T:System.Collections.Generic.ICollection`1"/> to add items to.</param>
            <param name="collection">The collection whose elements should be added to the end of the <paramref name="destination"/>. It can contain elements that are <see langword="null"/>, if type <typeparamref name="T"/> is a reference type.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="destination"/> or <paramref name="collection"/> are <see langword="null"/>.</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.EnqueueRange``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enqueues the elements of the specified collection to the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Generic.Queue`1"/> to add items to.</param>
            <param name="collection">The collection whose elements should be added to the <paramref name="queue"/>. It can contain elements that are <see langword="null"/>, if type <typeparamref name="T"/> is a reference type.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="queue"/> or <paramref name="collection"/> are <see langword="null"/>.</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.PushRange``1(System.Collections.Generic.Stack{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Pushes the elements of the specified collection to the <see cref="T:System.Collections.Generic.Stack`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="stack">The <see cref="T:System.Collections.Generic.Stack`1"/> to add items to.</param>
            <param name="collection">The collection whose elements should be pushed on to the <paramref name="stack"/>. It can contain elements that are <see langword="null"/>, if type <typeparamref name="T"/> is a reference type.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="stack"/> or <paramref name="collection"/> are <see langword="null"/>.</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each element of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the elements of the input sequence.</typeparam>
            <param name="source">The sequence of elements to execute the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="action">The <see cref="T:System.Action`1"/> delegate to perform on each element of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>1.</param>
            <exception cref="T:System.ArgumentException"><paramref name="source"/> or <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.Choose``1(System.Random,System.Collections.Generic.IList{``0})">
            <summary>
            Chooses a random item from the collection.
            </summary>
            <typeparam name="T">The type of the elements of the input sequence.</typeparam>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="collection">Collection to choose item from.</param>
            <returns>A random item from collection</returns>
            <exception cref="T:System.ArgumentNullException">If the random argument is null.</exception>
            <exception cref="T:System.ArgumentNullException">If the collection is null.</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.Choose``1(System.Random,``0[])">
            <summary>
            Chooses a random item.
            </summary>
            <typeparam name="T">The type of the elements of the input sequence.</typeparam>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="collection">Collection to choose item from.</param>
            <returns>A random item from collection</returns>
            <exception cref="T:System.ArgumentNullException">If the random  is null.</exception>
            <exception cref="T:System.ArgumentNullException">If the collection is null.</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.Shuffle``1(System.Random,System.Collections.Generic.IList{``0})">
            <summary>
            Shuffles the collection in place.
            </summary>
            <typeparam name="T">The type of the elements of the input sequence.</typeparam>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="collection">Collection to shuffle.</param>
            <exception cref="T:System.ArgumentNullException">If the random argument is null.</exception>
            <exception cref="T:System.ArgumentNullException">If the random collection is null.</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextBool(System.Random,System.Single)">
            <summary>
            Generates a random <see cref="T:System.Boolean"/>.
            </summary>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="weight">Normalized value that determines the chance to return true.</param>
            <returns>A <see cref="T:System.Boolean"/> thats either true or false.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextByte(System.Random,System.Byte)">
            <summary>
            Generates a random <see cref="T:System.Byte"/> value up until an exclusive maximum.
            </summary>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="max">The maximum value. If it's zero, a maximum of 256 is used</param>
            <returns>A random <see cref="T:System.Byte"/> between min and max.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextByte(System.Random,System.Byte,System.Byte)">
            <summary>
            Generates a random <see cref="T:System.Byte"/> value between min and max.
            </summary>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>A random <see cref="T:System.Byte"/> between min and max.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextFloat(System.Random,System.Single,System.Single)">
            <summary>
            Generates a random <see cref="T:System.Single"/> value between min and max.
            </summary>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>A random <see cref="T:System.Single"/> between min and max.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextFloat(System.Random,System.Single)">
            <summary>
            Generates a random <see cref="T:System.Single"/>  value between 0 and max.
            </summary>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="max">The maximum value.</param>
            <returns>A random <see cref="T:System.Single"/> between min and max.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextQuaternion(System.Random,System.Boolean)">
            <summary>
            Generates a random <see cref="T:FlaxEngine.Quaternion"/>.
            </summary>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="randomRoll">Should the roll value be randomized.</param>
            <returns>A random <see cref="T:FlaxEngine.Quaternion"/>.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextUnitVector2(System.Random,System.Single)">
            <summary>
            Generates a random <see cref="T:FlaxEngine.Vector2"/> point in a circle of a given radius.
            </summary>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="radius">Radius of circle. Default 1.0f./>.</param>
            <returns>A random <see cref="T:FlaxEngine.Vector2"/>.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextUnitVector3(System.Random)">
            <summary>
            Generates a uniformly distributed random unit length vector point on a unit sphere.
            </summary>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <returns>A random <see cref="T:FlaxEngine.Vector3"/>.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextVector2(System.Random,System.Single,System.Single)">
            <summary>
            Gets a random <see cref="T:FlaxEngine.Vector2"/> with components in a given range.
            </summary>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>A random <see cref="T:FlaxEngine.Vector2"/>.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextVector3(System.Random,System.Single,System.Single)">
            <summary>
            Gets a random <see cref="T:FlaxEngine.Vector3"/> with components in a given range.
            </summary>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>A random <see cref="T:FlaxEngine.Vector3"/>.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextVector4(System.Random,System.Single,System.Single)">
            <summary>
            Gets a random <see cref="T:FlaxEngine.Vector4"/> with components in a given range.
            </summary>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>A random <see cref="T:FlaxEngine.Vector4"/>.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextColor(System.Random,System.Boolean)">
            <summary>
            Generates a random <see cref="T:FlaxEngine.Color"/>.
            </summary>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="randomAlpha">Randomize the alpha value.</param>
            <returns>A nice random <see cref="T:FlaxEngine.Color"/>.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextColorHSV(System.Random,System.Boolean)">
            <summary>
            Generates a random <see cref="T:FlaxEngine.ColorHSV"/>.
            </summary>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="randomAlpha">Randomize the alpha value.</param>
            <returns>A nice random <see cref="T:FlaxEngine.ColorHSV"/>.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            Gets a random <see cref="T:System.Double"/>.
            </summary>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>A random <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextDouble(System.Random,System.Double)">
            <summary>
            Gets a random <see cref="T:System.Double"/>.
            </summary>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <param name="max">The maximum value.</param>
            <returns>A random <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextLong(System.Random)">
            <summary>
            Gets a random <see cref="T:System.Int64"/>.
            </summary>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <returns>A random <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.Extensions.NextEnum``1(System.Random)">
            <summary>
            Returns a random value of the given enum.
            </summary>
            <typeparam name="TEnum">The enum to get the value from.</typeparam>
            <param name="random">An instance of <see cref="T:System.Random"/>.</param>
            <returns>A random enum value.</returns>
        </member>
        <member name="T:FlaxEngine.Utilities.MeshDataCache">
            <summary>
            Helper utility for caching model meshes data.
            </summary>
        </member>
        <member name="T:FlaxEngine.Utilities.MeshDataCache.MeshData">
            <summary>
            The single mesh data container.
            </summary>
        </member>
        <member name="F:FlaxEngine.Utilities.MeshDataCache.MeshData.IndexBuffer">
            <summary>
            The index buffer.
            </summary>
        </member>
        <member name="F:FlaxEngine.Utilities.MeshDataCache.MeshData.VertexBuffer">
            <summary>
            The vertex buffer.
            </summary>
        </member>
        <member name="P:FlaxEngine.Utilities.MeshDataCache.MeshDatas">
            <summary>
            Gets the mesh datas (null if during downloading).
            </summary>
        </member>
        <member name="E:FlaxEngine.Utilities.MeshDataCache.Finished">
            <summary>
            Occurs when mesh data gets downloaded (called on async thread).
            </summary>
        </member>
        <member name="M:FlaxEngine.Utilities.MeshDataCache.RequestMeshData(FlaxEngine.Model)">
            <summary>
            Requests the mesh data.
            </summary>
            <param name="model">The model to get it's data.</param>
            <returns>True if ahs valid data to access, otherwise false if it's during downloading.</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.MeshDataCache.Dispose">
            <summary>
            Releases cache.
            </summary>
        </member>
        <member name="M:FlaxEngine.Utilities.MeshDataCache.WaitForMeshDataRequestEnd">
            <summary>
            Waits for mesh data request to end. Does nothing if already has valid data or no valid request pending.
            </summary>
        </member>
        <member name="T:FlaxEngine.Utilities.PerlinNoise">
            <summary>
            Helper class for Perlin Noise generation.
            </summary>
        </member>
        <member name="F:FlaxEngine.Utilities.PerlinNoise.Base">
            <summary>
            The base value.
            </summary>
        </member>
        <member name="F:FlaxEngine.Utilities.PerlinNoise.NoiseScale">
            <summary>
            The noise scale parameter.
            </summary>
        </member>
        <member name="F:FlaxEngine.Utilities.PerlinNoise.NoiseAmount">
            <summary>
            The noise amount parameter.
            </summary>
        </member>
        <member name="F:FlaxEngine.Utilities.PerlinNoise.Octaves">
            <summary>
            The noise octaves count.
            </summary>
        </member>
        <member name="M:FlaxEngine.Utilities.PerlinNoise.#ctor(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEngine.Utilities.PerlinNoise"/> class.
            </summary>
            <param name="baseValue">The base value.</param>
            <param name="scale">The noise scale.</param>
            <param name="amount">The noise amount.</param>
            <param name="octaves">The noise octaves count.</param>
        </member>
        <member name="M:FlaxEngine.Utilities.PerlinNoise.Sample(System.Int32,System.Int32)">
            <summary>
            Samples the Perlin Noise at the given location (integer coordinates).
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <returns>The noise value.</returns>
        </member>
        <member name="T:FlaxEngine.Utilities.State">
            <summary>
            State machine state
            </summary>
        </member>
        <member name="P:FlaxEngine.Utilities.State.StateMachine">
            <summary>
            Gets the state machine.
            </summary>
        </member>
        <member name="P:FlaxEngine.Utilities.State.IsActive">
            <summary>
            Gets a value indicating whether this state is active.
            </summary>
        </member>
        <member name="M:FlaxEngine.Utilities.State.CanEnter">
            <summary>
            Checks if can enter to that state
            </summary>
            <returns>True if can enter to that state, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.State.CanExit(FlaxEngine.Utilities.State)">
            <summary>
            Checks if can exit from that state
            </summary>
            <param name="nextState">Next state to enter after exit from the current state</param>
            <returns>True if can exit from that state, otherwise false</returns>
        </member>
        <member name="M:FlaxEngine.Utilities.State.OnEnter">
            <summary>
            Called when state is starting to be active.
            </summary>
        </member>
        <member name="M:FlaxEngine.Utilities.State.OnExit(FlaxEngine.Utilities.State)">
            <summary>
            Called when state is ending to be active.
            </summary>
            <param name="nextState">The next state.</param>
        </member>
        <member name="T:FlaxEngine.Utilities.StateMachine">
            <summary>
            State machine logic pattern
            </summary>
        </member>
        <member name="F:FlaxEngine.Utilities.StateMachine.currentState">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:FlaxEngine.Utilities.StateMachine.states">
            <summary>
            The states.
            </summary>
        </member>
        <member name="P:FlaxEngine.Utilities.StateMachine.CurrentState">
            <summary>
            Gets the current state.
            </summary>
        </member>
        <member name="E:FlaxEngine.Utilities.StateMachine.StateChanging">
            <summary>
            Occurs when state is being changed.
            </summary>
        </member>
        <member name="E:FlaxEngine.Utilities.StateMachine.StateChanged">
            <summary>
            Occurs when state gets changed.
            </summary>
        </member>
        <member name="P:FlaxEngine.Utilities.StateMachine.States">
            <summary>
            Gets the states (read-only).
            </summary>
        </member>
        <member name="M:FlaxEngine.Utilities.StateMachine.GetState``1">
            <summary>
            Gets state of given type.
            </summary>
            <typeparam name="TStateType">The type of the state.</typeparam>
        </member>
        <member name="M:FlaxEngine.Utilities.StateMachine.GoToState``1">
            <summary>
            Goes to the state.
            </summary>
            <typeparam name="TStateType">The type of the state.</typeparam>
            <exception cref="T:System.InvalidOperationException">Cannot find state of given type.</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.StateMachine.GoToState(FlaxEngine.Utilities.State)">
            <summary>
            Goes to the state.
            </summary>
            <param name="state">The target state.</param>
            <exception cref="T:System.ArgumentNullException">state</exception>
        </member>
        <member name="M:FlaxEngine.Utilities.StateMachine.AddState(FlaxEngine.Utilities.State)">
            <summary>
            Adds the state.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:FlaxEngine.Utilities.StateMachine.RemoveState(FlaxEngine.Utilities.State)">
            <summary>
            Removes the state.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:FlaxEngine.Utilities.StateMachine.SwitchState(FlaxEngine.Utilities.State)">
            <summary>
            Switches the state.
            </summary>
            <param name="nextState">Then next state.</param>
        </member>
        <member name="T:FlaxEngine.StringUtils">
            <summary>
            String utilities class.
            </summary>
        </member>
        <member name="M:FlaxEngine.StringUtils.IsHexDigit(System.Char)">
            <summary>
            Checks if given character is valid hexadecimal digit.
            </summary>
            <param name="c">The hex character.</param>
            <returns>True if character is valid hexadecimal digit, otherwise false.</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.HexDigit(System.Char)">
            <summary>
            Parse hexadecimals digit to value.
            </summary>
            <param name="c">The hex character.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.GetPathWithoutExtension(System.String)">
            <summary>
            Removes extension from the file path.
            </summary>
            <param name="path">The path.</param>
            <returns>Path without extension.</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.NormalizePath(System.String)">
            <summary>
            Normalizes the path to the standard Flax format (all separators are '/' except for drive 'C:\').
            </summary>
            <param name="path">The path.</param>
            <returns>The normalized path.</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.NormalizeExtension(System.String)">
            <summary>
            Normalizes the file extension to common format: no leading dot and all lowercase.
            For example: '.TxT' will return 'txt'.
            </summary>
            <param name="extension">The extension.</param>
            <returns>The normalized extension.</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.CombinePaths(System.String,System.String)">
            <summary>
            Combines the paths.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The combined path</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.CombinePaths(System.String,System.String,System.String)">
            <summary>
            Combines the paths.
            </summary>
            <param name="left">The left.</param>
            <param name="middle">The middle.</param>
            <param name="right">The right.</param>
            <returns>The combined path</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.IsRelative(System.String)">
            <summary>
            Determines whether the specified path is relative or is absolute.
            </summary>
            <param name="path">The input path.</param>
            <returns><c>true</c> if the specified path is relative; otherwise, <c>false</c> if is relative.</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.ConvertRelativePathToAbsolute(System.String)">
            <summary>
            Converts path relative to the engine startup folder into absolute path.
            </summary>
            <param name="path">Path relative to the engine directory.</param>
            <returns>Absolute path</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.ConvertRelativePathToAbsolute(System.String,System.String)">
            <summary>
            Converts path relative to basePath into absolute path.
            </summary>
            <param name="basePath">The base path.</param>
            <param name="path">Path relative to basePath.</param>
            <returns>Absolute path</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.RemovePathRelativeParts(System.String)">
            <summary>
            Removes the relative parts from the path. For instance it replaces 'xx/yy/../zz' with 'xx/zz'.
            </summary>
            <param name="path">The input path.</param>
            <returns>The output path.</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.Reverse(System.String)">
            <summary>
            Reverses the specified input string.
            </summary>
            <remarks>Correctly handles all UTF-16 strings</remarks>
            <param name="s">The string to reverse.</param>
            <returns>The reversed string.</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.RemoveNewLine(System.String)">
            <summary>
            Removes any new line characters (\r or \n) from the string.
            </summary>
            <param name="s">The string to process.</param>
            <returns>The single-line string.</returns>
        </member>
        <member name="M:FlaxEngine.StringUtils.IncrementNameNumber(System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Tries to parse number in the name brackets at the end of the value and then increment it to create a new name.
            Supports numbers at the end without brackets.
            </summary>
            <param name="name">The input name.</param>
            <param name="isValid">Custom function to validate the created name.</param>
            <returns>The new name.</returns>
        </member>
        <member name="T:FlaxEngine.Utils">
            <summary>
            Class with helper functions.
            </summary>
        </member>
        <member name="M:FlaxEngine.Utils.MemoryCopy(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Copies data from one memory location to another using an unmanaged memory pointers.
            </summary>
            <remarks>Uses low-level platform impl.</remarks>
            <param name="source">The source location.</param>
            <param name="destination">The destination location.</param>
            <param name="length">The length (amount of bytes to copy).</param>
        </member>
        <member name="M:FlaxEngine.Utils.MemoryCopy(System.IntPtr,System.IntPtr,System.UInt64)">
            <summary>
            Copies data from one memory location to another using an unmanaged memory pointers.
            </summary>
            <remarks>Uses low-level platform impl.</remarks>
            <param name="source">The source location.</param>
            <param name="destination">The destination location.</param>
            <param name="length">The length (amount of bytes to copy).</param>
        </member>
        <member name="M:FlaxEngine.Utils.MemoryClear(System.IntPtr,System.UInt64)">
            <summary>
            Clears the memory region with zeros.
            </summary>
            <remarks>Uses low-level platform impl.</remarks>
            <param name="dst">Destination memory address</param>
            <param name="size">Size of the memory to clear in bytes</param>
        </member>
        <member name="M:FlaxEngine.Utils.MemoryCompare(System.IntPtr,System.IntPtr,System.UInt64)">
            <summary>
            Compares two blocks of the memory.
            </summary>
            <remarks>Uses low-level platform impl.</remarks>
            <param name="buf1">The first buffer address.</param>
            <param name="buf2">The second buffer address.</param>
            <param name="size">Size of the memory to compare in bytes.</param>
        </member>
        <member name="M:FlaxEngine.Utils.RoundTo1DecimalPlace(System.Single)">
            <summary>
            Rounds the floating point value up to 1 decimal place.
            </summary>
            <param name="value">The value.</param>
            <returns>The rounded result.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.RoundTo2DecimalPlaces(System.Single)">
            <summary>
            Rounds the floating point value up to 2 decimal places.
            </summary>
            <param name="value">The value.</param>
            <returns>The rounded result.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.RoundTo3DecimalPlaces(System.Single)">
            <summary>
            Rounds the floating point value up to 3 decimal places.
            </summary>
            <param name="value">The value.</param>
            <returns>The rounded result.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.GetEmptyArray``1">
            <summary>
            Gets the empty array of the given type (shared one).
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>The empty array object.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ArraysEqual``1(``0[],``0[])">
            <summary>
            Determines whether two arrays are equal by comparing the elements by using the default equality comparer for their type.
            </summary>
            <typeparam name="T">The type of the elements of the input sequences.</typeparam>
            <param name="a1">The first array.</param>
            <param name="a2">The second array.</param>
            <returns><c>true</c> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ArraysEqual``1(``0[],System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Determines whether two arrays are equal by comparing the elements by using the default equality comparer for their type.
            </summary>
            <typeparam name="T">The type of the elements of the input sequences.</typeparam>
            <param name="a1">The first array.</param>
            <param name="a2">The second array.</param>
            <returns><c>true</c> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ArraysEqual``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            Determines whether two arrays are equal by comparing the elements by using the default equality comparer for their type.
            </summary>
            <typeparam name="T">The type of the elements of the input sequences.</typeparam>
            <param name="a1">The first array.</param>
            <param name="a2">The second array.</param>
            <returns><c>true</c> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.GetAssemblyByName(System.String)">
            <summary>
            Gets the assembly with the given name.
            </summary>
            <param name="name">The name.</param>
            <returns>The assembly or null if not found.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.GetAssemblyByName(System.String,System.Reflection.Assembly[])">
            <summary>
            Gets the assembly with the given name.
            </summary>
            <param name="name">The name.</param>
            <param name="assemblies">The assemblies collection to search for.</param>
            <returns>The assembly or null if not found.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ReadColor32(System.IO.BinaryReader)">
            <summary>
            Reads the color from the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ReadColor(System.IO.BinaryReader)">
            <summary>
            Reads the color from the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ReadVector2(System.IO.BinaryReader)">
            <summary>
            Reads the Vector2 from the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ReadVector3(System.IO.BinaryReader)">
            <summary>
            Reads the Vector3 from the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ReadVector4(System.IO.BinaryReader)">
            <summary>
            Reads the Vector4 from the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ReadInt2(System.IO.BinaryReader)">
            <summary>
            Reads the Int2 from the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ReadInt3(System.IO.BinaryReader)">
            <summary>
            Reads the Int3 from the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ReadInt4(System.IO.BinaryReader)">
            <summary>
            Reads the Int4 from the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ReadQuaternion(System.IO.BinaryReader)">
            <summary>
            Reads the Quaternion from the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ReadBoundingBox(System.IO.BinaryReader)">
            <summary>
            Reads the BoundingBox from the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ReadBoundingSphere(System.IO.BinaryReader)">
            <summary>
            Reads the BoundingSphere from the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ReadRay(System.IO.BinaryReader)">
            <summary>
            Reads the Ray from the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ReadTransform(System.IO.BinaryReader)">
            <summary>
            Reads the Transform from the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ReadMatrix(System.IO.BinaryReader)">
            <summary>
            Reads the Matrix from the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:FlaxEngine.Utils.ReadJson(System.IO.BinaryReader,FlaxEngine.ISerializable)">
            <summary>
            Deserializes object from Json by reading it as a raw data (ver+length+bytes).
            </summary>
            <remarks>Reads version number, data length and actual data bytes from the stream.</remarks>
            <param name="stream">The stream.</param>
            <param name="obj">The object to deserialize.</param>
        </member>
        <member name="M:FlaxEngine.Utils.Write(System.IO.BinaryWriter,FlaxEngine.Color32)">
            <summary>
            Writes the color to the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:FlaxEngine.Utils.Write(System.IO.BinaryWriter,FlaxEngine.Color)">
            <summary>
            Writes the color to the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:FlaxEngine.Utils.Write(System.IO.BinaryWriter,FlaxEngine.Vector2)">
            <summary>
            Writes the Vector2 to the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:FlaxEngine.Utils.Write(System.IO.BinaryWriter,FlaxEngine.Vector3)">
            <summary>
            Writes the Vector3 to the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:FlaxEngine.Utils.Write(System.IO.BinaryWriter,FlaxEngine.Vector4)">
            <summary>
            Writes the Vector4 to the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:FlaxEngine.Utils.Write(System.IO.BinaryWriter,FlaxEngine.Int2)">
            <summary>
            Writes the Int2 to the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:FlaxEngine.Utils.Write(System.IO.BinaryWriter,FlaxEngine.Int3)">
            <summary>
            Writes the Int3 to the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:FlaxEngine.Utils.Write(System.IO.BinaryWriter,FlaxEngine.Int4)">
            <summary>
            Writes the Int4 to the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:FlaxEngine.Utils.Write(System.IO.BinaryWriter,FlaxEngine.Quaternion)">
            <summary>
            Writes the Quaternion to the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:FlaxEngine.Utils.Write(System.IO.BinaryWriter,FlaxEngine.BoundingBox)">
            <summary>
            Writes the BoundingBox to the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:FlaxEngine.Utils.Write(System.IO.BinaryWriter,FlaxEngine.BoundingSphere)">
            <summary>
            Writes the BoundingSphere to the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:FlaxEngine.Utils.Write(System.IO.BinaryWriter,FlaxEngine.Transform)">
            <summary>
            Writes the Transform to the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:FlaxEngine.Utils.Write(System.IO.BinaryWriter,FlaxEngine.Rectangle)">
            <summary>
            Writes the Rectangle to the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:FlaxEngine.Utils.Write(System.IO.BinaryWriter,FlaxEngine.Ray)">
            <summary>
            Writes the Ray to the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:FlaxEngine.Utils.Write(System.IO.BinaryWriter,FlaxEngine.Matrix)">
            <summary>
            Writes the Matrix to the binary stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:FlaxEngine.Utils.WriteJson(System.IO.BinaryWriter,FlaxEngine.ISerializable)">
            <summary>
            Serializes object to Json and writes it as a raw data (ver+length+bytes).
            </summary>
            <param name="stream">The stream.</param>
            <remarks>Writes version number, data length and actual data bytes to the stream.</remarks>
            <param name="obj">The object to serialize.</param>
        </member>
        <member name="T:FlaxEditor.Content.Settings.AudioSettings">
            <summary>
            Audio settings container.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Settings.AudioSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Settings.AudioSettings"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.AudioSettings.DisableAudio">
            <summary>
            If checked, audio playback will be disabled in build game. Can be used if game uses custom audio playback engine.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.AudioSettings.DopplerFactor">
            <summary>
            The doppler effect factor. Scale for source and listener velocities. Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.AudioSettings.MuteOnFocusLoss">
            <summary>
            True if mute all audio playback when game has no use focus.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.BuildSettings">
            <summary>
            The game building rendering settings.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Settings.BuildSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Settings.BuildSettings"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildSettings.MaxAssetsPerPackage">
            <summary>
            The maximum amount of assets to include into a single assets package. Asset packages will split into several packages if need to.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildSettings.MaxPackageSizeMB">
            <summary>
            The maximum size of the single assets package (in megabytes). Asset packages will split into several packages if need to.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildSettings.ContentKey">
            <summary>
            The game content cooking keycode. Use the same value for a game and DLC packages to support loading them by the build game. Use 0 to randomize it during building.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildSettings.ForDistribution">
            <summary>
            If checked, the builds produced by the Game Cooker will be treated as for final game distribution (eg. for game store upload). Builds done this way cannot be tested on console devkits (eg. Xbox One, Xbox Scarlett).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildSettings.SkipPackaging">
            <summary>
            If checked, the output build files won't be packaged for the destination platform. Useful when debugging build from local PC.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildSettings.AdditionalAssets">
            <summary>
            The list of additional assets to include into build (into root assets set).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildSettings.AdditionalAssetFolders">
            <summary>
            The list of additional folders with assets to include into build (into root assets set). Paths relative to the project directory (or absolute).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildSettings.ShadersNoOptimize">
            <summary>
            Disables shaders compiler optimizations in cooked game. Can be used to debug shaders on a target platform or to speed up the shaders compilation time.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.BuildSettings.ShadersGenerateDebugData">
            <summary>
            Enables shader debug data generation for shaders in cooked game (depends on the target platform rendering backend).
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.GameSettings">
            <summary>
            The main game engine configuration service. Loads and applies game configuration.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Settings.GameSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Settings.GameSettings"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.ProductName">
            <summary>
            The product full name.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.CompanyName">
            <summary>
            The company full name.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.CopyrightNotice">
            <summary>
            The copyright note used for content signing (eg. source code header).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Icon">
            <summary>
            The default application icon.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.FirstScene">
            <summary>
            Reference to the first scene to load on a game startup.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.NoSplashScreen">
            <summary>
            True if skip showing splash screen image on the game startup.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.SplashScreen">
            <summary>
            Reference to the splash screen image to show on a game startup.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Time">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.TimeSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Audio">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.AudioSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.LayersAndTags">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.LayersAndTagsSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Physics">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.PhysicsSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Input">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.InputSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Graphics">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.GraphicsSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Navigation">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.NavigationSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Localization">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.LocalizationSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.GameCooking">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.BuildSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.Streaming">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.StreamingSettings"/> asset.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.CustomSettings">
            <summary>
            The custom settings to use with a game. Can be specified by the user to define game-specific options and be used by the external plugins (used as key-value pair).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GameSettings.WindowsPlatform">
            <summary>
            Reference to <see cref="T:FlaxEditor.Content.Settings.WindowsPlatformSettings"/> asset. Used to apply configuration on Windows platform.
            </summary>
        </member>
        <member name="P:FlaxEditor.Content.Settings.GameSettings.GameSettingsAssetPath">
            <summary>
            Gets the absolute path to the game settings asset file.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Settings.GameSettings.Load">
            <summary>
            Loads the game settings asset.
            </summary>
            <returns>The loaded game settings.</returns>
        </member>
        <member name="M:FlaxEditor.Content.Settings.GameSettings.Load``1">
            <summary>
            Loads the settings of the given type.
            </summary>
            <remarks>
            Supports loading game settings, any sub settings container (e.g. <see cref="T:FlaxEditor.Content.Settings.PhysicsSettings"/>) and custom settings (see <see cref="F:FlaxEditor.Content.Settings.GameSettings.CustomSettings"/>).
            </remarks>
            <code>
            var time = GameSettings.Load&amp;ltTimeSettings&amp;gt;();
            </code>
            <typeparam name="T">The game settings type (e.g. <see cref="T:FlaxEditor.Content.Settings.TimeSettings"/>).</typeparam>
            <returns>Loaded settings object or null if fails.</returns>
        </member>
        <member name="T:FlaxEditor.Content.Settings.GraphicsSettings">
            <summary>
            Graphics rendering settings.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Settings.GraphicsSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Settings.GraphicsSettings"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.UseVSync">
            <summary>
            Enables rendering synchronization with the refresh rate of the display device to avoid "tearing" artifacts.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.AAQuality">
            <summary>
            Anti Aliasing quality setting.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.SSRQuality">
            <summary>
            Screen Space Reflections quality setting.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.SSAOQuality">
            <summary>
            Screen Space Ambient Occlusion quality setting.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.VolumetricFogQuality">
            <summary>
            Volumetric Fog quality setting.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.ShadowsQuality">
            <summary>
            The shadows quality.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.ShadowMapsQuality">
            <summary>
            The shadow maps quality (textures resolution).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.GraphicsSettings.AllowCSMBlending">
            <summary>
            Enables cascades splits blending for directional light shadows.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.LayersAndTagsSettings">
            <summary>
            Layers and objects tags settings.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Settings.LayersAndTagsSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Settings.LayersAndTagsSettings"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.LayersAndTagsSettings.Tags">
            <summary>
            The tag names.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.LayersAndTagsSettings.Layers">
            <summary>
            The layers names.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Settings.LayersAndTagsSettings.GetCurrentTags">
            <summary>
            Gets the current tags collection.
            </summary>
            <returns>The tags collection.</returns>
        </member>
        <member name="M:FlaxEditor.Content.Settings.LayersAndTagsSettings.GetCurrentLayers">
            <summary>
            Gets the current layer names (max 32 items but trims last empty items).
            </summary>
            <returns>The layers.</returns>
        </member>
        <member name="T:FlaxEditor.Content.Settings.TimeSettings">
            <summary>
            Time and game simulation settings container.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Settings.TimeSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Settings.TimeSettings"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.TimeSettings.UpdateFPS">
            <summary>
            The target amount of the game logic updates per second (script updates frequency).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.TimeSettings.PhysicsFPS">
            <summary>
            The target amount of the physics simulation updates per second (also fixed updates frequency).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.TimeSettings.DrawFPS">
            <summary>
            The target amount of the frames rendered per second (actual game FPS).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.TimeSettings.TimeScale">
            <summary>
            The game time scale factor. Default is 1.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.TimeSettings.MaxUpdateDeltaTime">
            <summary>
            The maximum allowed delta time (in seconds) for the game logic update step.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.InputSettings">
            <summary>
            Input settings container.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Settings.InputSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Settings.InputSettings"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.InputSettings.ActionMappings">
            <summary>
            Maps a discrete button or key press events to a "friendly name" that will later be bound to event-driven behavior. The end effect is that pressing (and/or releasing) a key, mouse button, or keypad button.
            </summary>
            <seealso cref="P:FlaxEngine.Input.ActionMappings"/>
        </member>
        <member name="F:FlaxEditor.Content.Settings.InputSettings.AxisMappings">
            <summary>
            Maps keyboard, controller, or mouse inputs to a "friendly name" that will later be bound to continuous game behavior, such as movement. The inputs mapped in AxisMappings are continuously polled, even if they are just reporting that their input value.
            </summary>
            <seealso cref="P:FlaxEngine.Input.AxisMappings"/>
        </member>
        <member name="T:FlaxEditor.Content.Settings.LocalizationSettings">
            <summary>
            Game localization and internalization settings container.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Settings.LocalizationSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Settings.LocalizationSettings"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.LocalizationSettings.LocalizedStringTables">
            <summary>
            The list of the string localization tables used by the game.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.LocalizationSettings.DefaultFallbackLanguage">
            <summary>
            The default fallback language to use if localization system fails to pick the system locale language (eg. en-GB).
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.NavigationSettings">
            <summary>
            The navigation system settings container.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.AutoAddMissingNavMeshes">
            <summary>
            If checked, enables automatic navmesh actors spawning on a scenes that are using it during navigation building.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.AutoRemoveMissingNavMeshes">
            <summary>
            If checked, enables automatic navmesh actors removing from a scenes that are not using it during navigation building.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.CellHeight">
            <summary>
            The height of a grid cell in the navigation mesh building steps using heightfields. A lower number means higher precision on the vertical axis but longer build times.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.CellSize">
            <summary>
            The width/height of a grid cell in the navigation mesh building steps using heightfields. A lower number means higher precision on the horizontal axes but longer build times.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.TileSize">
            <summary>
            Tile size used for Navigation mesh tiles, the final size of a tile is CellSize*TileSize.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.MinRegionArea">
            <summary>
            The minimum number of cells allowed to form isolated island areas.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.MergeRegionArea">
            <summary>
            Any regions with a span count smaller than this value will, if possible, be merged with larger regions.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.MaxEdgeLen">
            <summary>
            The maximum allowed length for contour edges along the border of the mesh.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.MaxEdgeError">
            <summary>
            The maximum distance a simplified contour's border edges should deviate from the original raw contour.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.DetailSamplingDist">
            <summary>
            The sampling distance to use when generating the detail mesh.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.MaxDetailSamplingError">
            <summary>
            The maximum distance the detail mesh surface should deviate from heightfield data.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.NavMeshes">
            <summary>
            The configuration for navmeshes.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.NavigationSettings.NavAreas">
            <summary>
            The configuration for nav areas.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Settings.NavigationSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Settings.NavigationSettings"/> class.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.PhysicsSettings">
            <summary>
            Physics simulation settings container.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.DefaultGravity">
            <summary>
            The default gravity force value (in cm^2/s).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.QueriesHitTriggers">
            <summary>
            If enabled, any Raycast or other scene query that intersects with a Collider marked as a Trigger will returns with a hit. Individual raycasts can override this behavior.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.TriangleMeshTriangleMinAreaThreshold">
            <summary>
            Triangles from triangle meshes (CSG) with an area less than or equal to this value will be removed from physics collision data. Set to less than or equal 0 to disable.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.BounceThresholdVelocity">
            <summary>
            Minimum relative velocity required for an object to bounce. A typical value for simulation stability is about 0.2 * gravity
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.FrictionCombineMode">
            <summary>
            Default friction combine mode, controls how friction is computed for multiple materials.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.RestitutionCombineMode">
            <summary>
            Default restitution combine mode, controls how restitution is computed for multiple materials.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.DisableCCD">
            <summary>
            If true CCD will be ignored. This is an optimization when CCD is never used which removes the need for physx to check it internally.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.EnableAdaptiveForce">
            <summary>
            Enables adaptive forces to accelerate convergence of the solver. Can improve physics simulation performance but lead to artifacts.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.MaxDeltaTime">
            <summary>
            The maximum allowed delta time (in seconds) for the physics simulation step.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.EnableSubstepping">
            <summary>
            Whether to substep the physics simulation.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.SubstepDeltaTime">
            <summary>
            Delta time (in seconds) for an individual simulation substep.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.MaxSubsteps">
            <summary>
            The maximum number of substeps for physics simulation.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.SupportCookingAtRuntime">
            <summary>
            Enables support for cooking physical collision shapes geometry at runtime. Use it to enable generating runtime terrain collision or convex mesh colliders.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.PhysicsSettings.LayerMasks">
            <summary>
            The collision layers masks. Used to define layer-based collision detection.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Settings.PhysicsSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Settings.PhysicsSettings"/> class.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.WindowsPlatformSettings">
            <summary>
            Windows platform settings.
            </summary>
        </member>
        <member name="M:FlaxEditor.Content.Settings.WindowsPlatformSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlaxEditor.Content.Settings.WindowsPlatformSettings"/>.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.WindowMode">
            <summary>
            The default game window mode.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.ScreenWidth">
            <summary>
            The default game window width (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.ScreenHeight">
            <summary>
            The default game window height (in pixels).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.ResizableWindow">
            <summary>
            Enables resizing the game window by the user.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.RunInBackground">
            <summary>
            Enables game running when application window loses focus.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.ForceSingleInstance">
            <summary>
            Limits maximum amount of concurrent game instances running to one, otherwise user may launch application more than once.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.OverrideIcon">
            <summary>
            Custom icon texture to use for the application (overrides the default one).
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.SupportDX12">
            <summary>
            Enables support for DirectX 12. Disabling it reduces compiled shaders count.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.SupportDX11">
            <summary>
            Enables support for DirectX 11. Disabling it reduces compiled shaders count.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.SupportDX10">
            <summary>
            Enables support for DirectX 10 and DirectX 10.1. Disabling it reduces compiled shaders count.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.WindowsPlatformSettings.SupportVulkan">
            <summary>
            Enables support for Vulkan. Disabling it reduces compiled shaders count.
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.StreamingSettings">
            <summary>
            Content streaming settings.
            </summary>
        </member>
        <member name="F:FlaxEditor.Content.Settings.StreamingSettings.TextureGroups">
            <summary>
            Textures streaming configuration (per-group).
            </summary>
        </member>
        <member name="T:FlaxEditor.Content.Settings.SettingsBase">
            <summary>
            The base class for all the settings assets.
            </summary>
        </member>
    </members>
</doc>
